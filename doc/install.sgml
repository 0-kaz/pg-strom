<!-- doc/install.sgml -->
<chapter id="install" xreflabel="Installation">
 <title>Installation</title>
 <para>
  This chapter introduce the steps to install <productname>PG-Strom</> from
  the source code.
 </para>
 <para>
  Below is the quick-check list prior to installation.
 </para>
 <variablelist>
  <title>Quick CheckList</title>
  <varlistentry>
   <term>Server hardware</term>
   <listitem>
    <para>
     It requires generic <literal>x86_64</> hardware that can run
     <productname>Linux</> operating system supported by
     <productname>CUDA Toolkit</>.
    </para>
    <para>
     We have no special requirement for CPU, storage and network devices.
     Regarding of RAM capacity, we recommend to install 150% of RAM towards
     data size for pre-warming.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>GPU devices</term>
   <listitem>
    <para>
     <productname>PG-Strom</> requires at least one GPU device on the system,
     which is supported by <productname>CUDA Toolkit</>, has computing
     capability <literal>3.0</> or later.
    </para>
    <note>
     <title>upcoming changes</title>
     <para>
      We plan to utilize dynamic parallelism in the future version.
      It was newly supported on the computing capability <literal>3.5</>,
      thus, it is safe decision to adopt high-end <productname>Kepler</>
      or newer generation.
     </para>
    </note>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>Operating System</term>
   <listitem>
    <para>
     <productname>PG-Strom</> requires <productname>Linux</> operating
     system for <literal>x86_64</> architecture, and its distribution
     supported by <productname>CUDA Toolkit</>.
    </para>
    <para>
     Our recommendation is <productname>Red Hat Enterprise Linux</> or
     <productname>CentOS</> version 6.x or 7.x series.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><productname>PostgreSQL</></term>
   <listitem>
    <para>
     <productname>PG-Strom</> requires <productname>PostgreSQL</> version
     9.5 or later is installed on the system.
    </para>
    <para>
     <productname>PostgreSQL</> 9.5 newly supports custom scan/join interface
     that allows extensions to implement a part of query execution plan.
     <productname>PG-Strom</> stands on the feature, thus, it is not available
     to work with the older version.
    </para>
    <note>
     <title><productname>PostgreSQL</> 9.5 has not been released yet</title>
     <para>
      At this moment, <productname>PostgreSQL</> 9.5 has not been released
      yet. The developer community plans to release this version within 2015.
      We can use the beta version instead, but for trial purpose.
     </para>
    </note>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><productname>CUDA Toolkit</></term>
   <listitem>
    <para>
     <productname>PG-Strom</> requires <productname>CUDA Toolkit</> version
     7.0 or later is installed on the system.
    </para>
    <para>
     <productname>CUDA Toolkit</> 7.0 newly support <literal>NVRTC</>
     (NVIDIA Run-Time Compiler) library that allows software to compile
     and generate GPU binary on run-time.
     <productname>PG-Strom</> stands on the feature, thus, it is not available
     to work with the older version.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>

 <sect1 id="install-platform">
  <title>Platform installation</title>
  <sect2 id="install-platform-os">
   <title>Operating System Installation</title>
   <para>
    Choose a <productname>Linux</> distribution that is supported by
    <productname>CUDA Toolkit</>, then install it according to the
    installation process of individual distributions.
    A list of supported <productname>Linux</> distributions are introduced at
    <ulink url="http://developer.nvidia.com/">NVIDIA DEVELOPER ZONE</ulink>.
   </para>
   <para>
    You may be able to choose the software packages to be installed during
    the operating system installation.
    Source installation of <productname>PostgreSQL</> and
    <productname>PG-Strom</> needs software development tool chains.
    Please don't forget to install the packages below.
    <itemizedlist>
     <listitem>
      <para>
       <productname>gcc</>
      </para>
     </listitem>
     <listitem>
      <para>
       <productname>make</> (GNU make)
      </para>
     </listitem>
     <listitem>
      <para>
       <productname>git</>
      </para>
     </listitem>
     <listitem>
      <para>
       <productname>bison</>
      </para>
     </listitem>
     <listitem>
      <para>
       <productname>flex</>
      </para>
     </listitem>
    </itemizedlist>
    These are usually categorized to development software.
   </para>
   <para>
    Also, please don't install <productname>PostgreSQL</> packages provided
    by the distribution, to avoid unnecessary troubles.
   </para>
   <sect3 id="install-prep-epql">
    <title>Additional Packager Configuration</title>
    <note>
     <title>Notice</title>
     <para>
      Description in this section assumes <productname>Red Hat Enterprise
      Linux</> or <productname>CentOS</>.
     </para>
    </note>
    <para>
     Once operating system gets installed on your system, a few additional
     packager configuration is needed for GPU driver installation on the
     later steps.
    </para>
    <para>
     <productname>DKMS</> (Dynamic Kernel Module Support) is a framework that
     enables to generate Linux kernel module according to the Linux kernel
     currently working on.
     NVIDIA's driver supports this framework, and we recommend to setup it.
    </para>
    <para>
     PRM package of <productname>DKMS</> is distributed as an Extra Packages
     for Enterprise Linux (EPEL).
     So, get <literal>epel-release-&lt;distribution version&gt;.noarch.rpm</>
     from the public FTP site, then install the package.
     Once <literal>epel-release</> package gets installed, it adds extra
     configuration of <productname>yum</>.
    </para>
    <para>
     In addition, the following packages are needed to build
     <productname>nvidia</> module. So, install them prior to the later steps.
     <itemizedlist>
      <listitem>
       <para>
        <productname>kernel-devel</>
       </para>
      </listitem>
      <listitem>
       <para>
        <productname>kernel-headers</>
       </para>
      </listitem>
      <listitem>
       <para>
        <productname>kernel-tools</>
       </para>
      </listitem>
      <listitem>
       <para>
        <productname>kernel-tools-libs</>
       </para>
      </listitem>
     </itemizedlist>
    </para>
   </sect3>
   <sect3 id="install-prep-nouveau">
    <title>Invalidation of compatible driver</title>
    <note>
     <title>Notice</title>
     <para>
      Description in this section assumes <productname>Red Hat Enterprise
      Linux</> or <productname>CentOS</>.
     </para>
    </note>
    <para>
     <productname>CUDA Toolkit</> needs the <literal>nvidia</> driver provided
     by <literal>NVIDIA</>, however, it conflicts with <literal>nouveau</>
     driver that is compatible open source module.
     So, you need to invalidate the <literal>nouveau</> driver prior to
     <productname>CUDA Toolkit</> installation.
    </para>
    <para>
     You can restrict <command>modprobe</> to load the <literal>nouveau</>
     driver using <filename>/etc/modprobe.d/blacklist.conf</>.
     Put the following configuration here.
<programlisting>
blacklist nouveau
options nouveau modeset=0
</programlisting>
    </para>
    <para>
     You also need to prohibit the bootstrap sequence to load the driver.
     Put the following configuration on the tail of kernel boot option on
     the <filename>/boot/grub/grub.conf</> if version 6.x, or
     the <filename>/boot/grub2/grub.cfg</> if version 7.x series.
<programlisting>
nouveau.modeset=0 rdblacklist=nouveau
</programlisting>
    </para>
    <para>
     After the above configuration, please restart the machine to validate
     the configuration.
    </para>
   </sect3>
  </sect2>

  <sect2 id="install-platform-cuda">
   <title><productname>CUDA Toolkit</> Installation</title>
   <para>
    NVIDIA provides two types of installation packages; the first is self
    executable archive (called as runfile), the other is collection of RPM
    packages. This section introduce the first one.
   </para>
   <para>
    You can download the runfile from the 
    <ulink url="http://developer.nvidia.com/">NVIDIA DEVELOPER ZONE</ulink>.
   </para>
   <para>
    Once download the runfile, attach executable permission it then run on
    the shell with <literal>root</> privilege.
   </para>
   <para>
    The runfile asks user some questions. Please follow the suggestion below:
    <itemizedlist>
     <listitem>
      <para>
       NVIDIA's graphic driver for Linux shall be installed together.
      </para>
     </listitem>
     <listitem>
      <para>
       Toolkit location is <filename>/usr/local/cuda-&lt;version&gt;</>.
       </para>
      </listitem>
      <listitem>
       <para>
        Make a symbolic link to the above Toolkit location on
        <filename>/usr/local/cuda</>.
       </para>
      </listitem>
     </itemizedlist>
<!--
needs to add config on /etc/ld.so.conf.d/
-->
   </para>
   <sect3 id="install-prep-initscript">
    <title>Initscript to load <literal>nvidia</>driver</title>
    <para>
     In case when system has no <productname>X-window</> setup, nobody loads
     the graphic driver; including <literal>nvidia</>.
    </para>
    <para>
     You can make an <literal>initscript</> to load the <literal>nvidia</>
     driver on the system startup time.
     An example for <productname>Red Hat Enterprise Linux</> 6.x is
     <ulink url="https://devtalk.nvidia.com/default/topic/381895/cuda-programming-and-performance/rhel-startup-script-for-cuda/">here</ulink>, then you can
     register the script on the operating system.
     Please assume the initscript is saved at <filename>/etc/init.d/nvidia</>.
<programlisting>
# chmod a+x /etc/init.d/nvidia
# chkconfig --add nvidia
</programlisting>
    </para>
    <para>
     <filename>nvidia</> driver shall be successfully installed if you can
     see <literal>nvidia</> and <literal>literal_uvm</> from the result of
     <command>lsmod</>, and <filename>/dev/nvidiactl</> is generated.
    </para>
   </sect3>
  </sect2>

  <sect2 id="install-platform-pgsql">
   <title><productname>PostgreSQL</> Installation</title>
   <para>
    PostgreSQL Global Development Group provides both of binary and source
    form of the <productname>PostgreSQL</>
    <ulink url="http://www.postgresql.org/download/">here</ulink>.
    You can choose a tarball of <productname>PostgreSQL</> 9.5 or later,
    or its bata version for trial purpose.
    This section introduces the steps to install from the source.
   </para>
   <para>
    Extract the tarball, then run <command>configure</> script as follows:
<programlisting>
$ ./configure --prefix=/path/to/install --enable-debug --enable-cassert
</programlisting>
    You can install <productname>PostgreSQL</> on your arbitrary directory.
    One thing pay attention is, <filename>/path/to/install/bin</> has to
    appear in <literal>$PATH</> environment variable.

    At this moment, <productname>PG-Strom</> has active development, thus,
    its implementation has not been stable yet. We recomment to turn on
    <literal>--enable-debug</> and <literal>--enable-cassert</> for trouble
    shooting.
   </para>
   <para>
    Build the source tree as usual.
<programlisting>
$ make -j &lt;Num of Parallels&gt;
$ sudo make install
</programlisting>
   </para>
   <para>
    Ensure <command>pg_config</> is runnable, and its path is correct.
<programlisting>
$ which pg_config
/usr/local/pgsql/bin/pg_config
$ pg_config --pgxs
/usr/local/pgsql/lib/pgxs/src/makefiles/pgxs.mk
</programlisting>
    <productname>PG-Strom</> does not have own <command>configure</> script
    because it shares all the configurations of <productname>PostgreSQL</>,
    thus, its build chain relies on the <command>pg_config</>.
   </para>
  </sect2>
 </sect1>

 <sect1 id="install-main">
  <title><productname>PG-Strom</> installation</title>
  <para>
   For installation of <productname>PG-Strom</>, you need to checkout
   the source code, then build and install.
  </para>
  <para>
   You can checkout the source tree of <productname>PG-Strom</> from
   its project repository, using <command>git clone</>.
<programlisting>
$ git clone https://github.com/pg-strom/devel.git pg_strom
</programlisting>
  </para>
  <para>
   <productname>PG-Strom</> relies on the platform configuration stuff by
   <productname>PostgreSQL</>, so you don't need to have special configuration
   prior to <command>make</>,
<programlisting>
$ cd pg_strom
$ make
$ sudo make install
</programlisting>
  </para>
  <variablelist>
   <title>Trouble Shooting</title>
   <varlistentry>
    <term>If <command>pg_config</> was not found</term>
    <listitem>
     <para>
      Ensure the <literal>$PATH</> environment variable contains the directory
      you installed the binary commands of <productname>PostgreSQL</>.
     </para>
     <para>
      It shall be <filename>&lt;path to PostgreSQL installation directory&gt;/bin</>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>If CUDA related file was not found</term>
    <listitem>
     <para>
      Ensure whether the symbolic link <filename>/usr/local/cuda</> points
      the correct directory where we installed <productname>CUDA Toolkit</>.
     </para>
     <para>
      If you installed <productname>CUDA Toolkit</> on the out of default
      directory, override <literal>CUDA_PATH</> variable of <command>make</>.
<programlisting>
$ make CUDA_PATH=&lt;path to cuda installation base&gt;
</programlisting>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 id="install-post">
  <title>Post installation setup</title>
  <para>
   This section introduces the construction of initial database and relevant
   configurations.
  </para>
  <sect2 id="install-post-initdb">
   <title>construction of the database</title>
   <para>
    <command>initdb</> command constructs initial database on an empty
    directory. We can specify the directory using command line option,
    or <literal>$PGDATA</> environment variable.
<programlisting>
$ export PGDATA=/path/to/database
$ initdb
</programlisting>
    We assume <literal>$PGDATA</> environment variable is correctly set
    on the introduction below.
   </para>
   <para>
    <filename>$PGDATA/postgresql.conf</> is the master configuration file
    of <productname>PostgreSQL</>. We need to add or adjust some configuration
    parameters, on the next.
   </para>
   <variablelist>
    <varlistentry>
     <term>shared_preload_libraries</term>
     <listitem>
      <para>
       It has to be modified to add <literal>pg_strom</>, to load
       <productname>PG-Strom</> on <productname>PostgreSQL</> startup.
      </para>
      <para>
       Example:
<programlisting>
shared_preload_libraries = 'pg_strom'
</programlisting>
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>shared_buffers</term>
     <listitem>
      <para>
       We strongly recommend to expand <literal>shared_buffers</> from
       the default, to the expected amount of database size.
       <productname>PG-Strom</> prefers to run on pre-loaded data blocks
       due to the speed of storage devices. In addition, it is not
       trivial cost for data exchange between shared buffer of
       <productname>PostgreSQL</> and page cache of operating system.
       So, it is the best for <productname>PG-Strom</> to run on-memory
       data chunks.
      </para>
      <para>
       Example:
<programlisting>
shared_buffers = 10GB
</programlisting>
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>work_mem</term>
     <listitem>
      <para>
       We strongly recommend to expand <literal>work_mem</> from the
       default, to several gigabytes at least.
       Analytic queries tends to consume working memory, but less
       concurrency than transactional workloads, so larger assignment of
       <varname>work_mem</> allows to adopt better execution strategy on
       CPU side.
      </para>
<programlisting>
work_mem = 10GB
</programlisting>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
  <sect2 id="instal-post-initscript">
   <title>Init script of PostgreSQL</title>
   <para>
    <filename>contrib/start-scripts/linux</> of <productname>PostgreSQL</>
    source tree provides well designed template for init script.
    You can adjust some parameters, then deploy the script to start
    <productname>PostgreSQL</> on system startup time.
   </para>
   <para>
    All you have to adjust are the following three parameters.
    The <literal>PGDATA</> is the directry where <command>initdb</> run on.
    The <literal>PGUSER</> is the user who launches <productname>PostgreSQL</>
    server process, but should not be <literal>root</>.
    The <literal>PGLOG</> is the path to the log file; that has to be writable
    by <literal>PGUSER</>.
<programlisting>
# Data directory
PGDATA="/usr/local/pgsql/data"

# Who to run the postmaster as, usually "postgres".  (NOT "root")
PGUSER=postgres

# Where to keep a log file
PGLOG="$PGDATA/serverlog"
</programlisting>
   </para>
   <para>
    Once the script file is deployed on, you can register the init script
    using <command>chkconfig</>, like:
<programlisting>
# cp /path/to/postgresql/contrib/start-scripts/linux /etc/init.d/postgresql
# chkconfig add postgres
</programlisting>
   </para>
  </sect2>

  <sect2 id="install-post-create-extension">
   <title>Define Objects of PG-Strom</title>
   <para>
    Once <productname>PostgreSQL</> server process gets started, we need to
    define database objects related to <productname>PG-Strom</>.
    <command>CREATE EXTENSION</> allows to run a set of SQL commands
    prepared for each extensions. You need to run the command below, to
    define schema, functions, types and others required by
    <productname>PG-Strom</>.
<programlisting>
# CREATE EXTENSION pg_strom;
</programlisting>
   </para>
   <para>
    If you can run the command on the <literal>template1</> database also,
    not only your working database, further databases that shall be created
    later will already have required database object on its construction time.
   </para>
  </sect2>

<!--
  <sect2 id="install-post-coredump">
   <title></title>
   <para>
    core dump setup
   </para>
  </sect2>
-->
 </sect1>
</chapter>
