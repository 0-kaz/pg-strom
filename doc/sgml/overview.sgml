<!-- doc/overview.sgml -->
<chapter id="overview" xreflabel="Overview">
 <title>Overview</title>
 <para>
  <productname>PG-Strom</> is an extension of <productname>PostgreSQL</> 9.5
  or later, to off-load some sort of CPU intensive SQL workloads into GPU
  (Graphis Processor Unit). It is designed to shorten response time of
  complicated queries that run on large data set; typical analytic or batch
  workloads, but not suitable for transactional or many concurrent workloads.
 </para>
 <para>
  <productname>PG-Strom</> has two core ideas. The first is native GPU code
  generation on the fly, and the second is asynchronous massive parallel
  execution.
  It allows to execute binary code on behalf of the supplied on SQL on GPU
  devices transparently, from the standpoint of users / applications.
  It also enables to pull out computing capability of multi-hundreds to
  -thousands parallel cores of GPU to process many relational rows.
 </para>
 <para>
  The purpose of <productname>PG-Strom</> is intermediation between
  <productname>PostgreSQL</> and outcome from the recent semiconductor
  evolutions; like GPU and SSD (Solid State Drive), that has been still
  improved for multiple decades according to the Moore's row.
 </para>
 <variablelist>
  <title>Supported Features</title>
  <varlistentry>
   <term>GpuScan</term>
   <listitem>
    <para>
     It off-loads evaluation of complicated scan qualifiers (as known as
     <literal>WHERE</> clause) to GPU devices, then CPU can fetch matched
     rows only.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>GpuHashJoin</term>
   <listitem>
    <para>
     It off-loads N-way relations' join based on the hash-join algorithm
     and tuple construction but parallelized by GPU devices, then CPU can
     fetch already joined tuples.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>GpuNestLoop</term>
   <listitem>
    <para>
     It also off-loads N-way relation's join based on the unparametarized
     nested-loop algorithm and tuple construction but parallelized by GPU
     devices, then CPU can fetch already joined tuples.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>GpuPreAgg</term>
   <listitem>
    <para>
     It tries to reduce number of rows to be eventually aggregated by CPU.
     Once this logic gets injected, it constructs partial aggregation
     by GPU as a source of final result (e.g, number of items and sum
     of values for source of average, but smaller number of input).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>GpuSort</term>
   <listitem>
    <para>
     It orders the input data according to the sorting key, using hybrid
     approach; GPU runs bitonic sort for each data chunk, then CPU merges
     the sorted chunks.
    </para>
    <para>
     Its merge process implementation is not efficient at this moment, so
     we disables <literal>GpuSort</> feature in the default.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>Supported Data Types</term>
   <listitem>
    <itemizedlist>
     <listitem>
      <para>
       <emphasis>Numeric:</>
       <literal>smallint</>, <literal>int</>, <literal>bigint</>,
       <literal>real</>, <literal>float</> and <literal>numeric</>
      </para>
     </listitem>
     <listitem>
      <para>
       <emphasis>Time and Date:</>
       <literal>date</>, <literal>time</>,
       <literal>timetz</>, <literal>timestamp</>,
       <literal>timestamptz</> and <literal>interval</>
      </para>
     </listitem>
     <listitem>
      <para>
       <emphasis>Text:</>
       <literal>text</>, <literal>varchar(n)</> and <literal>char(n)</>.
      </para>
     </listitem>
     <listitem>
      <para>
       <emphasis>Others:</> <literal>bool</> and <literal>money</>
      </para>
     </listitem>
    </itemizedlist>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>Supported Functions & Operators</term>
   <listitem>
    <itemizedlist>
     <listitem>
      <para>
       <emphasis>Arithmetic operations</>
      </para>
      <para>
       Operators of <literal>+</>, <literal>-</>, <literal>*</>,
       <literal>/</> and so on, for each supported data types.
      </para>
     </listitem>
     <listitem>
      <para>
       <emphasis>Comparison operations</>
      </para>
      <para>
       Operators of <literal>=</>, <literal>&lt;&gt;</>, <literal>&lt;</>,
       <literal>&lt;=</>, <literal>&gt;</> and <literal>&gt;=</>, for each
       supported data types.
      </para>
     </listitem>
     <listitem>
      <para>
       <emphasis>Mathematical functions</>
      </para>
      <para>
       <literal>sqrt</>, <literal>ln</>, <literal>pow</>,
       <literal>sin</>, <literal>cos</> and various mathematical functions
      </para>
     </listitem>
     <listitem>
      <para>
       <emphasis>Aggregation functions</>
      </para>
      <para>
       <literal>min</>, <literal>max</>, <literal>avg</>, <literal>sum</>,
       <literal>stddev</>, <literal>corr</> and various aggregations.
      </para>
     </listitem>
    </itemizedlist>
   </listitem>
  </varlistentry>
 </variablelist>
</chapter>
