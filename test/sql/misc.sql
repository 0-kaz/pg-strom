---
--- Misc tests according to issues
---

SET pg_strom.regression_test_mode = on;
SET client_min_messages = error;
DROP SCHEMA IF EXISTS regtest_miscs CASCADE;
CREATE SCHEMA regtest_miscs;
SET search_path = regtest_miscs,public;
SET pg_strom.enabled=on;
SET enable_seqscan=0;

-- #624

CREATE TABLE t1(c0 money , c1 money);
INSERT INTO t1(c0, c1) VALUES(1, 1);
EXPLAIN(costs off, verbose)
SELECT SUM(t1.c1) FROM t1;
SELECT SUM(t1.c1) FROM t1;


-- #625
DROP TABLE IF EXISTS t0;
DROP TABLE IF EXISTS t1;

CREATE TABLE t0(c0 int , c1 int);
INSERT INTO t0(c0, c1) VALUES(0, 1);
CREATE TABLE t1(LIKE t0);
ALTER TABLE t0 DROP c1;
EXPLAIN(costs off, verbose)
SELECT * FROM t1 LEFT OUTER JOIN t0 ON (t1.c0 = t1.c1);
SELECT * FROM t1 LEFT OUTER JOIN t0 ON (t1.c0 = t1.c1);


-- #626
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;

CREATE TABLE t1(c0 INT);
CREATE TABLE t2(LIKE t1);
INSERT INTO t2(c0) VALUES(1);
INSERT INTO t1(c0) VALUES(1);
EXPLAIN(costs off, verbose)
SELECT t2.c0 FROM t1 RIGHT OUTER JOIN t2 ON ((CAST(0.1 AS MONEY)) IN (CAST(0.1 AS MONEY)));
SELECT t2.c0 FROM t1 RIGHT OUTER JOIN t2 ON ((CAST(0.1 AS MONEY)) IN (CAST(0.1 AS MONEY)));


-- #627
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;

CREATE TABLE t1(c0 INT);
CREATE TABLE t2(LIKE t1);
INSERT INTO t2(c0) VALUES(1);
INSERT INTO t1(c0) VALUES(1);
EXPLAIN(costs off, verbose)
SELECT t2 FROM t1 RIGHT OUTER JOIN t2 ON ((CAST(0.1 AS MONEY)) IN (CAST(0.1 AS MONEY)));
SELECT t2 FROM t1 RIGHT OUTER JOIN t2 ON ((CAST(0.1 AS MONEY)) IN (CAST(0.1 AS MONEY)));


-- #628
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;

CREATE TABLE t1(c0 INT);
CREATE TABLE t2(LIKE t1);
INSERT INTO t2(c0) VALUES(1);
INSERT INTO t1(c0) VALUES(1);
EXPLAIN(costs off, verbose)
SELECT t1.c0 FROM t1 RIGHT OUTER JOIN t2 ON ((CAST(0.1 AS MONEY)) NOT IN (CAST(0.1 AS MONEY)));
SELECT t1.c0 FROM t1 RIGHT OUTER JOIN t2 ON ((CAST(0.1 AS MONEY)) NOT IN (CAST(0.1 AS MONEY)));


-- #630
DROP TABLE IF EXISTS t0;
DROP TABLE IF EXISTS t1;

CREATE TABLE t0(c0 money , c1 boolean);
CREATE TABLE t1(LIKE t0);
INSERT INTO t0(c0, c1) VALUES((1)::MONEY, TRUE);
INSERT INTO t1(c0, c1) VALUES((1)::MONEY, TRUE);
EXPLAIN(costs off, verbose)
SELECT SUM(t1.c0) FROM t1 LEFT OUTER JOIN t0 ON ((t0.c0)IS DISTINCT FROM(CAST(1.0E1 AS MONEY))) WHERE (t0.c1) IS NULL;
SELECT SUM(t1.c0) FROM t1 LEFT OUTER JOIN t0 ON ((t0.c0)IS DISTINCT FROM(CAST(1.0E1 AS MONEY))) WHERE (t0.c1) IS NULL;


-- #631
DROP TABLE IF EXISTS t0;
DROP TABLE IF EXISTS t1;

create table t0 (
"c0" bigint ,
"c1" float ,
"c2" decimal(40, 20) 
);
insert into t0 values (0.1,1,0.1);
create table t1 (
"c0" bigint ,
"c1" float ,
"c2" decimal(40, 20) 
);
insert into t1 values (0.1,1,0.1);
EXPLAIN(costs off, verbose)
WITH MYWITH AS (SELECT 1 AS f1
   FROM  (SELECT "c2" AS f6 FROM t0) AS t1 
    INNER JOIN  (SELECT "c1" AS f5 FROM t1) AS t2  
    ON (( ((f5)  IN (f6))) AND ((1 > ((f6)::bigint >> 5)) IS FALSE)))
WITH MYWITH AS (SELECT 1 AS f1
   FROM  (SELECT "c2" AS f6 FROM t0) AS t1 
    INNER JOIN  (SELECT "c1" AS f5 FROM t1) AS t2  
    ON (( ((f5)  IN (f6))) AND ((1 > ((f6)::bigint >> 5)) IS FALSE)))


-- #632
DROP TABLE IF EXISTS t0;

create table t0 (c1 float, c2 decimal(40, 20));
insert into t0 values (1,0.1);
SELECT * FROM
        (SELECT c2 AS f1,
                c1 AS f2
         FROM t0) AS t3
      WHERE((f2) IN (f2, 1))
        AND (NOT (f1 = ALL
                    (SELECT c2
                     FROM t0)));


-- #633
DROP TABLE IF EXISTS t0;

CREATE TABLE t0(c0 INT );
INSERT INTO t0(c0) VALUES(1);
SELECT AVG(0.1) FROM t0 GROUP BY t0.c0;


-- #634
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;

CREATE TABLE t1(c0 int);
CREATE TABLE t2(LIKE t1);
INSERT INTO t1(c0) VALUES(1);
INSERT INTO t2(c0) VALUES(1);
SELECT MIN(t2.c0)
FROM t2
LEFT OUTER JOIN
    (SELECT c0 FROM t1) AS sub0 
        ON (t2.c0 > 0) 
GROUP BY (t2.c0)
HAVING BOOL_AND(TRUE);


-- #635
DROP TABLE IF EXISTS t0;

CREATE TABLE t0(c0 int , c1 int );
INSERT INTO t0(c0, c1) VALUES(1, 1);
SELECT MIN(c0) FROM t0 GROUP BY t0.c0 HAVING CAST((MIN('1')) AS BOOLEAN);


-- #636
DROP TABLE IF EXISTS t0;

CREATE TABLE t0(c0 INT , c1 INT  PRIMARY KEY );
INSERT INTO t0(c1, c0) VALUES(1, 1);
SELECT MAX(c0) FROM t0 GROUP BY t0.c1 HAVING t0.c0<MIN(t0.c0);


-- #637
DROP TABLE IF EXISTS t0;

CREATE TABLE t1(c0 int) USING heap;
INSERT INTO t1(c0) VALUES(1);
SELECT c0 FROM t1 GROUP BY t1.c0 HAVING NOT (MIN(65536))::BOOLEAN;


-- #638
DROP TABLE IF EXISTS t0;

CREATE TABLE t1(c0 int) USING heap;
INSERT INTO t1(c0) VALUES(1);
SELECT MIN(1) FROM t1 GROUP BY t1.c0 HAVING NOT (MIN(1))::BOOLEAN;


-- #639
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;

CREATE TABLE t1(c0 int);
CREATE TABLE t2(LIKE t1);
INSERT INTO t1(c0) VALUES(1);
INSERT INTO t2(c0) VALUES(1);
SELECT MIN(t2.c0)
FROM t2
LEFT OUTER JOIN
    (SELECT c0 FROM t1) AS sub0 
        ON t2.c0 > 0 
GROUP BY (t2.c0)
HAVING TRUE;


-- #642
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;

CREATE TABLE t1(c0 int);
CREATE TABLE t2(LIKE t1);
INSERT INTO t1(c0) VALUES(1);
INSERT INTO t2(c0) VALUES(1);
SELECT MIN(t2.c0)
FROM t2
LEFT OUTER JOIN
    (SELECT c0 FROM t1) AS sub0 
        ON t2.c0 > 0 
GROUP BY (t2.c0)
HAVING TRUE;


-- #643
DROP TABLE IF EXISTS t0;
DROP TABLE IF EXISTS t1;

CREATE TABLE t0(c0 int, UNIQUE(c0));
CREATE TABLE t1(LIKE t0);
INSERT INTO t0 VALUES(1);
INSERT INTO t1 VALUES(1);
SELECT * FROM t0 LEFT OUTER JOIN t1 ON FALSE CROSS JOIN (SELECT * FROM t0, t1 WHERE TRUE ORDER BY t0.c0 ASC, t1.c0 DESC) AS sub;


-- #644
DROP TABLE IF EXISTS t0;
DROP TABLE IF EXISTS t1;

CREATE TABLE t0(c0 DECIMAL) ;
CREATE TABLE t1(LIKE t0);
INSERT INTO t0(c0) VALUES(NULL);
INSERT INTO t1(c0) VALUES(NULL);
SELECT * FROM t0 RIGHT OUTER JOIN t1 ON ((t1.c0)::INT) IS NULL;


-- #645
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t3;

CREATE TABLE t1(c0 int);
CREATE TABLE t3(LIKE t1);
INSERT INTO t1(c0) VALUES(1);
INSERT INTO t3(c0) VALUES(1);
SELECT (((t1.c0) BETWEEN SYMMETRIC 0 AND 1)OR(((0.1)::MONEY) IN (CAST(0.1 AS MONEY), CAST(0.0 AS MONEY)))) FROM t1, t3 WHERE (t1.c0) BETWEEN SYMMETRIC (0) AND (t3.c0);


-- #646
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;
DROP TABLE IF EXISTS t3;

CREATE TABLE t1(c0 CHAR, c1 DECIMAL);
CREATE TABLE t2(LIKE t1);
CREATE TABLE t3(LIKE t1);
INSERT INTO t3(c0, c1) VALUES(B'1', 0.5);
INSERT INTO t2(c0, c1) VALUES(B'1', 0.7);
INSERT INTO t1(c0) VALUES(B'1');
SELECT ('[0,1)'::int4range), (t1.c1)::INT FROM t1, t2, t3 WHERE ((t3.c1)!=(t2.c1));


-- #647
DROP TABLE IF EXISTS t0;
DROP TABLE IF EXISTS t1;

CREATE TABLE t0(c0 int , c1 int);
CREATE TABLE t1(LIKE t0);
INSERT INTO t0(c0, c1) VALUES(1, 0), (1, 0);
INSERT INTO t1(c0, c1) VALUES(1, 0);
SELECT * FROM t1, t0 WHERE ((t1.c1) IS NOT DISTINCT FROM (t0.c1)) IS TRUE;


-- #648
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;

CREATE TABLE t1(c0 money , c1 int4range);
CREATE TABLE t2(LIKE t1);
INSERT INTO t1(c0, c1) VALUES(CAST(0.5 AS MONEY), ('[0,1]'::int4range));
INSERT INTO t2(c1, c0) VALUES('[0,1]'::int4range, (0.7)::MONEY);
EXPLAIN(costs off, verbose)
SELECT t1.c0 FROM t2, t1 WHERE (t2.c0) BETWEEN SYMMETRIC (t1.c0) AND ((0.9)::MONEY);
SELECT t1.c0 FROM t2, t1 WHERE (t2.c0) BETWEEN SYMMETRIC (t1.c0) AND ((0.9)::MONEY);


-- #649
DROP TABLE IF EXISTS t0;
DROP TABLE IF EXISTS t1;

CREATE TABLE t0(c0 money);
CREATE TABLE t1(LIKE t0);
VACUUM FREEZE ANALYZE t1(c0);
INSERT INTO t1(c0) VALUES((0.1)::MONEY);
INSERT INTO t0(c0) VALUES((0.1)::MONEY);
EXPLAIN(costs off, verbose)
SELECT * FROM t1, t0 WHERE (t0.c0) BETWEEN (t1.c0) AND (CAST(0.8 AS MONEY));
SELECT * FROM t1, t0 WHERE (t0.c0) BETWEEN (t1.c0) AND (CAST(0.8 AS MONEY));


-- #650
DROP TABLE IF EXISTS t0;
DROP TABLE IF EXISTS t1;

CREATE TABLE t0(c0 REAL);
CREATE TABLE t1(c0 boolean);
INSERT INTO t1(c0) VALUES(null);
INSERT INTO t0(c0) VALUES(0.1);
EXPLAIN(costs off, verbose)
SELECT * FROM t0,t1 WHERE ((t0.c0)::INT IS NOT DISTINCT FROM (t0.c0)) OR (t1.c0);
SELECT * FROM t0,t1 WHERE ((t0.c0)::INT IS NOT DISTINCT FROM (t0.c0)) OR (t1.c0);


-- #679
DROP TABLE IF EXISTS t0;
DROP TABLE IF EXISTS t1;

CREATE TABLE t0(c0 serial CHECK(true) NO INHERIT UNIQUE PRIMARY KEY) ;
CREATE TABLE t1(LIKE t0);
INSERT INTO t0(c0) VALUES(1);
INSERT INTO t1(c0) VALUES(1);
EXPLAIN(costs off, verbose)
SELECT * FROM t0 RIGHT OUTER JOIN (SELECT * FROM t1, t0 ORDER BY t0.c0 DESC, t1.c0 DESC) AS sub0 ON FALSE;
SELECT * FROM t0 RIGHT OUTER JOIN (SELECT * FROM t1, t0 ORDER BY t0.c0 DESC, t1.c0 DESC) AS sub0 ON FALSE;


-- #680
DROP TABLE IF EXISTS t0;
DROP TABLE IF EXISTS t1;

CREATE TABLE t0(c0 money, c1 BIT, c2 inet);
CREATE TABLE IF NOT EXISTS t1(LIKE t0);
INSERT INTO t1(c2, c0) VALUES('45.143.62.35', (1.0)::MONEY);
INSERT INTO t0(c1, c0, c2) VALUES('B1', CAST(0.5 AS MONEY), '83.157.203.154');
EXPLAIN(costs off, verbose)
SELECT t1.c1, t0.c2 FROM t1 FULL OUTER JOIN t0 ON (t0.c2) IN (t1.c2) WHERE ((t0.c0) IN ((0.1)::MONEY)) ISNULL;
SELECT t1.c1, t0.c2 FROM t1 FULL OUTER JOIN t0 ON (t0.c2) IN (t1.c2) WHERE ((t0.c0) IN ((0.1)::MONEY)) ISNULL;


-- #683
DROP TABLE IF EXISTS t2;
DROP TABLE IF EXISTS t3;

CREATE TABLE t2(c0 bigint);
CREATE TABLE t3(LIKE t2);
INSERT INTO t3(c0) VALUES(33092);
EXPLAIN(costs off, verbose)
SELECT DISTINCT ON (t3.c0 + 1) t3.c0 FROM t3 FULL OUTER JOIN t2 ON (t2.c0) IN (t3.c0);
SELECT DISTINCT ON (t3.c0 + 1) t3.c0 FROM t3 FULL OUTER JOIN t2 ON (t2.c0) IN (t3.c0);

DROP SCHEMA regtest_miscs CASCADE;