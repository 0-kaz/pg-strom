---
--- Test for misc device expressions
---
SET pg_strom.regression_test_mode = on;
SET client_min_messages = error;
DROP SCHEMA IF EXISTS regtest_dexpr_misc_temp CASCADE;
CREATE SCHEMA regtest_dexpr_misc_temp;
RESET client_min_messages;
SET search_path = regtest_dexpr_misc_temp,public;
CREATE TABLE regtest_data (
  id    int,
  a     numeric,
  b     numeric,
  c     numeric,
  d     numeric,
  memo  text
);
SELECT pgstrom.random_setseed(20190701);
 random_setseed 
----------------
 
(1 row)

INSERT INTO regtest_data (
  SELECT x, pgstrom.random_float(20,-100.0,100.0)::numeric(9,3),
            pgstrom.random_float(20,-100.0,100.0)::numeric(9,3),
            pgstrom.random_float(20,-100.0,100.0)::numeric(9,3),
            pgstrom.random_float(20,-100.0,100.0)::numeric(9,3),
            pgstrom.random_text_len(5, 48)
    FROM generate_series(1,6000) x
);
-- force to use GpuScan and disables to print source files
SET enable_seqscan = off;
-- test for COALESCE / GREATEST / LEAST
SET pg_strom.enabled = on;
VACUUM ANALYZE;
EXPLAIN (verbose, costs off)
SELECT id, COALESCE(a, b, c, d) v1,
           GREATEST(a, b, c, d) v2,
           LEAST(a, b, c, d) v3,
           COALESCE(a+b,b+c,c+d) v4,
           GREATEST(a+b,b+c,c+d) v5,
           LEAST(a+b,b+c,c+d) v6
  INTO test01g
  FROM regtest_data
 WHERE id > 0;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dexpr_misc_temp.regtest_data
   Output: id, (COALESCE(a, b, c, d)), (GREATEST(a, b, c, d)), (LEAST(a, b, c, d)), (COALESCE((a + b), (b + c), (c + d))), (GREATEST((a + b), (b + c), (c + d))), (LEAST((a + b), (b + c), (c + d)))
   GPU Projection: id, COALESCE(a, b, c, d), GREATEST(a, b, c, d), LEAST(a, b, c, d), COALESCE((a + b), (b + c), (c + d)), GREATEST((a + b), (b + c), (c + d)), LEAST((a + b), (b + c), (c + d))
   GPU Scan Quals: (id > 0) [rows: 6000 -> 5999]
   KVars-Slot: <slot=0, type='int4', expr='id', kv_off=0x0000>, <slot=1, type='numeric', expr='(COALESCE(a, b, c, d))'>, <slot=2, type='numeric', expr='a', kv_off=0x1400>, <slot=3, type='numeric', expr='b', kv_off=0x8400>, <slot=4, type='numeric', expr='c', kv_off=0xf400>, <slot=5, type='numeric', expr='d', kv_off=0x16400>, <slot=6, type='numeric', expr='(GREATEST(a, b, c, d))'>, <slot=7, type='numeric', expr='(LEAST(a, b, c, d))'>, <slot=8, type='numeric', expr='(COALESCE((a + b), (b + c), (c + d)))'>, <slot=9, type='numeric', expr='(GREATEST((a + b), (b + c), (c + d)))'>, <slot=10, type='numeric', expr='(LEAST((a + b), (b + c), (c + d)))'>
   KVecs-Buffer: nbytes: 119808, ndims: 2, items=[kvec0=<0x0000-13ff, type='int4', expr='id'>, kvec1=<0x1400-83ff, type='numeric', expr='a'>, kvec2=<0x8400-f3ff, type='numeric', expr='b'>, kvec3=<0xf400-163ff, type='numeric', expr='c'>, kvec4=<0x16400-1d3ff, type='numeric', expr='d'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='numeric' resno=2(a)>, <slot=3, type='numeric' resno=3(b)>, <slot=4, type='numeric' resno=4(c)>, <slot=5, type='numeric' resno=5(d)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-13ff, type='int4', expr='id'>, <slot=2, offset=0x1400-83ff, type='numeric', expr='a'>, <slot=3, offset=0x8400-f3ff, type='numeric', expr='b'>, <slot=4, offset=0xf400-163ff, type='numeric', expr='c'>, <slot=5, offset=0x16400-1d3ff, type='numeric', expr='d'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,6,7,8,9,10> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-1400, expr='id'}}, {SaveExpr: <slot=1, type='numeric'> arg={Coalesce args=[{Var(numeric): kvec=0x1400-8400, expr='a'}, {Var(numeric): kvec=0x8400-f400, expr='b'}, {Var(numeric): kvec=0xf400-16400, expr='c'}, {Var(numeric): kvec=0x16400-1d400, expr='d'}]}}, {SaveExpr: <slot=6, type='numeric'> arg={Greatest args=[{Var(numeric): kvec=0x1400-8400, expr='a'}, {Var(numeric): kvec=0x8400-f400, expr='b'}, {Var(numeric): kvec=0xf400-16400, expr='c'}, {Var(numeric): kvec=0x16400-1d400, expr='d'}]}}, {SaveExpr: <slot=7, type='numeric'> arg={Least args=[{Var(numeric): kvec=0x1400-8400, expr='a'}, {Var(numeric): kvec=0x8400-f400, expr='b'}, {Var(numeric): kvec=0xf400-16400, expr='c'}, {Var(numeric): kvec=0x16400-1d400, expr='d'}]}}, {SaveExpr: <slot=8, type='numeric'> arg={Coalesce args=[{Func(numeric)::numeric_add args=[{Var(numeric): kvec=0x1400-8400, expr='a'}, {Var(numeric): kvec=0x8400-f400, expr='b'}]}, {Func(numeric)::numeric_add args=[{Var(numeric): kvec=0x8400-f400, expr='b'}, {Var(numeric): kvec=0xf400-16400, expr='c'}]}, {Func(numeric)::numeric_add args=[{Var(numeric): kvec=0xf400-16400, expr='c'}, {Var(numeric): kvec=0x16400-1d400, expr='d'}]}]}}, {SaveExpr: <slot=9, type='numeric'> arg={Greatest args=[{Func(numeric)::numeric_add args=[{Var(numeric): kvec=0x1400-8400, expr='a'}, {Var(numeric): kvec=0x8400-f400, expr='b'}]}, {Func(numeric)::numeric_add args=[{Var(numeric): kvec=0x8400-f400, expr='b'}, {Var(numeric): kvec=0xf400-16400, expr='c'}]}, {Func(numeric)::numeric_add args=[{Var(numeric): kvec=0xf400-16400, expr='c'}, {Var(numeric): kvec=0x16400-1d400, expr='d'}]}]}}, {SaveExpr: <slot=10, type='numeric'> arg={Least args=[{Func(numeric)::numeric_add args=[{Var(numeric): kvec=0x1400-8400, expr='a'}, {Var(numeric): kvec=0x8400-f400, expr='b'}]}, {Func(numeric)::numeric_add args=[{Var(numeric): kvec=0x8400-f400, expr='b'}, {Var(numeric): kvec=0xf400-16400, expr='c'}]}, {Func(numeric)::numeric_add args=[{Var(numeric): kvec=0xf400-16400, expr='c'}, {Var(numeric): kvec=0x16400-1d400, expr='d'}]}]}}]}
   Fallback-desc: [<dest='0', expr='id', depth=0:1>, <dest='7', expr='a', depth=0:1>, <dest='8', expr='b', depth=0:1>, <dest='9', expr='c', depth=0:1>, <dest='10', expr='d', depth=0:1>]
   CUDA Stack Size: 4288
(12 rows)

SELECT id, COALESCE(a, b, c, d) v1,
           GREATEST(a, b, c, d) v2,
           LEAST(a, b, c, d) v3,
           COALESCE(a+b,b+c,c+d) v4,
           GREATEST(a+b,b+c,c+d) v5,
           LEAST(a+b,b+c,c+d) v6
  INTO test01g
  FROM regtest_data
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, COALESCE(a, b, c, d) v1,
           GREATEST(a, b, c, d) v2,
           LEAST(a, b, c, d) v3,
           COALESCE(a+b,b+c,c+d) v4,
           GREATEST(a+b,b+c,c+d) v5,
           LEAST(a+b,b+c,c+d) v6
  INTO test01p
  FROM regtest_data
 WHERE id > 0;
(SELECT * FROM test01g EXCEPT SELECT * FROM test01p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test01p EXCEPT SELECT * FROM test01g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

SET pg_strom.enabled = on;
VACUUM ANALYZE;
EXPLAIN (verbose, costs off)
SELECT id, COALESCE(a::float, b::float, -1.0, d::float / 0.0) v1
  INTO test02g
  FROM regtest_data
 WHERE id > 0;
                                                                                                                                                                                 QUERY PLAN                                                                                                                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dexpr_misc_temp.regtest_data
   Output: id, (COALESCE((a)::double precision, (b)::double precision, '-1'::double precision))
   GPU Projection: id, COALESCE((a)::double precision, (b)::double precision, '-1'::double precision)
   GPU Scan Quals: (id > 0) [rows: 6000 -> 5999]
   KVars-Slot: <slot=0, type='int4', expr='id', kv_off=0x0000>, <slot=1, type='float8', expr='(COALESCE((a)::double precision, (b)::double precision, '-1'::double precision))'>, <slot=2, type='numeric', expr='a', kv_off=0x1400>, <slot=3, type='numeric', expr='b', kv_off=0x8400>
   KVecs-Buffer: nbytes: 62464, ndims: 2, items=[kvec0=<0x0000-13ff, type='int4', expr='id'>, kvec1=<0x1400-83ff, type='numeric', expr='a'>, kvec2=<0x8400-f3ff, type='numeric', expr='b'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='numeric' resno=2(a)>, <slot=3, type='numeric' resno=3(b)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-13ff, type='int4', expr='id'>, <slot=2, offset=0x1400-83ff, type='numeric', expr='a'>, <slot=3, offset=0x8400-f3ff, type='numeric', expr='b'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-1400, expr='id'}}, {SaveExpr: <slot=1, type='float8'> arg={Coalesce args=[{Func(float8)::float8 arg={Var(numeric): kvec=0x1400-8400, expr='a'}}, {Func(float8)::float8 arg={Var(numeric): kvec=0x8400-f400, expr='b'}}, {Const(float8): value='-1'}]}}]}
   Fallback-desc: [<dest='0', expr='id', depth=0:1>, <dest='2', expr='a', depth=0:1>, <dest='3', expr='b', depth=0:1>]
   CUDA Stack Size: 3984
(12 rows)

SELECT id, COALESCE(a::float, b::float, -1.0, d::float / 0.0) v1
  INTO test02g
  FROM regtest_data
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, COALESCE(a::float, b::float, -1.0, d::float / 0.0) v1
  INTO test02p
  FROM regtest_data
 WHERE id > 0;
SELECT p.id, p.v1, g.v1
  FROM test02g g, test02p p
 WHERE p.id = g.id AND abs(p.v1 - g.v1) > 0.001;
 id | v1 | v1 
----+----+----
(0 rows)

-- test for BoolExpr
SET pg_strom.enabled = on;
VACUUM ANALYZE;
EXPLAIN (verbose, costs off)
SELECT id, not a > b v1,
           (a + b > c + d or a - b < c - d) and memo like '%abc%' v2,
           (a + d > b + c and b < d) or memo like '%xyz%' v3
  INTO test10g
  FROM regtest_data
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dexpr_misc_temp.regtest_data
   Output: id, ((a <= b)), (((((a + b) > (c + d)) OR ((a - b) < (c - d))) AND (memo ~~ '%abc%'::text))), (((((a + d) > (b + c)) AND (b < d)) OR (memo ~~ '%xyz%'::text)))
   GPU Projection: id, (a <= b), ((((a + b) > (c + d)) OR ((a - b) < (c - d))) AND (memo ~~ '%abc%'::text)), ((((a + d) > (b + c)) AND (b < d)) OR (memo ~~ '%xyz%'::text))
   GPU Scan Quals: (id > 0) [rows: 6000 -> 5999]
   KVars-Slot: <slot=0, type='int4', expr='id', kv_off=0x0000>, <slot=1, type='bool', expr='((a <= b))'>, <slot=2, type='numeric', expr='a', kv_off=0x1400>, <slot=3, type='numeric', expr='b', kv_off=0x8400>, <slot=4, type='bool', expr='(((((a + b) > (c + d)) OR ((a - b) < (c - d))) AND (memo ~~ '%abc%'::text)))'>, <slot=5, type='numeric', expr='c', kv_off=0xf400>, <slot=6, type='numeric', expr='d', kv_off=0x16400>, <slot=7, type='text', expr='memo', kv_off=0x1d400>, <slot=8, type='bool', expr='(((((a + d) > (b + c)) AND (b < d)) OR (memo ~~ '%xyz%'::text)))'>
   KVecs-Buffer: nbytes: 133120, ndims: 2, items=[kvec0=<0x0000-13ff, type='int4', expr='id'>, kvec1=<0x1400-83ff, type='numeric', expr='a'>, kvec2=<0x8400-f3ff, type='numeric', expr='b'>, kvec3=<0xf400-163ff, type='numeric', expr='c'>, kvec4=<0x16400-1d3ff, type='numeric', expr='d'>, kvec5=<0x1d400-207ff, type='text', expr='memo'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='numeric' resno=2(a)>, <slot=3, type='numeric' resno=3(b)>, <slot=5, type='numeric' resno=4(c)>, <slot=6, type='numeric' resno=5(d)>, <slot=7, type='text' resno=6(memo)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-13ff, type='int4', expr='id'>, <slot=2, offset=0x1400-83ff, type='numeric', expr='a'>, <slot=3, offset=0x8400-f3ff, type='numeric', expr='b'>, <slot=5, offset=0xf400-163ff, type='numeric', expr='c'>, <slot=6, offset=0x16400-1d3ff, type='numeric', expr='d'>, <slot=7, offset=0x1d400-207ff, type='text', expr='memo'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,8> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-1400, expr='id'}}, {SaveExpr: <slot=1, type='bool'> arg={Func(bool)::numeric_le args=[{Var(numeric): kvec=0x1400-8400, expr='a'}, {Var(numeric): kvec=0x8400-f400, expr='b'}]}}, {SaveExpr: <slot=4, type='bool'> arg={Bool::AND args=[{Bool::OR args=[{Func(bool)::numeric_gt args=[{Func(numeric)::numeric_add args=[{Var(numeric): kvec=0x1400-8400, expr='a'}, {Var(numeric): kvec=0x8400-f400, expr='b'}]}, {Func(numeric)::numeric_add args=[{Var(numeric): kvec=0xf400-16400, expr='c'}, {Var(numeric): kvec=0x16400-1d400, expr='d'}]}]}, {Func(bool)::numeric_lt args=[{Func(numeric)::numeric_sub args=[{Var(numeric): kvec=0x1400-8400, expr='a'}, {Var(numeric): kvec=0x8400-f400, expr='b'}]}, {Func(numeric)::numeric_sub args=[{Var(numeric): kvec=0xf400-16400, expr='c'}, {Var(numeric): kvec=0x16400-1d400, expr='d'}]}]}]}, {Func(bool)::textlike args=[{Var(text): kvec=0x1d400-20800, expr='memo'}, {Const(text): value='%abc%'}]}]}}, {SaveExpr: <slot=8, type='bool'> arg={Bool::OR args=[{Bool::AND args=[{Func(bool)::numeric_gt args=[{Func(numeric)::numeric_add args=[{Var(numeric): kvec=0x1400-8400, expr='a'}, {Var(numeric): kvec=0x16400-1d400, expr='d'}]}, {Func(numeric)::numeric_add args=[{Var(numeric): kvec=0x8400-f400, expr='b'}, {Var(numeric): kvec=0xf400-16400, expr='c'}]}]}, {Func(bool)::numeric_lt args=[{Var(numeric): kvec=0x8400-f400, expr='b'}, {Var(numeric): kvec=0x16400-1d400, expr='d'}]}]}, {Func(bool)::textlike args=[{Var(text): kvec=0x1d400-20800, expr='memo'}, {Const(text): value='%xyz%'}]}]}}]}
   Fallback-desc: [<dest='0', expr='id', depth=0:1>, <dest='4', expr='a', depth=0:1>, <dest='5', expr='b', depth=0:1>, <dest='6', expr='c', depth=0:1>, <dest='7', expr='d', depth=0:1>, <dest='8', expr='memo', depth=0:1>]
   CUDA Stack Size: 4160
(12 rows)

SELECT id, not a > b v1,
           (a + b > c + d or a - b < c - d) and memo like '%abc%' v2,
           (a + d > b + c and b < d) or memo like '%xyz%' v3
  INTO test10g
  FROM regtest_data
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, not a > b v1,
           (a + b > c + d or a - b < c - d) and memo like '%abc%' v2,
           (a + d > b + c and b < d) or memo like '%xyz%' v3
  INTO test10p
  FROM regtest_data
 WHERE id > 0;
(SELECT * FROM test10g EXCEPT SELECT * FROM test10p) ORDER BY id;
 id | v1 | v2 | v3 
----+----+----+----
(0 rows)

(SELECT * FROM test10p EXCEPT SELECT * FROM test10g) ORDER BY id;
 id | v1 | v2 | v3 
----+----+----+----
(0 rows)

-- test for BooleanTest / NullTest
SET pg_strom.enabled = on;
VACUUM ANALYZE;
EXPLAIN (verbose, costs off)
SELECT id, a > b IS TRUE v1,
           c > d IS FALSE v2,
           a > c IS NOT TRUE v3,
           b > d IS NOT FALSE v4,
           a > d IS UNKNOWN v5,
           b > c IS UNKNOWN v6,
           b IS NULL v7,
           c IS NOT NULL v8
  INTO test20g
  FROM regtest_data
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dexpr_misc_temp.regtest_data
   Output: id, (((a > b) IS TRUE)), (((c > d) IS FALSE)), (((a > c) IS NOT TRUE)), (((b > d) IS NOT FALSE)), (((a > d) IS UNKNOWN)), (((b > c) IS UNKNOWN)), ((b IS NULL)), ((c IS NOT NULL))
   GPU Projection: id, ((a > b) IS TRUE), ((c > d) IS FALSE), ((a > c) IS NOT TRUE), ((b > d) IS NOT FALSE), ((a > d) IS UNKNOWN), ((b > c) IS UNKNOWN), (b IS NULL), (c IS NOT NULL)
   GPU Scan Quals: (id > 0) [rows: 6000 -> 5999]
   KVars-Slot: <slot=0, type='int4', expr='id', kv_off=0x0000>, <slot=1, type='bool', expr='(((a > b) IS TRUE))'>, <slot=2, type='numeric', expr='a', kv_off=0x1400>, <slot=3, type='numeric', expr='b', kv_off=0x8400>, <slot=4, type='bool', expr='(((c > d) IS FALSE))'>, <slot=5, type='numeric', expr='c', kv_off=0xf400>, <slot=6, type='numeric', expr='d', kv_off=0x16400>, <slot=7, type='bool', expr='(((a > c) IS NOT TRUE))'>, <slot=8, type='bool', expr='(((b > d) IS NOT FALSE))'>, <slot=9, type='bool', expr='(((a > d) IS UNKNOWN))'>, <slot=10, type='bool', expr='(((b > c) IS UNKNOWN))'>, <slot=11, type='bool', expr='((b IS NULL))'>, <slot=12, type='bool', expr='((c IS NOT NULL))'>
   KVecs-Buffer: nbytes: 119808, ndims: 2, items=[kvec0=<0x0000-13ff, type='int4', expr='id'>, kvec1=<0x1400-83ff, type='numeric', expr='a'>, kvec2=<0x8400-f3ff, type='numeric', expr='b'>, kvec3=<0xf400-163ff, type='numeric', expr='c'>, kvec4=<0x16400-1d3ff, type='numeric', expr='d'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='numeric' resno=2(a)>, <slot=3, type='numeric' resno=3(b)>, <slot=5, type='numeric' resno=4(c)>, <slot=6, type='numeric' resno=5(d)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-13ff, type='int4', expr='id'>, <slot=2, offset=0x1400-83ff, type='numeric', expr='a'>, <slot=3, offset=0x8400-f3ff, type='numeric', expr='b'>, <slot=5, offset=0xf400-163ff, type='numeric', expr='c'>, <slot=6, offset=0x16400-1d3ff, type='numeric', expr='d'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,7,8,9,10,11,12> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-1400, expr='id'}}, {SaveExpr: <slot=1, type='bool'> arg={BoolTest::IsTrue arg={Func(bool)::numeric_gt args=[{Var(numeric): kvec=0x1400-8400, expr='a'}, {Var(numeric): kvec=0x8400-f400, expr='b'}]}}}, {SaveExpr: <slot=4, type='bool'> arg={BoolTest::IsFalse arg={Func(bool)::numeric_gt args=[{Var(numeric): kvec=0xf400-16400, expr='c'}, {Var(numeric): kvec=0x16400-1d400, expr='d'}]}}}, {SaveExpr: <slot=7, type='bool'> arg={BoolTest::IsNotTrue arg={Func(bool)::numeric_gt args=[{Var(numeric): kvec=0x1400-8400, expr='a'}, {Var(numeric): kvec=0xf400-16400, expr='c'}]}}}, {SaveExpr: <slot=8, type='bool'> arg={BoolTest::IsNotFalse arg={Func(bool)::numeric_gt args=[{Var(numeric): kvec=0x8400-f400, expr='b'}, {Var(numeric): kvec=0x16400-1d400, expr='d'}]}}}, {SaveExpr: <slot=9, type='bool'> arg={BoolTest::IsUnknown arg={Func(bool)::numeric_gt args=[{Var(numeric): kvec=0x1400-8400, expr='a'}, {Var(numeric): kvec=0x16400-1d400, expr='d'}]}}}, {SaveExpr: <slot=10, type='bool'> arg={BoolTest::IsUnknown arg={Func(bool)::numeric_gt args=[{Var(numeric): kvec=0x8400-f400, expr='b'}, {Var(numeric): kvec=0xf400-16400, expr='c'}]}}}, {SaveExpr: <slot=11, type='bool'> arg={IsNull arg={Var(numeric): kvec=0x8400-f400, expr='b'}}}, {SaveExpr: <slot=12, type='bool'> arg={IsNotNull arg={Var(numeric): kvec=0xf400-16400, expr='c'}}}]}
   Fallback-desc: [<dest='0', expr='id', depth=0:1>, <dest='9', expr='a', depth=0:1>, <dest='10', expr='b', depth=0:1>, <dest='11', expr='c', depth=0:1>, <dest='12', expr='d', depth=0:1>]
   CUDA Stack Size: 4240
(12 rows)

SELECT id, a > b IS TRUE v1,
           c > d IS FALSE v2,
           a > c IS NOT TRUE v3,
           b > d IS NOT FALSE v4,
           a > d IS UNKNOWN v5,
           b > c IS UNKNOWN v6,
           b IS NULL v7,
           c IS NOT NULL v8
  INTO test20g
  FROM regtest_data
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, a > b IS TRUE v1,
           c > d IS FALSE v2,
           a > c IS NOT TRUE v3,
           b > d IS NOT FALSE v4,
           a > d IS UNKNOWN v5,
           b > c IS UNKNOWN v6,
           b IS NULL v7,
           c IS NOT NULL v8
  INTO test20p
  FROM regtest_data
 WHERE id > 0;
(SELECT * FROM test20g EXCEPT SELECT * FROM test20p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 
----+----+----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test20p EXCEPT SELECT * FROM test20g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 
----+----+----+----+----+----+----+----+----
(0 rows)

-- test for CASE ... WHEN
SET pg_strom.enabled = on;
VACUUM ANALYZE;
EXPLAIN (verbose, costs off)
SELECT id, CASE id % 4
           WHEN 0 THEN 'hoge'
           WHEN 1 THEN substring(memo, (id % 32) / 4, 6)
           WHEN 2 THEN substring(memo, 1, 6)
           END v1,
           CASE id % 5
           WHEN 0 THEN 'monu'
           WHEN 2 THEN substring(memo, 4, 6)
           WHEN 4 THEN substring(memo, (id % 32) / 4, 6)
           ELSE        'piyo'
           END v2
  INTO test30g
  FROM regtest_data
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dexpr_misc_temp.regtest_data
   Output: id, (CASE (id % 4) WHEN 0 THEN 'hoge'::text WHEN 1 THEN "substring"(memo, ((id % 32) / 4), 6) WHEN 2 THEN "substring"(memo, 1, 6) ELSE NULL::text END), (CASE (id % 5) WHEN 0 THEN 'monu'::text WHEN 2 THEN "substring"(memo, 4, 6) WHEN 4 THEN "substring"(memo, ((id % 32) / 4), 6) ELSE 'piyo'::text END)
   GPU Projection: id, CASE (id % 4) WHEN 0 THEN 'hoge'::text WHEN 1 THEN "substring"(memo, ((id % 32) / 4), 6) WHEN 2 THEN "substring"(memo, 1, 6) ELSE NULL::text END, CASE (id % 5) WHEN 0 THEN 'monu'::text WHEN 2 THEN "substring"(memo, 4, 6) WHEN 4 THEN "substring"(memo, ((id % 32) / 4), 6) ELSE 'piyo'::text END
   GPU Scan Quals: (id > 0) [rows: 6000 -> 5999]
   KVars-Slot: <slot=0, type='int4', expr='id', kv_off=0x0000>, <slot=1, type='text', expr='(CASE (id % 4) WHEN 0 THEN 'hoge'::text WHEN 1 THEN "substring"(memo, ((id % 32) / 4), 6) WHEN 2 THEN "substring"(memo, 1, 6) ELSE NULL::text END)'>, <slot=2, type='int4', expr='(id % 4)'>, <slot=3, type='text', expr='memo', kv_off=0x1400>, <slot=4, type='text', expr='(CASE (id % 5) WHEN 0 THEN 'monu'::text WHEN 2 THEN "substring"(memo, 4, 6) WHEN 4 THEN "substring"(memo, ((id % 32) / 4), 6) ELSE 'piyo'::text END)'>, <slot=5, type='int4', expr='(id % 5)'>
   KVecs-Buffer: nbytes: 18432, ndims: 2, items=[kvec0=<0x0000-13ff, type='int4', expr='id'>, kvec1=<0x1400-47ff, type='text', expr='memo'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=3, type='text' resno=6(memo)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-13ff, type='int4', expr='id'>, <slot=3, offset=0x1400-47ff, type='text', expr='memo'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-1400, expr='id'}}, {SaveExpr: <slot=1, type='text'> arg={Case: <key={SaveExpr: <slot=2, type='int4'> arg={Func(int4)::int4mod args=[{Var(int4): kvec=0x0000-1400, expr='id'}, {Const(int4): value='4'}]}}> <when={Func(bool)::int4eq args=[{Var(int4): slot=2, expr='(id % 4)'}, {Const(int4): value='0'}]}, then={Const(text): value='hoge'}>, <when={Func(bool)::int4eq args=[{Var(int4): slot=2, expr='(id % 4)'}, {Const(int4): value='1'}]}, then={Func(text)::substring args=[{Var(text): kvec=0x1400-4800, expr='memo'}, {Func(int4)::int4div args=[{Func(int4)::int4mod args=[{Var(int4): kvec=0x0000-1400, expr='id'}, {Const(int4): value='32'}]}, {Const(int4): value='4'}]}, {Const(int4): value='6'}]}>, <when={Func(bool)::int4eq args=[{Var(int4): slot=2, expr='(id % 4)'}, {Const(int4): value='2'}]}, then={Func(text)::substring args=[{Var(text): kvec=0x1400-4800, expr='memo'}, {Const(int4): value='1'}, {Const(int4): value='6'}]}> <else={Const(text): value=NULL}>}}, {SaveExpr: <slot=4, type='text'> arg={Case: <key={SaveExpr: <slot=5, type='int4'> arg={Func(int4)::int4mod args=[{Var(int4): kvec=0x0000-1400, expr='id'}, {Const(int4): value='5'}]}}> <when={Func(bool)::int4eq args=[{Var(int4): slot=5, expr='(id % 5)'}, {Const(int4): value='0'}]}, then={Const(text): value='monu'}>, <when={Func(bool)::int4eq args=[{Var(int4): slot=5, expr='(id % 5)'}, {Const(int4): value='2'}]}, then={Func(text)::substring args=[{Var(text): kvec=0x1400-4800, expr='memo'}, {Const(int4): value='4'}, {Const(int4): value='6'}]}>, <when={Func(bool)::int4eq args=[{Var(int4): slot=5, expr='(id % 5)'}, {Const(int4): value='4'}]}, then={Func(text)::substring args=[{Var(text): kvec=0x1400-4800, expr='memo'}, {Func(int4)::int4div args=[{Func(int4)::int4mod args=[{Var(int4): kvec=0x0000-1400, expr='id'}, {Const(int4): value='32'}]}, {Const(int4): value='4'}]}, {Const(int4): value='6'}]}> <else={Const(text): value='piyo'}>}}]}
   Fallback-desc: [<dest='0', expr='id', depth=0:1>, <dest='3', expr='memo', depth=0:1>]
   CUDA Stack Size: 4048
(12 rows)

SELECT id, CASE id % 4
           WHEN 0 THEN 'hoge'
           WHEN 1 THEN substring(memo,(id % 32) / 4, 6)
           WHEN 2 THEN substring(memo, 1, 6)
           END v1,
           CASE id % 5
           WHEN 0 THEN 'monu'
           WHEN 2 THEN substring(memo, 4, 6)
           WHEN 4 THEN substring(memo, (id % 32) / 4, 6)
           ELSE        'piyo'
           END v2
  INTO test30g
  FROM regtest_data
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, CASE id % 4
           WHEN 0 THEN 'hoge'
           WHEN 1 THEN substring(memo, (id % 32) / 4, 6)
           WHEN 2 THEN substring(memo, 1, 6)
           END v1,
           CASE id % 5
           WHEN 0 THEN 'monu'
           WHEN 2 THEN substring(memo, 4, 6)
           WHEN 4 THEN substring(memo,(id % 32) / 4, 6)
           ELSE        'piyo'
           END v2
  INTO test30p
  FROM regtest_data
 WHERE id > 0;
(SELECT * FROM test30g EXCEPT SELECT * FROM test30p) ORDER BY id;
 id | v1 | v2 
----+----+----
(0 rows)

(SELECT * FROM test30p EXCEPT SELECT * FROM test30g) ORDER BY id;
 id | v1 | v2 
----+----+----
(0 rows)

SET pg_strom.enabled = on;
VACUUM ANALYZE;
EXPLAIN (verbose, costs off)
SELECT id, CASE WHEN memo like '%aa%' THEN 'aaa'
                WHEN memo like '%bb%' THEN 'bbb'
                WHEN memo like '%cc%' THEN 'ccc'
                WHEN memo like '%dd%' THEN 'ddd'
                WHEN memo like '%ee%' THEN 'eee'
            END v1,
           CASE WHEN id % 100 != 0
                THEN a::real / (id % 100)::real
                ELSE -1.0
            END v2,
           CASE id % 71
           WHEN 0 THEN -1.0
           ELSE b::real / (id % 71)::real
            END v3
  INTO test31g
  FROM regtest_data
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dexpr_misc_temp.regtest_data
   Output: id, (CASE WHEN (memo ~~ '%aa%'::text) THEN 'aaa'::text WHEN (memo ~~ '%bb%'::text) THEN 'bbb'::text WHEN (memo ~~ '%cc%'::text) THEN 'ccc'::text WHEN (memo ~~ '%dd%'::text) THEN 'ddd'::text WHEN (memo ~~ '%ee%'::text) THEN 'eee'::text ELSE NULL::text END), (CASE WHEN ((id % 100) <> 0) THEN ((a)::real / ((id % 100))::real) ELSE '-1'::real END), (CASE (id % 71) WHEN 0 THEN '-1'::real ELSE ((b)::real / ((id % 71))::real) END)
   GPU Projection: id, CASE WHEN (memo ~~ '%aa%'::text) THEN 'aaa'::text WHEN (memo ~~ '%bb%'::text) THEN 'bbb'::text WHEN (memo ~~ '%cc%'::text) THEN 'ccc'::text WHEN (memo ~~ '%dd%'::text) THEN 'ddd'::text WHEN (memo ~~ '%ee%'::text) THEN 'eee'::text ELSE NULL::text END, CASE WHEN ((id % 100) <> 0) THEN ((a)::real / ((id % 100))::real) ELSE '-1'::real END, CASE (id % 71) WHEN 0 THEN '-1'::real ELSE ((b)::real / ((id % 71))::real) END
   GPU Scan Quals: (id > 0) [rows: 6000 -> 5999]
   KVars-Slot: <slot=0, type='int4', expr='id', kv_off=0x0000>, <slot=1, type='text', expr='(CASE WHEN (memo ~~ '%aa%'::text) THEN 'aaa'::text WHEN (memo ~~ '%bb%'::text) THEN 'bbb'::text WHEN (memo ~~ '%cc%'::text) THEN 'ccc'::text WHEN (memo ~~ '%dd%'::text) THEN 'ddd'::text WHEN (memo ~~ '%ee%'::text) THEN 'eee'::text ELSE NULL::text END)'>, <slot=2, type='text', expr='memo', kv_off=0x1400>, <slot=3, type='float4', expr='(CASE WHEN ((id % 100) <> 0) THEN ((a)::real / ((id % 100))::real) ELSE '-1'::real END)'>, <slot=4, type='numeric', expr='a', kv_off=0x4800>, <slot=5, type='float4', expr='(CASE (id % 71) WHEN 0 THEN '-1'::real ELSE ((b)::real / ((id % 71))::real) END)'>, <slot=6, type='int4', expr='(id % 71)'>, <slot=7, type='numeric', expr='b', kv_off=0xb800>
   KVecs-Buffer: nbytes: 75776, ndims: 2, items=[kvec0=<0x0000-13ff, type='int4', expr='id'>, kvec1=<0x1400-47ff, type='text', expr='memo'>, kvec2=<0x4800-b7ff, type='numeric', expr='a'>, kvec3=<0xb800-127ff, type='numeric', expr='b'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=4, type='numeric' resno=2(a)>, <slot=7, type='numeric' resno=3(b)>, <slot=2, type='text' resno=6(memo)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-13ff, type='int4', expr='id'>, <slot=2, offset=0x1400-47ff, type='text', expr='memo'>, <slot=4, offset=0x4800-b7ff, type='numeric', expr='a'>, <slot=7, offset=0xb800-127ff, type='numeric', expr='b'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,3,5> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-1400, expr='id'}}, {SaveExpr: <slot=1, type='text'> arg={Case: <when={Func(bool)::textlike args=[{Var(text): kvec=0x1400-4800, expr='memo'}, {Const(text): value='%aa%'}]}, then={Const(text): value='aaa'}>, <when={Func(bool)::textlike args=[{Var(text): kvec=0x1400-4800, expr='memo'}, {Const(text): value='%bb%'}]}, then={Const(text): value='bbb'}>, <when={Func(bool)::textlike args=[{Var(text): kvec=0x1400-4800, expr='memo'}, {Const(text): value='%cc%'}]}, then={Const(text): value='ccc'}>, <when={Func(bool)::textlike args=[{Var(text): kvec=0x1400-4800, expr='memo'}, {Const(text): value='%dd%'}]}, then={Const(text): value='ddd'}>, <when={Func(bool)::textlike args=[{Var(text): kvec=0x1400-4800, expr='memo'}, {Const(text): value='%ee%'}]}, then={Const(text): value='eee'}> <else={Const(text): value=NULL}>}}, {SaveExpr: <slot=3, type='float4'> arg={Case: <when={Func(bool)::int4ne args=[{Func(int4)::int4mod args=[{Var(int4): kvec=0x0000-1400, expr='id'}, {Const(int4): value='100'}]}, {Const(int4): value='0'}]}, then={Func(float4)::float4div args=[{Func(float4)::float4 arg={Var(numeric): kvec=0x4800-b800, expr='a'}}, {Func(float4)::float4 arg={Func(int4)::int4mod args=[{Var(int4): kvec=0x0000-1400, expr='id'}, {Const(int4): value='100'}]}}]}> <else={Const(float4): value='-1'}>}}, {SaveExpr: <slot=5, type='float4'> arg={Case: <key={SaveExpr: <slot=6, type='int4'> arg={Func(int4)::int4mod args=[{Var(int4): kvec=0x0000-1400, expr='id'}, {Const(int4): value='71'}]}}> <when={Func(bool)::int4eq args=[{Var(int4): slot=6, expr='(id % 71)'}, {Const(int4): value='0'}]}, then={Const(float4): value='-1'}> <else={Func(float4)::float4div args=[{Func(float4)::float4 arg={Var(numeric): kvec=0xb800-12800, expr='b'}}, {Func(float4)::float4 arg={Func(int4)::int4mod args=[{Var(int4): kvec=0x0000-1400, expr='id'}, {Const(int4): value='71'}]}}]}>}}]}
   Fallback-desc: [<dest='0', expr='id', depth=0:1>, <dest='4', expr='a', depth=0:1>, <dest='5', expr='b', depth=0:1>, <dest='6', expr='memo', depth=0:1>]
   CUDA Stack Size: 4112
(12 rows)

SELECT id, CASE WHEN memo like '%aa%' THEN 'aaa'
                WHEN memo like '%bb%' THEN 'bbb'
                WHEN memo like '%cc%' THEN 'ccc'
                WHEN memo like '%dd%' THEN 'ddd'
                WHEN memo like '%ee%' THEN 'eee'
            END v1,
           CASE WHEN id % 100 != 0
                THEN a::real / (id % 100)::real
                ELSE -1.0
            END v2,
           CASE id % 71
           WHEN 0 THEN -1.0
           ELSE b::real / (id % 71)::real
            END v3
  INTO test31g
  FROM regtest_data
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, CASE WHEN memo like '%aa%' THEN 'aaa'
                WHEN memo like '%bb%' THEN 'bbb'
                WHEN memo like '%cc%' THEN 'ccc'
                WHEN memo like '%dd%' THEN 'ddd'
                WHEN memo like '%ee%' THEN 'eee'
            END v1,
           CASE WHEN id % 100 != 0
                THEN a::real / (id % 100)::real
                ELSE -1.0
            END v2,
           CASE id % 71
           WHEN 0 THEN -1.0
           ELSE b::real / (id % 71)::real
            END v3
  INTO test31p
  FROM regtest_data
 WHERE id > 0;
(SELECT * FROM test31g EXCEPT SELECT * FROM test31p) ORDER BY id;
 id | v1 | v2 | v3 
----+----+----+----
(0 rows)

(SELECT * FROM test31p EXCEPT SELECT * FROM test31g) ORDER BY id;
 id | v1 | v2 | v3 
----+----+----+----
(0 rows)

-- cleanup
SET client_min_messages = error;
DROP SCHEMA regtest_dexpr_misc_temp CASCADE;
