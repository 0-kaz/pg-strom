---
--- Micro test cases for text / varchar operators / functions
---
SET pg_strom.regression_test_mode = on;
SET client_min_messages = error;
DROP SCHEMA IF EXISTS regtest_dtype_text_temp CASCADE;
CREATE SCHEMA regtest_dtype_text_temp;
RESET client_min_messages;
---
--- check database encoding (must be UTF-8)
---
SELECT getdatabaseencoding();
 getdatabaseencoding 
---------------------
 UTF8
(1 row)

--- test database creation
SET search_path = regtest_dtype_text_temp,public;
CREATE TABLE rt_text (
  id    int,
  bc1   char(80)    COLLATE "C",
  bc2   char(80)    COLLATE "C",
  vc1   varchar(80) COLLATE "C",
  vc2   varchar(80) COLLATE "C",
  tc1   text        COLLATE "C",
  tc2   text        COLLATE "C"
);
SELECT pgstrom.random_setseed(20190616);
 random_setseed 
----------------
 
(1 row)

INSERT INTO rt_text (
  SELECT x, pgstrom.random_text_len(1,  80),
            pgstrom.random_text_len(1,  80),
            pgstrom.random_text_len(1,  80),
            pgstrom.random_text_len(1,  80),
            pgstrom.random_text_len(1, 160),
            pgstrom.random_text_len(1, 160)
    FROM generate_series(1,3000) x
);
UPDATE rt_text SET tc1 = vc1 || '-' || tc1 || '-' || vc2
 WHERE id % 100 = 57;
VACUUM ANALYZE;
-- force to use GpuScan, instead of SeqScan
SET enable_seqscan = off;
-- type cast (relabel) operator
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, bc1::text, bc2::varchar,
           vc1::char, vc2::text,
           tc1::char, tc2::varchar
  INTO test01g
  FROM rt_text
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_text_temp.rt_text
   Output: id, (bc1)::text, (bc2)::character varying, (vc1)::character(1), ((vc2)::text), (tc1)::character(1), ((tc2)::character varying)
   GPU Projection: id, bc1, bc2, vc1, (vc2)::text, tc1, (tc2)::character varying
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='bpchar', expr='bc1'>, <slot=2, type='bpchar', expr='bc2'>, <slot=3, type='text', expr='vc1'>, <slot=4, type='text', expr='((vc2)::text)'>, <slot=5, type='text', expr='vc2'>, <slot=6, type='text', expr='tc1'>, <slot=7, type='text', expr='((tc2)::character varying)'>, <slot=8, type='text', expr='tc2'>
   KVecs-Buffer: nbytes: 169984, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-8fff, type='bpchar', expr='bc1'>, kvec2=<0x9000-f7ff, type='bpchar', expr='bc2'>, kvec3=<0xf800-15fff, type='text', expr='vc1'>, kvec4=<0x16000-1c7ff, type='text', expr='vc2'>, kvec5=<0x1c800-22fff, type='text', expr='tc1'>, kvec6=<0x23000-297ff, type='text', expr='tc2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=1, type='bpchar' resno=2(bc1)>, <slot=2, type='bpchar' resno=3(bc2)>, <slot=3, type='text' resno=4(vc1)>, <slot=5, type='text' resno=5(vc2)>, <slot=6, type='text' resno=6(tc1)>, <slot=8, type='text' resno=7(tc2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=1, offset=0x2800-8fff, type='bpchar', expr='bc1'>, <slot=2, offset=0x9000-f7ff, type='bpchar', expr='bc2'>, <slot=3, offset=0xf800-15fff, type='text', expr='vc1'>, <slot=5, offset=0x16000-1c7ff, type='text', expr='vc2'>, <slot=6, offset=0x1c800-22fff, type='text', expr='tc1'>, <slot=8, offset=0x23000-297ff, type='text', expr='tc2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,2,3,4,6,7> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='bpchar'> arg={Var(bpchar): kvec=0x2800-9000, expr='bc1'}}, {SaveExpr: <slot=2, type='bpchar'> arg={Var(bpchar): kvec=0x9000-f800, expr='bc2'}}, {SaveExpr: <slot=3, type='text'> arg={Var(text): kvec=0xf800-16000, expr='vc1'}}, {SaveExpr: <slot=4, type='text'> arg={Var(text): kvec=0x16000-1c800, expr='vc2'}}, {SaveExpr: <slot=6, type='text'> arg={Var(text): kvec=0x1c800-23000, expr='tc1'}}, {SaveExpr: <slot=7, type='text'> arg={Var(text): kvec=0x23000-29800, expr='tc2'}}]}
   CUDA Stack Size: 4208
(11 rows)

SELECT id, bc1::text, bc2::varchar,
           vc1::char, vc2::text,
           tc1::char, tc2::varchar
  INTO test01g
  FROM rt_text
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, bc1::text, bc2::varchar,
           vc1::char, vc2::text,
           tc1::char, tc2::varchar
  INTO test01p
  FROM rt_text
 WHERE id > 0;
(SELECT * FROM test01g EXCEPT SELECT * FROM test01p) ORDER BY id;
 id | bc1 | bc2 | vc1 | vc2 | tc1 | tc2 
----+-----+-----+-----+-----+-----+-----
(0 rows)

(SELECT * FROM test01p EXCEPT SELECT * FROM test01g) ORDER BY id;
 id | bc1 | bc2 | vc1 | vc2 | tc1 | tc2 
----+-----+-----+-----+-----+-----+-----
(0 rows)

-- comparison operators
-- collation != C cannot run comparison
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, bc1 = bc2 eq, bc1 <> bc2 ne,
           bc1 > bc2 lt, bc1 >= bc2 le,
           bc1 < bc2 gt, bc1 <= bc2 ge
  INTO test10g
  FROM rt_text
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_text_temp.rt_text
   Output: id, ((bc1 = bc2)), ((bc1 <> bc2)), ((bc1 > bc2)), ((bc1 >= bc2)), ((bc1 < bc2)), ((bc1 <= bc2))
   GPU Projection: id, (bc1 = bc2), (bc1 <> bc2), (bc1 > bc2), (bc1 >= bc2), (bc1 < bc2), (bc1 <= bc2)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='bool', expr='((bc1 = bc2))'>, <slot=2, type='bpchar', expr='bc1'>, <slot=3, type='bpchar', expr='bc2'>, <slot=4, type='bool', expr='((bc1 <> bc2))'>, <slot=5, type='bool', expr='((bc1 > bc2))'>, <slot=6, type='bool', expr='((bc1 >= bc2))'>, <slot=7, type='bool', expr='((bc1 < bc2))'>, <slot=8, type='bool', expr='((bc1 <= bc2))'>
   KVecs-Buffer: nbytes: 63488, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-8fff, type='bpchar', expr='bc1'>, kvec2=<0x9000-f7ff, type='bpchar', expr='bc2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='bpchar' resno=2(bc1)>, <slot=3, type='bpchar' resno=3(bc2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-8fff, type='bpchar', expr='bc1'>, <slot=3, offset=0x9000-f7ff, type='bpchar', expr='bc2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,5,6,7,8> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='bool'> arg={Func(bool)::bpchareq args=[{Var(bpchar): kvec=0x2800-9000, expr='bc1'}, {Var(bpchar): kvec=0x9000-f800, expr='bc2'}]}}, {SaveExpr: <slot=4, type='bool'> arg={Func(bool)::bpcharne args=[{Var(bpchar): kvec=0x2800-9000, expr='bc1'}, {Var(bpchar): kvec=0x9000-f800, expr='bc2'}]}}, {SaveExpr: <slot=5, type='bool'> arg={Func(bool)::bpchargt args=[{Var(bpchar): kvec=0x2800-9000, expr='bc1'}, {Var(bpchar): kvec=0x9000-f800, expr='bc2'}]}}, {SaveExpr: <slot=6, type='bool'> arg={Func(bool)::bpcharge args=[{Var(bpchar): kvec=0x2800-9000, expr='bc1'}, {Var(bpchar): kvec=0x9000-f800, expr='bc2'}]}}, {SaveExpr: <slot=7, type='bool'> arg={Func(bool)::bpcharlt args=[{Var(bpchar): kvec=0x2800-9000, expr='bc1'}, {Var(bpchar): kvec=0x9000-f800, expr='bc2'}]}}, {SaveExpr: <slot=8, type='bool'> arg={Func(bool)::bpcharle args=[{Var(bpchar): kvec=0x2800-9000, expr='bc1'}, {Var(bpchar): kvec=0x9000-f800, expr='bc2'}]}}]}
   CUDA Stack Size: 4112
(11 rows)

SELECT id, bc1 = bc2 eq, bc1 <> bc2 ne,
           bc1 > bc2 lt, bc1 >= bc2 le,
           bc1 < bc2 gt, bc1 <= bc2 ge
  INTO test10g
  FROM rt_text
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, bc1 = bc2 eq, bc1 <> bc2 ne,
           bc1 > bc2 lt, bc1 >= bc2 le,
           bc1 < bc2 gt, bc1 <= bc2 ge
  INTO test10p
  FROM rt_text
 WHERE id > 0;
(SELECT * FROM test10g EXCEPT SELECT * FROM test10p) ORDER BY id;
 id | eq | ne | lt | le | gt | ge 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test10p EXCEPT SELECT * FROM test10g) ORDER BY id;
 id | eq | ne | lt | le | gt | ge 
----+----+----+----+----+----+----
(0 rows)

SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, tc1 = tc2 eq, tc1 <> tc2 ne,
           tc1 > tc2 lt, tc1 >= tc2 le,
           tc1 < tc2 gt, tc1 <= tc2 ge
  INTO test11g
  FROM rt_text
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_text_temp.rt_text
   Output: id, ((tc1 = tc2)), ((tc1 <> tc2)), ((tc1 > tc2)), ((tc1 >= tc2)), ((tc1 < tc2)), ((tc1 <= tc2))
   GPU Projection: id, (tc1 = tc2), (tc1 <> tc2), (tc1 > tc2), (tc1 >= tc2), (tc1 < tc2), (tc1 <= tc2)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='bool', expr='((tc1 = tc2))'>, <slot=2, type='text', expr='tc1'>, <slot=3, type='text', expr='tc2'>, <slot=4, type='bool', expr='((tc1 <> tc2))'>, <slot=5, type='bool', expr='((tc1 > tc2))'>, <slot=6, type='bool', expr='((tc1 >= tc2))'>, <slot=7, type='bool', expr='((tc1 < tc2))'>, <slot=8, type='bool', expr='((tc1 <= tc2))'>
   KVecs-Buffer: nbytes: 63488, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-8fff, type='text', expr='tc1'>, kvec2=<0x9000-f7ff, type='text', expr='tc2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='text' resno=6(tc1)>, <slot=3, type='text' resno=7(tc2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-8fff, type='text', expr='tc1'>, <slot=3, offset=0x9000-f7ff, type='text', expr='tc2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,5,6,7,8> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='bool'> arg={Func(bool)::texteq args=[{Var(text): kvec=0x2800-9000, expr='tc1'}, {Var(text): kvec=0x9000-f800, expr='tc2'}]}}, {SaveExpr: <slot=4, type='bool'> arg={Func(bool)::textne args=[{Var(text): kvec=0x2800-9000, expr='tc1'}, {Var(text): kvec=0x9000-f800, expr='tc2'}]}}, {SaveExpr: <slot=5, type='bool'> arg={Func(bool)::text_gt args=[{Var(text): kvec=0x2800-9000, expr='tc1'}, {Var(text): kvec=0x9000-f800, expr='tc2'}]}}, {SaveExpr: <slot=6, type='bool'> arg={Func(bool)::text_ge args=[{Var(text): kvec=0x2800-9000, expr='tc1'}, {Var(text): kvec=0x9000-f800, expr='tc2'}]}}, {SaveExpr: <slot=7, type='bool'> arg={Func(bool)::text_lt args=[{Var(text): kvec=0x2800-9000, expr='tc1'}, {Var(text): kvec=0x9000-f800, expr='tc2'}]}}, {SaveExpr: <slot=8, type='bool'> arg={Func(bool)::text_le args=[{Var(text): kvec=0x2800-9000, expr='tc1'}, {Var(text): kvec=0x9000-f800, expr='tc2'}]}}]}
   CUDA Stack Size: 4112
(11 rows)

SELECT id, tc1 = tc2 eq, tc1 <> tc2 ne,
           tc1 > tc2 lt, tc1 >= tc2 le,
           tc1 < tc2 gt, tc1 <= tc2 ge
  INTO test11g
  FROM rt_text
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, tc1 = tc2 eq, tc1 <> tc2 ne,
           tc1 > tc2 lt, tc1 >= tc2 le,
           tc1 < tc2 gt, tc1 <= tc2 ge
  INTO test11p
  FROM rt_text
 WHERE id > 0;
(SELECT * FROM test11g EXCEPT SELECT * FROM test11p) ORDER BY id;
 id | eq | ne | lt | le | gt | ge 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test11p EXCEPT SELECT * FROM test11g) ORDER BY id;
 id | eq | ne | lt | le | gt | ge 
----+----+----+----+----+----+----
(0 rows)

-- LIKE & ILIKE operators
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, bc1 LIKE '%ab%cd%' v1,
           bc2 LIKE '%bc_de%' v2,
           tc1 LIKE '%ef_gh%' v5,
           tc2 LIKE '%fg_hi%' v6
  INTO test20g
  FROM rt_text
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_text_temp.rt_text
   Output: id, ((bc1 ~~ '%ab%cd%'::text)), ((bc2 ~~ '%bc_de%'::text)), ((tc1 ~~ '%ef_gh%'::text)), ((tc2 ~~ '%fg_hi%'::text))
   GPU Projection: id, (bc1 ~~ '%ab%cd%'::text), (bc2 ~~ '%bc_de%'::text), (tc1 ~~ '%ef_gh%'::text), (tc2 ~~ '%fg_hi%'::text)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='bool', expr='((bc1 ~~ '%ab%cd%'::text))'>, <slot=2, type='bpchar', expr='bc1'>, <slot=3, type='bool', expr='((bc2 ~~ '%bc_de%'::text))'>, <slot=4, type='bpchar', expr='bc2'>, <slot=5, type='bool', expr='((tc1 ~~ '%ef_gh%'::text))'>, <slot=6, type='text', expr='tc1'>, <slot=7, type='bool', expr='((tc2 ~~ '%fg_hi%'::text))'>, <slot=8, type='text', expr='tc2'>
   KVecs-Buffer: nbytes: 116736, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-8fff, type='bpchar', expr='bc1'>, kvec2=<0x9000-f7ff, type='bpchar', expr='bc2'>, kvec3=<0xf800-15fff, type='text', expr='tc1'>, kvec4=<0x16000-1c7ff, type='text', expr='tc2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='bpchar' resno=2(bc1)>, <slot=4, type='bpchar' resno=3(bc2)>, <slot=6, type='text' resno=6(tc1)>, <slot=8, type='text' resno=7(tc2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-8fff, type='bpchar', expr='bc1'>, <slot=4, offset=0x9000-f7ff, type='bpchar', expr='bc2'>, <slot=6, offset=0xf800-15fff, type='text', expr='tc1'>, <slot=8, offset=0x16000-1c7ff, type='text', expr='tc2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,3,5,7> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='bool'> arg={Func(bool)::bpcharlike args=[{Var(bpchar): kvec=0x2800-9000, expr='bc1'}, {Const(text): value='%ab%cd%'}]}}, {SaveExpr: <slot=3, type='bool'> arg={Func(bool)::bpcharlike args=[{Var(bpchar): kvec=0x9000-f800, expr='bc2'}, {Const(text): value='%bc_de%'}]}}, {SaveExpr: <slot=5, type='bool'> arg={Func(bool)::textlike args=[{Var(text): kvec=0xf800-16000, expr='tc1'}, {Const(text): value='%ef_gh%'}]}}, {SaveExpr: <slot=7, type='bool'> arg={Func(bool)::textlike args=[{Var(text): kvec=0x16000-1c800, expr='tc2'}, {Const(text): value='%fg_hi%'}]}}]}
   CUDA Stack Size: 4144
(11 rows)

SELECT id, bc1 LIKE '%ab%cd%' v1,
           bc2 LIKE '%bc_de%' v2,
           tc1 LIKE '%ef_gh%' v5,
           tc2 LIKE '%fg_hi%' v6
  INTO test20g
  FROM rt_text
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, bc1 LIKE '%ab%cd%' v1,
           bc2 LIKE '%bc_de%' v2,
           tc1 LIKE '%ef_gh%' v5,
           tc2 LIKE '%fg_hi%' v6
  INTO test20p
  FROM rt_text
 WHERE id > 0;
(SELECT * FROM test20g EXCEPT SELECT * FROM test20p) ORDER BY id;
 id | v1 | v2 | v5 | v6 
----+----+----+----+----
(0 rows)

(SELECT * FROM test20p EXCEPT SELECT * FROM test20g) ORDER BY id;
 id | v1 | v2 | v5 | v6 
----+----+----+----+----
(0 rows)

-- ILIKE is valid only non-multibyte encoding
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, bc1 ILIKE '%ab%cd%' v1,
           bc2 ILIKE '%bc_de%' v2,
           tc1 ILIKE '%ef_gh%' v5,
           tc2 ILIKE '%fg_hi%' v6
  INTO test21g
  FROM rt_text
 WHERE id > 0;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_text_temp.rt_text
   Output: id, ((bc1 ~~* '%ab%cd%'::text)), ((bc2 ~~* '%bc_de%'::text)), ((tc1 ~~* '%ef_gh%'::text)), ((tc2 ~~* '%fg_hi%'::text))
   GPU Projection: id, (bc1 ~~* '%ab%cd%'::text), (bc2 ~~* '%bc_de%'::text), (tc1 ~~* '%ef_gh%'::text), (tc2 ~~* '%fg_hi%'::text)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='bool', expr='((bc1 ~~* '%ab%cd%'::text))'>, <slot=2, type='bpchar', expr='bc1'>, <slot=3, type='bool', expr='((bc2 ~~* '%bc_de%'::text))'>, <slot=4, type='bpchar', expr='bc2'>, <slot=5, type='bool', expr='((tc1 ~~* '%ef_gh%'::text))'>, <slot=6, type='text', expr='tc1'>, <slot=7, type='bool', expr='((tc2 ~~* '%fg_hi%'::text))'>, <slot=8, type='text', expr='tc2'>
   KVecs-Buffer: nbytes: 116736, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-8fff, type='bpchar', expr='bc1'>, kvec2=<0x9000-f7ff, type='bpchar', expr='bc2'>, kvec3=<0xf800-15fff, type='text', expr='tc1'>, kvec4=<0x16000-1c7ff, type='text', expr='tc2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='bpchar' resno=2(bc1)>, <slot=4, type='bpchar' resno=3(bc2)>, <slot=6, type='text' resno=6(tc1)>, <slot=8, type='text' resno=7(tc2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-8fff, type='bpchar', expr='bc1'>, <slot=4, offset=0x9000-f7ff, type='bpchar', expr='bc2'>, <slot=6, offset=0xf800-15fff, type='text', expr='tc1'>, <slot=8, offset=0x16000-1c7ff, type='text', expr='tc2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,3,5,7> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='bool'> arg={Func(bool)::bpchariclike args=[{Var(bpchar): kvec=0x2800-9000, expr='bc1'}, {Const(text): value='%ab%cd%'}]}}, {SaveExpr: <slot=3, type='bool'> arg={Func(bool)::bpchariclike args=[{Var(bpchar): kvec=0x9000-f800, expr='bc2'}, {Const(text): value='%bc_de%'}]}}, {SaveExpr: <slot=5, type='bool'> arg={Func(bool)::texticlike args=[{Var(text): kvec=0xf800-16000, expr='tc1'}, {Const(text): value='%ef_gh%'}]}}, {SaveExpr: <slot=7, type='bool'> arg={Func(bool)::texticlike args=[{Var(text): kvec=0x16000-1c800, expr='tc2'}, {Const(text): value='%fg_hi%'}]}}]}
   CUDA Stack Size: 4144
(11 rows)

SELECT id, bc1 ILIKE '%ab%cd%' v1,
           bc2 ILIKE '%bc_de%' v2,
           tc1 ILIKE '%ef_gh%' v5,
           tc2 ILIKE '%fg_hi%' v6
  INTO test21g
  FROM rt_text
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, bc1 ILIKE '%ab%cd%' v1,
           bc2 ILIKE '%bc_de%' v2,
           tc1 ILIKE '%ef_gh%' v5,
           tc2 ILIKE '%fg_hi%' v6
  INTO test21p
  FROM rt_text
 WHERE id > 0;
(SELECT * FROM test21g EXCEPT SELECT * FROM test21p) ORDER BY id;
 id | v1 | v2 | v5 | v6 
----+----+----+----+----
(0 rows)

(SELECT * FROM test21p EXCEPT SELECT * FROM test21g) ORDER BY id;
 id | v1 | v2 | v5 | v6 
----+----+----+----+----
(0 rows)

-- '||' operator (textcat) can work on fixed max-length text
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, length(tc1) v1,
       tc1 || '_foo'  v2,
       substring(tc1, 1, 10) || '_bar' v3,
       vc1 || '_baz' v4,
       vc1 || '--' || vc2 v5
  INTO test30g
  FROM rt_text
 WHERE id > 0;
                                                                                                                                                                                                                                                QUERY PLAN                                                                                                                                                                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_text_temp.rt_text
   Output: id, (length(tc1)), (tc1 || '_foo'::text), ("substring"(tc1, 1, 10) || '_bar'::text), ((vc1)::text || '_baz'::text), (((vc1)::text || '--'::text) || (vc2)::text)
   GPU Projection: id, length(tc1), tc1, vc1, vc2
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='int4', expr='(length(tc1))'>, <slot=2, type='text', expr='tc1'>, <slot=3, type='text', expr='vc1'>, <slot=4, type='text', expr='vc2'>
   KVecs-Buffer: nbytes: 90112, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-8fff, type='text', expr='tc1'>, kvec2=<0x9000-f7ff, type='text', expr='vc1'>, kvec3=<0xf800-15fff, type='text', expr='vc2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=3, type='text' resno=4(vc1)>, <slot=4, type='text' resno=5(vc2)>, <slot=2, type='text' resno=6(tc1)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-8fff, type='text', expr='tc1'>, <slot=3, offset=0x9000-f7ff, type='text', expr='vc1'>, <slot=4, offset=0xf800-15fff, type='text', expr='vc2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,2,3,4> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='int4'> arg={Func(int4)::length arg={Var(text): kvec=0x2800-9000, expr='tc1'}}}, {SaveExpr: <slot=2, type='text'> arg={Var(text): kvec=0x2800-9000, expr='tc1'}}, {SaveExpr: <slot=3, type='text'> arg={Var(text): kvec=0x9000-f800, expr='vc1'}}, {SaveExpr: <slot=4, type='text'> arg={Var(text): kvec=0xf800-16000, expr='vc2'}}]}
   CUDA Stack Size: 4032
(11 rows)

SELECT id, length(tc1) v1,
       tc1 || '_foo'  v2,
       substring(tc1, 1, 10) || '_bar' v3,
       vc1 || '_baz' v4,
       vc1 || '--' || vc2 v5
  INTO test30g
  FROM rt_text
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, length(tc1) v1,
       tc1 || '_foo'  v2,
       substring(tc1, 1, 10) || '_bar' v3,
       vc1 || '_baz' v4,
       vc1 || '--' || vc2 v5
  INTO test30p
  FROM rt_text
 WHERE id > 0;
(SELECT * FROM test30g EXCEPT SELECT * FROM test30p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 
----+----+----+----+----+----
(0 rows)

(SELECT * FROM test30p EXCEPT SELECT * FROM test30g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 
----+----+----+----+----+----
(0 rows)

-- substring
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, length(tc2) v1, 
       substring(vc1 || '-hoge-' || vc2, id % 15 + 5, 20) v5
  INTO test31g
  FROM rt_text
 WHERE id > 0;
                                                                                                                                                                                                       QUERY PLAN                                                                                                                                                                                                       
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_text_temp.rt_text
   Output: id, (length(tc2)), "substring"((((vc1)::text || '-hoge-'::text) || (vc2)::text), ((id % 15) + 5), 20)
   GPU Projection: id, length(tc2), vc1, vc2
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='int4', expr='(length(tc2))'>, <slot=2, type='text', expr='tc2'>, <slot=3, type='text', expr='vc1'>, <slot=4, type='text', expr='vc2'>
   KVecs-Buffer: nbytes: 90112, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-8fff, type='text', expr='tc2'>, kvec2=<0x9000-f7ff, type='text', expr='vc1'>, kvec3=<0xf800-15fff, type='text', expr='vc2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=3, type='text' resno=4(vc1)>, <slot=4, type='text' resno=5(vc2)>, <slot=2, type='text' resno=7(tc2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-8fff, type='text', expr='tc2'>, <slot=3, offset=0x9000-f7ff, type='text', expr='vc1'>, <slot=4, offset=0xf800-15fff, type='text', expr='vc2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,3,4> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='int4'> arg={Func(int4)::length arg={Var(text): kvec=0x2800-9000, expr='tc2'}}}, {SaveExpr: <slot=3, type='text'> arg={Var(text): kvec=0x9000-f800, expr='vc1'}}, {SaveExpr: <slot=4, type='text'> arg={Var(text): kvec=0xf800-16000, expr='vc2'}}]}
   CUDA Stack Size: 4032
(11 rows)

SELECT id, length(tc2) v1, 
       substring(vc1 || '-hoge-' || vc2, id % 15 + 5, 20) v5
  INTO test31g
  FROM rt_text
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, length(tc2) v1, 
       substring(vc1 || '-hoge-' || vc2, id % 15 + 5, 20) v5
  INTO test31p
  FROM rt_text
 WHERE id > 0;
(SELECT * FROM test31g EXCEPT SELECT * FROM test31p) ORDER BY id;
 id | v1 | v5 
----+----+----
(0 rows)

(SELECT * FROM test31p EXCEPT SELECT * FROM test31g) ORDER BY id;
 id | v1 | v5 
----+----+----
(0 rows)

-- variadic concat() also works on fixed max-length text
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, length(tc1) v1,
       concat(tc1, '_foo') v2,
	   concat(substring(tc1, 1, 10), '_bar') v3,
	   concat(substring(tc1, 1, 8), '--hoge--', substring(tc1, 8, 16)) v4,
	   concat(substring(tc1, 1, 8), substring(tc2, 1, 8), vc1, vc2) v5
  INTO test32g
  FROM rt_text
 WHERE id > 0;
                                                                                                                                                                                                                                                                                           QUERY PLAN                                                                                                                                                                                                                                                                                           

 Custom Scan (GpuScan) on regtest_dtype_text_temp.rt_text
   Output: id, (length(tc1)), concat(tc1, '_foo'), concat("substring"(tc1, 1, 10), '_bar'), concat("substring"(tc1, 1, 8), '--hoge--', "substring"(tc1, 8, 16)), concat("substring"(tc1, 1, 8), "substring"(tc2, 1, 8), vc1, vc2)
   GPU Projection: id, length(tc1), tc1, tc2, vc1, vc2
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='int4', expr='(length(tc1))'>, <slot=2, type='text', expr='tc1'>, <slot=3, type='text', expr='tc2'>, <slot=4, type='text', expr='vc1'>, <slot=5, type='text', expr='vc2'>
   KVecs-Buffer: nbytes: 116736, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-8fff, type='text', expr='tc1'>, kvec2=<0x9000-f7ff, type='text', expr='tc2'>, kvec3=<0xf800-15fff, type='text', expr='vc1'>, kvec4=<0x16000-1c7ff, type='text', expr='vc2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=4, type='text' resno=4(vc1)>, <slot=5, type='text' resno=5(vc2)>, <slot=2, type='text' resno=6(tc1)>, <slot=3, type='text' resno=7(tc2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-8fff, type='text', expr='tc1'>, <slot=3, offset=0x9000-f7ff, type='text', expr='tc2'>, <slot=4, offset=0xf800-15fff, type='text', expr='vc1'>, <slot=5, offset=0x16000-1c7ff, type='text', expr='vc2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,2,3,4,5> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='int4'> arg={Func(int4)::length arg={Var(text): kvec=0x2800-9000, expr='tc1'}}}, {SaveExpr: <slot=2, type='text'> arg={Var(text): kvec=0x2800-9000, expr='tc1'}}, {SaveExpr: <slot=3, type='text'> arg={Var(text): kvec=0x9000-f800, expr='tc2'}}, {SaveExpr: <slot=4, type='text'> arg={Var(text): kvec=0xf800-16000, expr='vc1'}}, {SaveExpr: <slot=5, type='text'> arg={Var(text): kvec=0x16000-1c800, expr='vc2'}}]}
   CUDA Stack Size: 4064
(11 rows)

SELECT id, length(tc1) v1,
       concat(tc1, '_foo') v2,
	   concat(substring(tc1, 1, 10), '_bar') v3,
	   concat(substring(tc1, 1, 8), '--hoge--', substring(tc1, 8, 16)) v4,
	   concat(substring(tc1, 1, 8), substring(tc2, 1, 8), vc1, vc2) v5
  INTO test32g
  FROM rt_text
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, length(tc1) v1,
       concat(tc1, '_foo') v2,
	   concat(substring(tc1, 1, 10), '_bar') v3,
	   concat(substring(tc1, 1, 8), '--hoge--', substring(tc1, 8, 16)) v4,
	   concat(substring(tc1, 1, 8), substring(tc2, 1, 8), vc1, vc2) v5
  INTO test32p
  FROM rt_text
 WHERE id > 0;
(SELECT * FROM test32g EXCEPT SELECT * FROM test32p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 
----+----+----+----+----+----
(0 rows)

(SELECT * FROM test32p EXCEPT SELECT * FROM test32g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 
----+----+----+----+----+----
(0 rows)

-- cleanup temporary resource
SET client_min_messages = error;
DROP SCHEMA regtest_dtype_text_temp CASCADE;
