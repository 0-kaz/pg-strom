---
--- test cases for GPU Cache
---
\t on
SET pg_strom.regression_test_mode = on;
SET client_min_messages = error;
DROP SCHEMA IF EXISTS gpu_cache_temp_test CASCADE;
CREATE SCHEMA gpu_cache_temp_test;
RESET client_min_messages;
SET search_path = gpu_cache_temp_test,public;
---
--- Creating a table on GPU cache
---
CREATE TABLE cache_test_table (
  id   int,
  a    int1,
  b    int2,
  c    int4,
  d    int8,
  e    float2,
  f    float4,
  g    float8,
  h    text,
  i    varchar(32),
  j    char(32)
);
---
--- GPU Cache configuration
---
-- syntax error
CREATE TRIGGER row_sync_test_ng01 AFTER INSERT OR UPDATE OR DELETE
    ON cache_test_table FOR ROW
    EXECUTE FUNCTION pgstrom.gpucache_sync_trigger('cpu_device_id=0');
ERROR:  gpucache: unknown option [cpu_device_id]=[0]
-- validation error
CREATE TRIGGER row_sync_test_ng03 AFTER INSERT OR UPDATE OR DELETE
    ON cache_test_table FOR ROW
    EXECUTE FUNCTION pgstrom.gpucache_sync_trigger('redo_buffer_size=4m');
ERROR:  gpucache: 'redo_buffer_size' is too small (4194304)
-- success
CREATE TRIGGER row_sync_test AFTER INSERT OR UPDATE OR DELETE
    ON cache_test_table FOR ROW 
    EXECUTE FUNCTION pgstrom.gpucache_sync_trigger('gpu_device_id=0,max_num_rows=10000,redo_buffer_size=150m,gpu_sync_threshold=10m,gpu_sync_interval=4');
ALTER TABLE cache_test_table ENABLE ALWAYS TRIGGER row_sync_test;
-- duplicate row-sync trigger error
CREATE TRIGGER row_sync_test_ng04 AFTER INSERT OR UPDATE OR DELETE
    ON cache_test_table FOR ROW 
    EXECUTE FUNCTION pgstrom.gpucache_sync_trigger();
ERROR:  gpucache: relation cache_test_table has multiple row-sync triggers
-- Make GPU cache 
INSERT INTO cache_test_table(id) values (1);
-- Check gpucache_info table.
SELECT config_options FROM pgstrom.gpucache_info WHERE table_name='cache_test_table' AND database_name=current_database();
 gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

TRUNCATE TABLE cache_test_table;
-- Force to use GPU Cache
SET enable_seqscan=off;
---
--- INSERT 
---
EXPLAIN (costs off, verbose)
INSERT INTO cache_test_table(id) values (1);
 Insert on gpu_cache_temp_test.cache_test_table
   ->  Result
         Output: 1, NULL::int1, NULL::smallint, NULL::integer, NULL::bigint, NULL::float2, NULL::real, NULL::double precision, NULL::text, NULL::character varying, NULL::bpchar

SELECT pgstrom.random_setseed(20190608);
 

INSERT INTO cache_test_table (
  SELECT x 
  ,pgstrom.random_int(1,-128,127)     -- a int1
  ,pgstrom.random_int(1,-32768,32767)  -- b int2
  ,pgstrom.random_int(1,-2147483648,2147483647)  -- c int4
  ,pgstrom.random_int(1,-9223372036854775808,9223372036854775807)   -- d int8
  ,pgstrom.random_float(0.5, -32000, 32000)   -- e float2
  ,pgstrom.random_float(0.5, -32000, 32000)   -- f float4
  ,pgstrom.random_float(0.5, -32000, 32000)   -- g float8
  ,LEFT(MD5((x%479)::TEXT),(x%32+1)::INTEGER)     -- h text
  ,LEFT(MD5((x%479+1)::TEXT),(x%32+1)::INTEGER)     -- i text
  ,LEFT(MD5((x%479+2)::TEXT),(x%32+1)::INTEGER)     -- j text
  FROM generate_series(1,4000) x
);
VACUUM ANALYZE;
-- Copy inserted records to normal table(without GPU Cache)
SELECT * INTO TEMPORARY normal_table FROM cache_test_table; 
---
--- UPDATE
---
EXPLAIN (costs off, verbose)
UPDATE cache_test_table SET a = (a+1) % 127 WHERE a%97=0;
 Update on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ((((a + 1) % 127))::int1), ctid
         GPU Projection: (((a + 1) % 127))::int1, ctid
         GPU Scan Quals: (((a)::integer % 97) = 0) [rows: 4000 -> 20]
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: <slot=0, type='int1', expr='a', kv_off=0x0000>, <slot=1, type='int1', expr='((((a + 1) % 127))::int1)'>, <slot=2, type='internal[6]', expr='ctid', kv_off=0x0800>
         KVecs-Buffer: nbytes: 11264, ndims: 2, items=[kvec0=<0x0000-07ff, type='int1', expr='a'>, kvec1=<0x0800-2bff, type='internal', expr='ctid'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=2, type='internal' resno=-1(ctid)>, <slot=0, type='int1' resno=2(a)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-07ff, type='int1', expr='a'>, <slot=2, offset=0x0800-2bff, type='internal', expr='ctid'>]}}}
         Scan Quals OpCode: {Func(bool)::int4eq args=[{Func(int4)::int4mod args=[{Func(int4)::int4 arg={Var(int1): slot=0, expr='a'}}, {Const(int4): value='97'}]}, {Const(int4): value='0'}]}
         Projection OpCode: {Projection: layout=<1,2> args=[{SaveExpr: <slot=1, type='int1'> arg={Func(int1)::int1 arg={Func(int4)::int4mod args=[{Func(int4)::int14pl args=[{Var(int1): kvec=0x0000-0800, expr='a'}, {Const(int4): value='1'}]}, {Const(int4): value='127'}]}}}, {SaveExpr: <slot=2, type='internal'> arg={Var(internal): kvec=0x0800-2c00, expr='ctid'}}]}
         Fallback-desc: [<dest='2', expr='a', depth=0:1>]
         CUDA Stack Size: 3936

UPDATE cache_test_table SET a = (a+1) % 127 WHERE a%97=0;
UPDATE normal_table     SET a = (a+1) % 127 WHERE a%97=0;
EXPLAIN (costs off, verbose)
UPDATE cache_test_table SET b = (b+1) % 32767 WHERE a%89=0;
 Update on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ((((b + 1) % 32767))::smallint), ctid
         GPU Projection: (((b + 1) % 32767))::smallint, ctid
         GPU Scan Quals: (((a)::integer % 89) = 0) [rows: 4000 -> 20]
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: <slot=0, type='int1', expr='a', kv_off=0x0000>, <slot=1, type='int2', expr='((((b + 1) % 32767))::smallint)'>, <slot=2, type='int2', expr='b', kv_off=0x0800>, <slot=3, type='internal[6]', expr='ctid', kv_off=0x1400>
         KVecs-Buffer: nbytes: 14336, ndims: 2, items=[kvec0=<0x0000-07ff, type='int1', expr='a'>, kvec1=<0x0800-13ff, type='int2', expr='b'>, kvec2=<0x1400-37ff, type='internal', expr='ctid'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=3, type='internal' resno=-1(ctid)>, <slot=0, type='int1' resno=2(a)>, <slot=2, type='int2' resno=3(b)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=2, offset=0x0800-13ff, type='int2', expr='b'>, <slot=3, offset=0x1400-37ff, type='internal', expr='ctid'>]}}}
         Scan Quals OpCode: {Func(bool)::int4eq args=[{Func(int4)::int4mod args=[{Func(int4)::int4 arg={Var(int1): slot=0, expr='a'}}, {Const(int4): value='89'}]}, {Const(int4): value='0'}]}
         Projection OpCode: {Projection: layout=<1,3> args=[{SaveExpr: <slot=1, type='int2'> arg={Func(int2)::int2 arg={Func(int4)::int4mod args=[{Func(int4)::int24pl args=[{Var(int2): kvec=0x0800-1400, expr='b'}, {Const(int4): value='1'}]}, {Const(int4): value='32767'}]}}}, {SaveExpr: <slot=3, type='internal'> arg={Var(internal): kvec=0x1400-3800, expr='ctid'}}]}
         Fallback-desc: [<dest='2', expr='a', depth=0:0>, <dest='3', expr='b', depth=0:1>]
         CUDA Stack Size: 3952

UPDATE cache_test_table SET b = (b+1) % 32767 WHERE a%89=0;
UPDATE normal_table     SET b = (b+1) % 32767 WHERE a%89=0;
EXPLAIN (costs off, verbose)
UPDATE cache_test_table SET c = (c+1) % 2147483647 WHERE a%83=0;
 Update on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: (((c + 1) % 2147483647)), ctid
         GPU Projection: ((c + 1) % 2147483647), ctid
         GPU Scan Quals: (((a)::integer % 83) = 0) [rows: 4057 -> 20]
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: <slot=0, type='int1', expr='a', kv_off=0x0000>, <slot=1, type='int4', expr='(((c + 1) % 2147483647))'>, <slot=2, type='int4', expr='c', kv_off=0x0800>, <slot=3, type='internal[6]', expr='ctid', kv_off=0x1c00>
         KVecs-Buffer: nbytes: 16384, ndims: 2, items=[kvec0=<0x0000-07ff, type='int1', expr='a'>, kvec1=<0x0800-1bff, type='int4', expr='c'>, kvec2=<0x1c00-3fff, type='internal', expr='ctid'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=3, type='internal' resno=-1(ctid)>, <slot=0, type='int1' resno=2(a)>, <slot=2, type='int4' resno=4(c)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=2, offset=0x0800-1bff, type='int4', expr='c'>, <slot=3, offset=0x1c00-3fff, type='internal', expr='ctid'>]}}}
         Scan Quals OpCode: {Func(bool)::int4eq args=[{Func(int4)::int4mod args=[{Func(int4)::int4 arg={Var(int1): slot=0, expr='a'}}, {Const(int4): value='83'}]}, {Const(int4): value='0'}]}
         Projection OpCode: {Projection: layout=<1,3> args=[{SaveExpr: <slot=1, type='int4'> arg={Func(int4)::int4mod args=[{Func(int4)::int4pl args=[{Var(int4): kvec=0x0800-1c00, expr='c'}, {Const(int4): value='1'}]}, {Const(int4): value='2147483647'}]}}, {SaveExpr: <slot=3, type='internal'> arg={Var(internal): kvec=0x1c00-4000, expr='ctid'}}]}
         Fallback-desc: [<dest='2', expr='a', depth=0:0>, <dest='3', expr='c', depth=0:1>]
         CUDA Stack Size: 3952

UPDATE cache_test_table SET c = (c+1) % 2147483647 WHERE a%83=0;
UPDATE normal_table     SET c = (c+1) % 2147483647 WHERE a%83=0;
EXPLAIN (costs off, verbose)
UPDATE cache_test_table SET d = (d+1) % 9223372036854775807 WHERE a%79=0;
 Update on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: (((d + 1) % '9223372036854775807'::bigint)), ctid
         GPU Projection: ((d + 1) % '9223372036854775807'::bigint), ctid
         GPU Scan Quals: (((a)::integer % 79) = 0) [rows: 4114 -> 21]
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: <slot=0, type='int1', expr='a', kv_off=0x0000>, <slot=1, type='int8', expr='(((d + 1) % '9223372036854775807'::bigint))'>, <slot=2, type='int8', expr='d', kv_off=0x0800>, <slot=3, type='internal[6]', expr='ctid', kv_off=0x2c00>
         KVecs-Buffer: nbytes: 20480, ndims: 2, items=[kvec0=<0x0000-07ff, type='int1', expr='a'>, kvec1=<0x0800-2bff, type='int8', expr='d'>, kvec2=<0x2c00-4fff, type='internal', expr='ctid'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=3, type='internal' resno=-1(ctid)>, <slot=0, type='int1' resno=2(a)>, <slot=2, type='int8' resno=5(d)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=2, offset=0x0800-2bff, type='int8', expr='d'>, <slot=3, offset=0x2c00-4fff, type='internal', expr='ctid'>]}}}
         Scan Quals OpCode: {Func(bool)::int4eq args=[{Func(int4)::int4mod args=[{Func(int4)::int4 arg={Var(int1): slot=0, expr='a'}}, {Const(int4): value='79'}]}, {Const(int4): value='0'}]}
         Projection OpCode: {Projection: layout=<1,3> args=[{SaveExpr: <slot=1, type='int8'> arg={Func(int8)::int8mod args=[{Func(int8)::int84pl args=[{Var(int8): kvec=0x0800-2c00, expr='d'}, {Const(int4): value='1'}]}, {Const(int8): value='9223372036854775807'}]}}, {SaveExpr: <slot=3, type='internal'> arg={Var(internal): kvec=0x2c00-5000, expr='ctid'}}]}
         Fallback-desc: [<dest='2', expr='a', depth=0:0>, <dest='3', expr='d', depth=0:1>]
         CUDA Stack Size: 3952

UPDATE cache_test_table SET d = (d+1) % 9223372036854775807 WHERE a%79=0;
UPDATE normal_table     SET d = (d+1) % 9223372036854775807 WHERE a%79=0;
EXPLAIN (costs off, verbose)
UPDATE cache_test_table SET e = (e+0.5)::numeric % 999999 WHERE a%73=0;
 Update on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: (((((e + '0.5'::double precision))::numeric % '999999'::numeric))::float2), ctid
         GPU Projection: ((((e + '0.5'::double precision))::numeric % '999999'::numeric))::float2, ctid
         GPU Scan Quals: (((a)::integer % 73) = 0) [rows: 4114 -> 21]
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: <slot=0, type='int1', expr='a', kv_off=0x0000>, <slot=1, type='float2', expr='(((((e + '0.5'::double precision))::numeric % '999999'::numeric))::float2)'>, <slot=2, type='float2', expr='e', kv_off=0x0800>, <slot=3, type='internal[6]', expr='ctid', kv_off=0x1400>
         KVecs-Buffer: nbytes: 14336, ndims: 2, items=[kvec0=<0x0000-07ff, type='int1', expr='a'>, kvec1=<0x0800-13ff, type='float2', expr='e'>, kvec2=<0x1400-37ff, type='internal', expr='ctid'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=3, type='internal' resno=-1(ctid)>, <slot=0, type='int1' resno=2(a)>, <slot=2, type='float2' resno=6(e)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=2, offset=0x0800-13ff, type='float2', expr='e'>, <slot=3, offset=0x1400-37ff, type='internal', expr='ctid'>]}}}
         Scan Quals OpCode: {Func(bool)::int4eq args=[{Func(int4)::int4mod args=[{Func(int4)::int4 arg={Var(int1): slot=0, expr='a'}}, {Const(int4): value='73'}]}, {Const(int4): value='0'}]}
         Projection OpCode: {Projection: layout=<1,3> args=[{SaveExpr: <slot=1, type='float2'> arg={Func(float2)::float2 arg={Func(numeric)::numeric_mod args=[{Func(numeric)::numeric arg={Func(float8)::float28pl args=[{Var(float2): kvec=0x0800-1400, expr='e'}, {Const(float8): value='0.5'}]}}, {Const(numeric): value='999999'}]}}}, {SaveExpr: <slot=3, type='internal'> arg={Var(internal): kvec=0x1400-3800, expr='ctid'}}]}
         Fallback-desc: [<dest='2', expr='a', depth=0:0>, <dest='3', expr='e', depth=0:1>]
         CUDA Stack Size: 3952

UPDATE cache_test_table SET e = (e+0.5)::numeric % 999999 WHERE a%73=0;
UPDATE normal_table     SET e = (e+0.5)::numeric % 999999 WHERE a%73=0;
EXPLAIN (costs off, verbose)
UPDATE cache_test_table SET f = (f+0.5)::numeric % 999999 WHERE a%71=0;
 Update on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: (((((f + '0.5'::double precision))::numeric % '999999'::numeric))::real), ctid
         GPU Projection: ((((f + '0.5'::double precision))::numeric % '999999'::numeric))::real, ctid
         GPU Scan Quals: (((a)::integer % 71) = 0) [rows: 4171 -> 21]
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: <slot=0, type='int1', expr='a', kv_off=0x0000>, <slot=1, type='float4', expr='(((((f + '0.5'::double precision))::numeric % '999999'::numeric))::real)'>, <slot=2, type='float4', expr='f', kv_off=0x0800>, <slot=3, type='internal[6]', expr='ctid', kv_off=0x1c00>
         KVecs-Buffer: nbytes: 16384, ndims: 2, items=[kvec0=<0x0000-07ff, type='int1', expr='a'>, kvec1=<0x0800-1bff, type='float4', expr='f'>, kvec2=<0x1c00-3fff, type='internal', expr='ctid'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=3, type='internal' resno=-1(ctid)>, <slot=0, type='int1' resno=2(a)>, <slot=2, type='float4' resno=7(f)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=2, offset=0x0800-1bff, type='float4', expr='f'>, <slot=3, offset=0x1c00-3fff, type='internal', expr='ctid'>]}}}
         Scan Quals OpCode: {Func(bool)::int4eq args=[{Func(int4)::int4mod args=[{Func(int4)::int4 arg={Var(int1): slot=0, expr='a'}}, {Const(int4): value='71'}]}, {Const(int4): value='0'}]}
         Projection OpCode: {Projection: layout=<1,3> args=[{SaveExpr: <slot=1, type='float4'> arg={Func(float4)::float4 arg={Func(numeric)::numeric_mod args=[{Func(numeric)::numeric arg={Func(float8)::float48pl args=[{Var(float4): kvec=0x0800-1c00, expr='f'}, {Const(float8): value='0.5'}]}}, {Const(numeric): value='999999'}]}}}, {SaveExpr: <slot=3, type='internal'> arg={Var(internal): kvec=0x1c00-4000, expr='ctid'}}]}
         Fallback-desc: [<dest='2', expr='a', depth=0:0>, <dest='3', expr='f', depth=0:1>]
         CUDA Stack Size: 3952

UPDATE cache_test_table SET f = (f+0.5)::numeric % 999999 WHERE a%71=0;
UPDATE normal_table     SET f = (f+0.5)::numeric % 999999 WHERE a%71=0;
EXPLAIN (costs off, verbose)
UPDATE cache_test_table SET g = (g+0.5)::numeric % 999999 WHERE a%67=0;
 Update on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: (((((g + '0.5'::double precision))::numeric % '999999'::numeric))::double precision), ctid
         GPU Projection: ((((g + '0.5'::double precision))::numeric % '999999'::numeric))::double precision, ctid
         GPU Scan Quals: (((a)::integer % 67) = 0) [rows: 4171 -> 21]
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: <slot=0, type='int1', expr='a', kv_off=0x0000>, <slot=1, type='float8', expr='(((((g + '0.5'::double precision))::numeric % '999999'::numeric))::double precision)'>, <slot=2, type='float8', expr='g', kv_off=0x0800>, <slot=3, type='internal[6]', expr='ctid', kv_off=0x2c00>
         KVecs-Buffer: nbytes: 20480, ndims: 2, items=[kvec0=<0x0000-07ff, type='int1', expr='a'>, kvec1=<0x0800-2bff, type='float8', expr='g'>, kvec2=<0x2c00-4fff, type='internal', expr='ctid'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=3, type='internal' resno=-1(ctid)>, <slot=0, type='int1' resno=2(a)>, <slot=2, type='float8' resno=8(g)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=2, offset=0x0800-2bff, type='float8', expr='g'>, <slot=3, offset=0x2c00-4fff, type='internal', expr='ctid'>]}}}
         Scan Quals OpCode: {Func(bool)::int4eq args=[{Func(int4)::int4mod args=[{Func(int4)::int4 arg={Var(int1): slot=0, expr='a'}}, {Const(int4): value='67'}]}, {Const(int4): value='0'}]}
         Projection OpCode: {Projection: layout=<1,3> args=[{SaveExpr: <slot=1, type='float8'> arg={Func(float8)::float8 arg={Func(numeric)::numeric_mod args=[{Func(numeric)::numeric arg={Func(float8)::float8pl args=[{Var(float8): kvec=0x0800-2c00, expr='g'}, {Const(float8): value='0.5'}]}}, {Const(numeric): value='999999'}]}}}, {SaveExpr: <slot=3, type='internal'> arg={Var(internal): kvec=0x2c00-5000, expr='ctid'}}]}
         Fallback-desc: [<dest='2', expr='a', depth=0:0>, <dest='3', expr='g', depth=0:1>]
         CUDA Stack Size: 3952

UPDATE cache_test_table SET g = (g+0.5)::numeric % 999999 WHERE a%67=0;
UPDATE normal_table     SET g = (g+0.5)::numeric % 999999 WHERE a%67=0;
EXPLAIN (costs off, verbose)
UPDATE cache_test_table SET h = 'delete' WHERE a%103=0;
 Update on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: 'delete'::text, ctid
         GPU Projection: ctid
         GPU Scan Quals: (((a)::integer % 103) = 0) [rows: 4229 -> 21]
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: <slot=0, type='int1', expr='a', kv_off=0x0000>, <slot=1, type='internal[6]', expr='ctid', kv_off=0x0800>
         KVecs-Buffer: nbytes: 11264, ndims: 2, items=[kvec0=<0x0000-07ff, type='int1', expr='a'>, kvec1=<0x0800-2bff, type='internal', expr='ctid'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=1, type='internal' resno=-1(ctid)>, <slot=0, type='int1' resno=2(a)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=1, offset=0x0800-2bff, type='internal', expr='ctid'>]}}}
         Scan Quals OpCode: {Func(bool)::int4eq args=[{Func(int4)::int4mod args=[{Func(int4)::int4 arg={Var(int1): slot=0, expr='a'}}, {Const(int4): value='103'}]}, {Const(int4): value='0'}]}
         Projection OpCode: {Projection: layout=<1> arg={SaveExpr: <slot=1, type='internal'> arg={Var(internal): kvec=0x0800-2c00, expr='ctid'}}}
         Fallback-desc: [<dest='1', expr='a', depth=0:0>]
         CUDA Stack Size: 3904

UPDATE cache_test_table SET h = 'delete' WHERE a%103=0;
UPDATE normal_table     SET h = 'delete' WHERE a%103=0;
EXPLAIN (costs off, verbose)
UPDATE cache_test_table SET i = 'delete' WHERE a%107=0;
 Update on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: 'delete'::character varying(32), ctid
         GPU Projection: ctid
         GPU Scan Quals: (((a)::integer % 107) = 0) [rows: 4229 -> 21]
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: <slot=0, type='int1', expr='a', kv_off=0x0000>, <slot=1, type='internal[6]', expr='ctid', kv_off=0x0800>
         KVecs-Buffer: nbytes: 11264, ndims: 2, items=[kvec0=<0x0000-07ff, type='int1', expr='a'>, kvec1=<0x0800-2bff, type='internal', expr='ctid'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=1, type='internal' resno=-1(ctid)>, <slot=0, type='int1' resno=2(a)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=1, offset=0x0800-2bff, type='internal', expr='ctid'>]}}}
         Scan Quals OpCode: {Func(bool)::int4eq args=[{Func(int4)::int4mod args=[{Func(int4)::int4 arg={Var(int1): slot=0, expr='a'}}, {Const(int4): value='107'}]}, {Const(int4): value='0'}]}
         Projection OpCode: {Projection: layout=<1> arg={SaveExpr: <slot=1, type='internal'> arg={Var(internal): kvec=0x0800-2c00, expr='ctid'}}}
         Fallback-desc: [<dest='1', expr='a', depth=0:0>]
         CUDA Stack Size: 3904

UPDATE cache_test_table SET i = 'delete' WHERE a%107=0;
UPDATE normal_table     SET i = 'delete' WHERE a%107=0;
EXPLAIN (costs off, verbose)
UPDATE cache_test_table SET j = 'delete' WHERE a%109=0;
 Update on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: 'delete                          '::character(32), ctid
         GPU Projection: ctid
         GPU Scan Quals: (((a)::integer % 109) = 0) [rows: 4286 -> 21]
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: <slot=0, type='int1', expr='a', kv_off=0x0000>, <slot=1, type='internal[6]', expr='ctid', kv_off=0x0800>
         KVecs-Buffer: nbytes: 11264, ndims: 2, items=[kvec0=<0x0000-07ff, type='int1', expr='a'>, kvec1=<0x0800-2bff, type='internal', expr='ctid'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=1, type='internal' resno=-1(ctid)>, <slot=0, type='int1' resno=2(a)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=1, offset=0x0800-2bff, type='internal', expr='ctid'>]}}}
         Scan Quals OpCode: {Func(bool)::int4eq args=[{Func(int4)::int4mod args=[{Func(int4)::int4 arg={Var(int1): slot=0, expr='a'}}, {Const(int4): value='109'}]}, {Const(int4): value='0'}]}
         Projection OpCode: {Projection: layout=<1> arg={SaveExpr: <slot=1, type='internal'> arg={Var(internal): kvec=0x0800-2c00, expr='ctid'}}}
         Fallback-desc: [<dest='1', expr='a', depth=0:0>]
         CUDA Stack Size: 3904

UPDATE cache_test_table SET j = 'delete' WHERE a%109=0;
UPDATE normal_table     SET j = 'delete' WHERE a%109=0;
---
--- DETELE
---
EXPLAIN (costs off, verbose) 
DELETE FROM cache_test_table WHERE a%101=0 OR a IS NULL;
 Delete on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ctid
         GPU Projection: ctid
         GPU Scan Quals: ((((a)::integer % 101) = 0) OR (a IS NULL)) [rows: 4286 -> 66]
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: <slot=0, type='int1', expr='a', kv_off=0x0000>, <slot=1, type='internal[6]', expr='ctid', kv_off=0x0800>
         KVecs-Buffer: nbytes: 11264, ndims: 2, items=[kvec0=<0x0000-07ff, type='int1', expr='a'>, kvec1=<0x0800-2bff, type='internal', expr='ctid'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=1, type='internal' resno=-1(ctid)>, <slot=0, type='int1' resno=2(a)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=1, offset=0x0800-2bff, type='internal', expr='ctid'>]}}}
         Scan Quals OpCode: {Bool::OR args=[{Func(bool)::int4eq args=[{Func(int4)::int4mod args=[{Func(int4)::int4 arg={Var(int1): slot=0, expr='a'}}, {Const(int4): value='101'}]}, {Const(int4): value='0'}]}, {IsNull arg={Var(int1): slot=0, expr='a'}}]}
         Projection OpCode: {Projection: layout=<1> arg={SaveExpr: <slot=1, type='internal'> arg={Var(internal): kvec=0x0800-2c00, expr='ctid'}}}
         Fallback-desc: [<dest='1', expr='a', depth=0:0>]
         CUDA Stack Size: 3904

DELETE FROM cache_test_table WHERE a%101=0 OR a IS NULL;
DELETE FROM normal_table WHERE a%101=0 OR a IS NULL;
EXPLAIN (costs off, verbose) 
DELETE FROM cache_test_table WHERE b%101=0 OR b IS NULL;
 Delete on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ctid
         GPU Projection: ctid
         GPU Scan Quals: ((((b)::integer % 101) = 0) OR (b IS NULL)) [rows: 4286 -> 67]
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: <slot=0, type='int2', expr='b', kv_off=0x0000>, <slot=1, type='internal[6]', expr='ctid', kv_off=0x0c00>
         KVecs-Buffer: nbytes: 12288, ndims: 2, items=[kvec0=<0x0000-0bff, type='int2', expr='b'>, kvec1=<0x0c00-2fff, type='internal', expr='ctid'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=1, type='internal' resno=-1(ctid)>, <slot=0, type='int2' resno=3(b)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=1, offset=0x0c00-2fff, type='internal', expr='ctid'>]}}}
         Scan Quals OpCode: {Bool::OR args=[{Func(bool)::int4eq args=[{Func(int4)::int4mod args=[{Func(int4)::int4 arg={Var(int2): slot=0, expr='b'}}, {Const(int4): value='101'}]}, {Const(int4): value='0'}]}, {IsNull arg={Var(int2): slot=0, expr='b'}}]}
         Projection OpCode: {Projection: layout=<1> arg={SaveExpr: <slot=1, type='internal'> arg={Var(internal): kvec=0x0c00-3000, expr='ctid'}}}
         Fallback-desc: [<dest='1', expr='b', depth=0:0>]
         CUDA Stack Size: 3904

DELETE FROM cache_test_table WHERE b%101=0 OR b IS NULL;
DELETE FROM normal_table WHERE b%101=0 OR b IS NULL;
EXPLAIN (costs off, verbose) 
DELETE FROM cache_test_table WHERE c%101=0 OR c IS NULL;
 Delete on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ctid
         GPU Projection: ctid
         GPU Scan Quals: (((c % 101) = 0) OR (c IS NULL)) [rows: 4286 -> 80]
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: <slot=0, type='int4', expr='c', kv_off=0x0000>, <slot=1, type='internal[6]', expr='ctid', kv_off=0x1400>
         KVecs-Buffer: nbytes: 14336, ndims: 2, items=[kvec0=<0x0000-13ff, type='int4', expr='c'>, kvec1=<0x1400-37ff, type='internal', expr='ctid'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=1, type='internal' resno=-1(ctid)>, <slot=0, type='int4' resno=4(c)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=1, offset=0x1400-37ff, type='internal', expr='ctid'>]}}}
         Scan Quals OpCode: {Bool::OR args=[{Func(bool)::int4eq args=[{Func(int4)::int4mod args=[{Var(int4): slot=0, expr='c'}, {Const(int4): value='101'}]}, {Const(int4): value='0'}]}, {IsNull arg={Var(int4): slot=0, expr='c'}}]}
         Projection OpCode: {Projection: layout=<1> arg={SaveExpr: <slot=1, type='internal'> arg={Var(internal): kvec=0x1400-3800, expr='ctid'}}}
         Fallback-desc: [<dest='1', expr='c', depth=0:0>]
         CUDA Stack Size: 3904

DELETE FROM cache_test_table WHERE c%101=0 OR c IS NULL;
DELETE FROM normal_table WHERE c%101=0 OR c IS NULL;
EXPLAIN (costs off, verbose) 
DELETE FROM cache_test_table WHERE d%101=0 OR d IS NULL;
 Delete on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ctid
         GPU Projection: ctid
         GPU Scan Quals: (((d % '101'::bigint) = 0) OR (d IS NULL)) [rows: 4286 -> 72]
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: <slot=0, type='int8', expr='d', kv_off=0x0000>, <slot=1, type='internal[6]', expr='ctid', kv_off=0x2400>
         KVecs-Buffer: nbytes: 18432, ndims: 2, items=[kvec0=<0x0000-23ff, type='int8', expr='d'>, kvec1=<0x2400-47ff, type='internal', expr='ctid'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=1, type='internal' resno=-1(ctid)>, <slot=0, type='int8' resno=5(d)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=1, offset=0x2400-47ff, type='internal', expr='ctid'>]}}}
         Scan Quals OpCode: {Bool::OR args=[{Func(bool)::int84eq args=[{Func(int8)::int8mod args=[{Var(int8): slot=0, expr='d'}, {Const(int8): value='101'}]}, {Const(int4): value='0'}]}, {IsNull arg={Var(int8): slot=0, expr='d'}}]}
         Projection OpCode: {Projection: layout=<1> arg={SaveExpr: <slot=1, type='internal'> arg={Var(internal): kvec=0x2400-4800, expr='ctid'}}}
         Fallback-desc: [<dest='1', expr='d', depth=0:0>]
         CUDA Stack Size: 3904

DELETE FROM cache_test_table WHERE d%101=0 OR d IS NULL;
DELETE FROM normal_table WHERE d%101=0 OR d IS NULL;
EXPLAIN (costs off, verbose) 
DELETE FROM cache_test_table WHERE e::int8%101=0 OR e IS NULL;
 Delete on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ctid
         GPU Projection: ctid
         GPU Scan Quals: ((((e)::bigint % '101'::bigint) = 0) OR (e IS NULL)) [rows: 4286 -> 41]
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: <slot=0, type='float2', expr='e', kv_off=0x0000>, <slot=1, type='internal[6]', expr='ctid', kv_off=0x0c00>
         KVecs-Buffer: nbytes: 12288, ndims: 2, items=[kvec0=<0x0000-0bff, type='float2', expr='e'>, kvec1=<0x0c00-2fff, type='internal', expr='ctid'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=1, type='internal' resno=-1(ctid)>, <slot=0, type='float2' resno=6(e)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=1, offset=0x0c00-2fff, type='internal', expr='ctid'>]}}}
         Scan Quals OpCode: {Bool::OR args=[{Func(bool)::int84eq args=[{Func(int8)::int8mod args=[{Func(int8)::int8 arg={Var(float2): slot=0, expr='e'}}, {Const(int8): value='101'}]}, {Const(int4): value='0'}]}, {IsNull arg={Var(float2): slot=0, expr='e'}}]}
         Projection OpCode: {Projection: layout=<1> arg={SaveExpr: <slot=1, type='internal'> arg={Var(internal): kvec=0x0c00-3000, expr='ctid'}}}
         Fallback-desc: [<dest='1', expr='e', depth=0:0>]
         CUDA Stack Size: 3904

DELETE FROM cache_test_table WHERE e::int8%101=0 OR e IS NULL;
DELETE FROM normal_table WHERE e::int8%101=0 OR e IS NULL;
EXPLAIN (costs off, verbose) 
DELETE FROM cache_test_table WHERE f::int8%101=0 OR f IS NULL;
 Delete on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ctid
         GPU Projection: ctid
         GPU Scan Quals: ((((f)::bigint % '101'::bigint) = 0) OR (f IS NULL)) [rows: 4286 -> 47]
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: <slot=0, type='float4', expr='f', kv_off=0x0000>, <slot=1, type='internal[6]', expr='ctid', kv_off=0x1400>
         KVecs-Buffer: nbytes: 14336, ndims: 2, items=[kvec0=<0x0000-13ff, type='float4', expr='f'>, kvec1=<0x1400-37ff, type='internal', expr='ctid'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=1, type='internal' resno=-1(ctid)>, <slot=0, type='float4' resno=7(f)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=1, offset=0x1400-37ff, type='internal', expr='ctid'>]}}}
         Scan Quals OpCode: {Bool::OR args=[{Func(bool)::int84eq args=[{Func(int8)::int8mod args=[{Func(int8)::int8 arg={Var(float4): slot=0, expr='f'}}, {Const(int8): value='101'}]}, {Const(int4): value='0'}]}, {IsNull arg={Var(float4): slot=0, expr='f'}}]}
         Projection OpCode: {Projection: layout=<1> arg={SaveExpr: <slot=1, type='internal'> arg={Var(internal): kvec=0x1400-3800, expr='ctid'}}}
         Fallback-desc: [<dest='1', expr='f', depth=0:0>]
         CUDA Stack Size: 3904

DELETE FROM cache_test_table WHERE f::int8%101=0 OR f IS NULL;
DELETE FROM normal_table WHERE f::int8%101=0 OR f IS NULL;
EXPLAIN (costs off, verbose) 
DELETE FROM cache_test_table WHERE g::int8%101=0 OR g IS NULL;
 Delete on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ctid
         GPU Projection: ctid
         GPU Scan Quals: ((((g)::bigint % '101'::bigint) = 0) OR (g IS NULL)) [rows: 4286 -> 37]
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: <slot=0, type='float8', expr='g', kv_off=0x0000>, <slot=1, type='internal[6]', expr='ctid', kv_off=0x2400>
         KVecs-Buffer: nbytes: 18432, ndims: 2, items=[kvec0=<0x0000-23ff, type='float8', expr='g'>, kvec1=<0x2400-47ff, type='internal', expr='ctid'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=1, type='internal' resno=-1(ctid)>, <slot=0, type='float8' resno=8(g)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=1, offset=0x2400-47ff, type='internal', expr='ctid'>]}}}
         Scan Quals OpCode: {Bool::OR args=[{Func(bool)::int84eq args=[{Func(int8)::int8mod args=[{Func(int8)::int8 arg={Var(float8): slot=0, expr='g'}}, {Const(int8): value='101'}]}, {Const(int4): value='0'}]}, {IsNull arg={Var(float8): slot=0, expr='g'}}]}
         Projection OpCode: {Projection: layout=<1> arg={SaveExpr: <slot=1, type='internal'> arg={Var(internal): kvec=0x2400-4800, expr='ctid'}}}
         Fallback-desc: [<dest='1', expr='g', depth=0:0>]
         CUDA Stack Size: 3904

DELETE FROM cache_test_table WHERE g::int8%101=0 OR g IS NULL;
DELETE FROM normal_table WHERE g::int8%101=0 OR g IS NULL;
EXPLAIN (costs off, verbose) 
DELETE FROM cache_test_table WHERE h='delete' OR h IS NULL;
 Delete on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ctid
         GPU Projection: ctid
         GPU Scan Quals: ((h = 'delete'::text) OR (h IS NULL)) [rows: 4286 -> 1]
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: <slot=0, type='text', expr='h', kv_off=0x0000>, <slot=1, type='internal[6]', expr='ctid', kv_off=0x3400>
         KVecs-Buffer: nbytes: 22528, ndims: 2, items=[kvec0=<0x0000-33ff, type='text', expr='h'>, kvec1=<0x3400-57ff, type='internal', expr='ctid'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=1, type='internal' resno=-1(ctid)>, <slot=0, type='text' resno=9(h)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=1, offset=0x3400-57ff, type='internal', expr='ctid'>]}}}
         Scan Quals OpCode: {Bool::OR args=[{Func(bool)::texteq args=[{Var(text): slot=0, expr='h'}, {Const(text): value='delete'}]}, {IsNull arg={Var(text): slot=0, expr='h'}}]}
         Projection OpCode: {Projection: layout=<1> arg={SaveExpr: <slot=1, type='internal'> arg={Var(internal): kvec=0x3400-5800, expr='ctid'}}}
         Fallback-desc: [<dest='1', expr='h', depth=0:0>]
         CUDA Stack Size: 3920

DELETE FROM cache_test_table WHERE h='delete' OR h IS NULL;
DELETE FROM normal_table WHERE h='delete' OR h IS NULL;
EXPLAIN (costs off, verbose) 
DELETE FROM cache_test_table WHERE i='delete' OR i IS NULL;
 Delete on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ctid
         GPU Projection: ctid
         GPU Scan Quals: (((i)::text = 'delete'::text) OR (i IS NULL)) [rows: 4286 -> 1]
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: <slot=0, type='text', expr='i', kv_off=0x0000>, <slot=1, type='internal[6]', expr='ctid', kv_off=0x3400>
         KVecs-Buffer: nbytes: 22528, ndims: 2, items=[kvec0=<0x0000-33ff, type='text', expr='i'>, kvec1=<0x3400-57ff, type='internal', expr='ctid'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=1, type='internal' resno=-1(ctid)>, <slot=0, type='text' resno=10(i)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=1, offset=0x3400-57ff, type='internal', expr='ctid'>]}}}
         Scan Quals OpCode: {Bool::OR args=[{Func(bool)::texteq args=[{Var(text): slot=0, expr='i'}, {Const(text): value='delete'}]}, {IsNull arg={Var(text): slot=0, expr='i'}}]}
         Projection OpCode: {Projection: layout=<1> arg={SaveExpr: <slot=1, type='internal'> arg={Var(internal): kvec=0x3400-5800, expr='ctid'}}}
         Fallback-desc: [<dest='1', expr='i', depth=0:0>]
         CUDA Stack Size: 3920

DELETE FROM cache_test_table WHERE i='delete' OR i IS NULL;
DELETE FROM normal_table WHERE i='delete' OR i IS NULL;
EXPLAIN (costs off, verbose) 
DELETE FROM cache_test_table WHERE j='delete' OR j IS NULL;
 Delete on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ctid
         GPU Projection: ctid
         GPU Scan Quals: ((j = 'delete'::bpchar) OR (j IS NULL)) [rows: 4286 -> 1]
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: <slot=0, type='bpchar', expr='j', kv_off=0x0000>, <slot=1, type='internal[6]', expr='ctid', kv_off=0x3400>
         KVecs-Buffer: nbytes: 22528, ndims: 2, items=[kvec0=<0x0000-33ff, type='bpchar', expr='j'>, kvec1=<0x3400-57ff, type='internal', expr='ctid'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=1, type='internal' resno=-1(ctid)>, <slot=0, type='bpchar' resno=11(j)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=1, offset=0x3400-57ff, type='internal', expr='ctid'>]}}}
         Scan Quals OpCode: {Bool::OR args=[{Func(bool)::bpchareq args=[{Var(bpchar): slot=0, expr='j'}, {Const(bpchar): value='delete'}]}, {IsNull arg={Var(bpchar): slot=0, expr='j'}}]}
         Projection OpCode: {Projection: layout=<1> arg={SaveExpr: <slot=1, type='internal'> arg={Var(internal): kvec=0x3400-5800, expr='ctid'}}}
         Fallback-desc: [<dest='1', expr='j', depth=0:0>]
         CUDA Stack Size: 3920

DELETE FROM cache_test_table WHERE j='delete' OR j IS NULL;
DELETE FROM normal_table WHERE j='delete' OR j IS NULL;
---
--- ALTER TABLE 
---
ALTER TABLE cache_test_table ADD COLUMN k int2;
ALTER TABLE normal_table ADD COLUMN k int2;
UPDATE cache_test_table SET k=b/2;
UPDATE normal_table SET k=b/2;
---
--- SELECT 
---
VACUUM ANALYZE cache_test_table;
EXPLAIN (costs off, verbose)
SELECT * FROM cache_test_table WHERE a % 3 = 0;
 Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
   Output: id, a, b, c, d, e, f, g, h, i, j, k
   GPU Projection: id, a, b, c, d, e, f, g, h, i, j, k
   GPU Scan Quals: (((a)::integer % 3) = 0) [rows: 3434 -> 17]
   GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
   GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
   KVars-Slot: <slot=0, type='int1', expr='a', kv_off=0x0000>, <slot=1, type='int4', expr='id', kv_off=0x0800>, <slot=2, type='int2', expr='b', kv_off=0x1c00>, <slot=3, type='int4', expr='c', kv_off=0x2800>, <slot=4, type='int8', expr='d', kv_off=0x3c00>, <slot=5, type='float2', expr='e', kv_off=0x6000>, <slot=6, type='float4', expr='f', kv_off=0x6c00>, <slot=7, type='float8', expr='g', kv_off=0x8000>, <slot=8, type='text', expr='h', kv_off=0xa400>, <slot=9, type='text', expr='i', kv_off=0xd800>, <slot=10, type='bpchar', expr='j', kv_off=0x10c00>, <slot=11, type='int2', expr='k', kv_off=0x14000>
   KVecs-Buffer: nbytes: 84992, ndims: 2, items=[kvec0=<0x0000-07ff, type='int1', expr='a'>, kvec1=<0x0800-1bff, type='int4', expr='id'>, kvec2=<0x1c00-27ff, type='int2', expr='b'>, kvec3=<0x2800-3bff, type='int4', expr='c'>, kvec4=<0x3c00-5fff, type='int8', expr='d'>, kvec5=<0x6000-6bff, type='float2', expr='e'>, kvec6=<0x6c00-7fff, type='float4', expr='f'>, kvec7=<0x8000-a3ff, type='float8', expr='g'>, kvec8=<0xa400-d7ff, type='text', expr='h'>, kvec9=<0xd800-10bff, type='text', expr='i'>, kvec10=<0x10c00-13fff, type='bpchar', expr='j'>, kvec11=<0x14000-14bff, type='int2', expr='k'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=1, type='int4' resno=1(id)>, <slot=0, type='int1' resno=2(a)>, <slot=2, type='int2' resno=3(b)>, <slot=3, type='int4' resno=4(c)>, <slot=4, type='int8' resno=5(d)>, <slot=5, type='float2' resno=6(e)>, <slot=6, type='float4' resno=7(f)>, <slot=7, type='float8' resno=8(g)>, <slot=8, type='text' resno=9(h)>, <slot=9, type='text' resno=10(i)>, <slot=10, type='bpchar' resno=11(j)>, <slot=11, type='int2' resno=12(k)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-07ff, type='int1', expr='a'>, <slot=1, offset=0x0800-1bff, type='int4', expr='id'>, <slot=2, offset=0x1c00-27ff, type='int2', expr='b'>, <slot=3, offset=0x2800-3bff, type='int4', expr='c'>, <slot=4, offset=0x3c00-5fff, type='int8', expr='d'>, <slot=5, offset=0x6000-6bff, type='float2', expr='e'>, <slot=6, offset=0x6c00-7fff, type='float4', expr='f'>, <slot=7, offset=0x8000-a3ff, type='float8', expr='g'>, <slot=8, offset=0xa400-d7ff, type='text', expr='h'>, <slot=9, offset=0xd800-10bff, type='text', expr='i'>, <slot=10, offset=0x10c00-13fff, type='bpchar', expr='j'>, <slot=11, offset=0x14000-14bff, type='int2', expr='k'>]}}}
   Scan Quals OpCode: {Func(bool)::int4eq args=[{Func(int4)::int4mod args=[{Func(int4)::int4 arg={Var(int1): slot=0, expr='a'}}, {Const(int4): value='3'}]}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<1,0,2,3,4,5,6,7,8,9,10,11> args=[{SaveExpr: <slot=1, type='int4'> arg={Var(int4): kvec=0x0800-1c00, expr='id'}}, {SaveExpr: <slot=0, type='int1'> arg={Var(int1): kvec=0x0000-0800, expr='a'}}, {SaveExpr: <slot=2, type='int2'> arg={Var(int2): kvec=0x1c00-2800, expr='b'}}, {SaveExpr: <slot=3, type='int4'> arg={Var(int4): kvec=0x2800-3c00, expr='c'}}, {SaveExpr: <slot=4, type='int8'> arg={Var(int8): kvec=0x3c00-6000, expr='d'}}, {SaveExpr: <slot=5, type='float2'> arg={Var(float2): kvec=0x6000-6c00, expr='e'}}, {SaveExpr: <slot=6, type='float4'> arg={Var(float4): kvec=0x6c00-8000, expr='f'}}, {SaveExpr: <slot=7, type='float8'> arg={Var(float8): kvec=0x8000-a400, expr='g'}}, {SaveExpr: <slot=8, type='text'> arg={Var(text): kvec=0xa400-d800, expr='h'}}, {SaveExpr: <slot=9, type='text'> arg={Var(text): kvec=0xd800-10c00, expr='i'}}, {SaveExpr: <slot=10, type='bpchar'> arg={Var(bpchar): kvec=0x10c00-14000, expr='j'}}, {SaveExpr: <slot=11, type='int2'> arg={Var(int2): kvec=0x14000-14c00, expr='k'}}]}
   Fallback-desc: [<dest='0', expr='id', depth=0:1>, <dest='1', expr='a', depth=0:1>, <dest='2', expr='b', depth=0:1>, <dest='3', expr='c', depth=0:1>, <dest='4', expr='d', depth=0:1>, <dest='5', expr='e', depth=0:1>, <dest='6', expr='f', depth=0:1>, <dest='7', expr='g', depth=0:1>, <dest='8', expr='h', depth=0:1>, <dest='9', expr='i', depth=0:1>, <dest='10', expr='j', depth=0:1>, <dest='11', expr='k', depth=0:1>]
   CUDA Stack Size: 4192

--clms=("a" "b" "c" "d" "e" "f" "g") ; for a in ${clms[@]}; do echo "COUNT($a) AS ${a}_count,ROUND(SUM($a)::NUMERIC/100,2) AS ${a}_sum,ROUND(AVG($a)::NUMERIC/100,2) AS ${a}_avg,MAX($a) AS ${a}_max,MIN($a) AS ${a}_min," ; done
VACUUM ANALYZE cache_test_table;
EXPLAIN (costs off, verbose)
SELECT 
COUNT(a) AS a_count,SUM(a) AS a_sum,AVG(a) AS a_avg,MAX(a) AS a_max,MIN(a) AS a_min,
COUNT(b) AS b_count,SUM(b) AS b_sum,AVG(b) AS b_avg,MAX(b) AS b_max,MIN(b) AS b_min,
COUNT(c) AS c_count,SUM(c) AS c_sum,AVG(c) AS c_avg,MAX(c) AS c_max,MIN(c) AS c_min,
COUNT(d) AS d_count,SUM(d) AS d_sum,AVG(d) AS d_avg,MAX(d) AS d_max,MIN(d) AS d_min,
COUNT(e) AS e_count,SUM(e) AS e_sum,AVG(e) AS e_avg,MAX(e) AS e_max,MIN(e) AS e_min,
COUNT(f) AS f_count,SUM(f) AS f_sum,AVG(f) AS f_avg,MAX(f) AS f_max,MIN(f) AS f_min,
COUNT(g) AS g_count,SUM(g) AS g_sum,AVG(g) AS g_avg,MAX(g) AS g_max,MIN(g) AS g_min
INTO TEMPORARY cached_result FROM cache_test_table WHERE id%3=0;
 Aggregate
   Output: pgstrom.fcount((pgstrom.nrows(a))), pgstrom.sum_int((pgstrom.psum((a)::bigint))), pgstrom.avg_int((pgstrom.pavg((a)::bigint))), pgstrom.max_i1((pgstrom.pmax((a)::integer))), pgstrom.min_i1((pgstrom.pmin((a)::integer))), pgstrom.fcount((pgstrom.nrows(b))), pgstrom.sum_int((pgstrom.psum((b)::bigint))), pgstrom.avg_int((pgstrom.pavg((b)::bigint))), pgstrom.max_i2((pgstrom.pmax((b)::integer))), pgstrom.min_i2((pgstrom.pmin((b)::integer))), pgstrom.fcount((pgstrom.nrows(c))), pgstrom.sum_int((pgstrom.psum((c)::bigint))), pgstrom.avg_int((pgstrom.pavg((c)::bigint))), pgstrom.max_i4((pgstrom.pmax(c))), pgstrom.min_i4((pgstrom.pmin(c))), pgstrom.fcount((pgstrom.nrows(d))), pgstrom.sum_int_num((pgstrom.psum(d))), pgstrom.avg_int((pgstrom.pavg(d))), pgstrom.max_i8((pgstrom.pmax(d))), pgstrom.min_i8((pgstrom.pmin(d))), pgstrom.fcount((pgstrom.nrows(e))), pgstrom.sum_fp64((pgstrom.psum((e)::double precision))), pgstrom.avg_fp((pgstrom.pavg((e)::double precision))), pgstrom.max_f2((pgstrom.pmax((e)::double precision))), pgstrom.min_f2((pgstrom.pmin((e)::double precision))), pgstrom.fcount((pgstrom.nrows(f))), pgstrom.sum_fp32((pgstrom.psum((f)::double precision))), pgstrom.avg_fp((pgstrom.pavg((f)::double precision))), pgstrom.max_f4((pgstrom.pmax((f)::double precision))), pgstrom.min_f4((pgstrom.pmin((f)::double precision))), pgstrom.fcount((pgstrom.nrows(g))), pgstrom.sum_fp64((pgstrom.psum(g))), pgstrom.avg_fp((pgstrom.pavg(g))), pgstrom.max_f8((pgstrom.pmax(g))), pgstrom.min_f8((pgstrom.pmin(g)))
   ->  Custom Scan (GpuPreAgg) on gpu_cache_temp_test.cache_test_table
         Output: (pgstrom.nrows(a)), (pgstrom.psum((a)::bigint)), (pgstrom.pavg((a)::bigint)), (pgstrom.pmax((a)::integer)), (pgstrom.pmin((a)::integer)), (pgstrom.nrows(b)), (pgstrom.psum((b)::bigint)), (pgstrom.pavg((b)::bigint)), (pgstrom.pmax((b)::integer)), (pgstrom.pmin((b)::integer)), (pgstrom.nrows(c)), (pgstrom.psum((c)::bigint)), (pgstrom.pavg((c)::bigint)), (pgstrom.pmax(c)), (pgstrom.pmin(c)), (pgstrom.nrows(d)), (pgstrom.psum(d)), (pgstrom.pavg(d)), (pgstrom.pmax(d)), (pgstrom.pmin(d)), (pgstrom.nrows(e)), (pgstrom.psum((e)::double precision)), (pgstrom.pavg((e)::double precision)), (pgstrom.pmax((e)::double precision)), (pgstrom.pmin((e)::double precision)), (pgstrom.nrows(f)), (pgstrom.psum((f)::double precision)), (pgstrom.pavg((f)::double precision)), (pgstrom.pmax((f)::double precision)), (pgstrom.pmin((f)::double precision)), (pgstrom.nrows(g)), (pgstrom.psum(g)), (pgstrom.pavg(g)), (pgstrom.pmax(g)), (pgstrom.pmin(g))
         GPU Projection: pgstrom.nrows(a), pgstrom.psum((a)::bigint), pgstrom.pavg((a)::bigint), pgstrom.pmax((a)::integer), pgstrom.pmin((a)::integer), pgstrom.nrows(b), pgstrom.psum((b)::bigint), pgstrom.pavg((b)::bigint), pgstrom.pmax((b)::integer), pgstrom.pmin((b)::integer), pgstrom.nrows(c), pgstrom.psum((c)::bigint), pgstrom.pavg((c)::bigint), pgstrom.pmax(c), pgstrom.pmin(c), pgstrom.nrows(d), pgstrom.psum(d), pgstrom.pavg(d), pgstrom.pmax(d), pgstrom.pmin(d), pgstrom.nrows(e), pgstrom.psum((e)::double precision), pgstrom.pavg((e)::double precision), pgstrom.pmax((e)::double precision), pgstrom.pmin((e)::double precision), pgstrom.nrows(f), pgstrom.psum((f)::double precision), pgstrom.pavg((f)::double precision), pgstrom.pmax((f)::double precision), pgstrom.pmin((f)::double precision), pgstrom.nrows(g), pgstrom.psum(g), pgstrom.pavg(g), pgstrom.pmax(g), pgstrom.pmin(g)
         GPU Scan Quals: ((id % 3) = 0) [rows: 3434 -> 17]
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: <slot=0, type='int4', expr='id', kv_off=0x0000>, <slot=1, type='int1', expr='a', kv_off=0x1400>, <slot=2, type='int8', expr='((a)::bigint)'>, <slot=3, type='int4', expr='((a)::integer)'>, <slot=4, type='int2', expr='b', kv_off=0x1c00>, <slot=5, type='int8', expr='((b)::bigint)'>, <slot=6, type='int4', expr='((b)::integer)'>, <slot=7, type='int4', expr='c', kv_off=0x2800>, <slot=8, type='int8', expr='((c)::bigint)'>, <slot=9, type='int8', expr='d', kv_off=0x3c00>, <slot=10, type='float2', expr='e', kv_off=0x6000>, <slot=11, type='float8', expr='((e)::double precision)'>, <slot=12, type='float4', expr='f', kv_off=0x6c00>, <slot=13, type='float8', expr='((f)::double precision)'>, <slot=14, type='float8', expr='g', kv_off=0x8000>
         KVecs-Buffer: nbytes: 41984, ndims: 2, items=[kvec0=<0x0000-13ff, type='int4', expr='id'>, kvec1=<0x1400-1bff, type='int1', expr='a'>, kvec2=<0x1c00-27ff, type='int2', expr='b'>, kvec3=<0x2800-3bff, type='int4', expr='c'>, kvec4=<0x3c00-5fff, type='int8', expr='d'>, kvec5=<0x6000-6bff, type='float2', expr='e'>, kvec6=<0x6c00-7fff, type='float4', expr='f'>, kvec7=<0x8000-a3ff, type='float8', expr='g'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=1, type='int1' resno=2(a)>, <slot=4, type='int2' resno=3(b)>, <slot=7, type='int4' resno=4(c)>, <slot=9, type='int8' resno=5(d)>, <slot=10, type='float2' resno=6(e)>, <slot=12, type='float4' resno=7(f)>, <slot=14, type='float8' resno=8(g)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=1, offset=0x1400-1bff, type='int1', expr='a'>, <slot=4, offset=0x1c00-27ff, type='int2', expr='b'>, <slot=7, offset=0x2800-3bff, type='int4', expr='c'>, <slot=9, offset=0x3c00-5fff, type='int8', expr='d'>, <slot=10, offset=0x6000-6bff, type='float2', expr='e'>, <slot=12, offset=0x6c00-7fff, type='float4', expr='f'>, <slot=14, offset=0x8000-a3ff, type='float8', expr='g'>]}}}
         Scan Quals OpCode: {Func(bool)::int4eq args=[{Func(int4)::int4mod args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='3'}]}, {Const(int4): value='0'}]}
         Partial Aggregation OpCode: {AggFuncs <nrows[slot=1, expr='a'], psum::int[slot=2, expr='((a)::bigint)'], pavg::int[slot=2, expr='((a)::bigint)'], pmax::int32[slot=3, expr='((a)::integer)'], pmin::int32[slot=3, expr='((a)::integer)'], nrows[slot=4, expr='b'], psum::int[slot=5, expr='((b)::bigint)'], pavg::int[slot=5, expr='((b)::bigint)'], pmax::int32[slot=6, expr='((b)::integer)'], pmin::int32[slot=6, expr='((b)::integer)'], nrows[slot=7, expr='c'], psum::int[slot=8, expr='((c)::bigint)'], pavg::int[slot=8, expr='((c)::bigint)'], pmax::int32[slot=7, expr='c'], pmin::int32[slot=7, expr='c'], nrows[slot=9, expr='d'], psum::int[slot=9, expr='d'], pavg::int[slot=9, expr='d'], pmax::int64[slot=9, expr='d'], pmin::int64[slot=9, expr='d'], nrows[slot=10, expr='e'], psum::fp[slot=11, expr='((e)::double precision)'], pavg::fp[slot=11, expr='((e)::double precision)'], pmax::fp64[slot=11, expr='((e)::double precision)'], pmin::fp64[slot=11, expr='((e)::double precision)'], nrows[slot=12, expr='f'], psum::fp[slot=13, expr='((f)::double precision)'], pavg::fp[slot=13, expr='((f)::double precision)'], pmax::fp64[slot=13, expr='((f)::double precision)'], pmin::fp64[slot=13, expr='((f)::double precision)'], nrows[slot=14, expr='g'], psum::fp[slot=14, expr='g'], pavg::fp[slot=14, expr='g'], pmax::fp64[slot=14, expr='g'], pmin::fp64[slot=14, expr='g']> args=[{SaveExpr: <slot=1, type='int1'> arg={Var(int1): kvec=0x1400-1c00, expr='a'}}, {SaveExpr: <slot=2, type='int8'> arg={Func(int8)::int8 arg={Var(int1): kvec=0x1400-1c00, expr='a'}}}, {SaveExpr: <slot=3, type='int4'> arg={Func(int4)::int4 arg={Var(int1): kvec=0x1400-1c00, expr='a'}}}, {SaveExpr: <slot=4, type='int2'> arg={Var(int2): kvec=0x1c00-2800, expr='b'}}, {SaveExpr: <slot=5, type='int8'> arg={Func(int8)::int8 arg={Var(int2): kvec=0x1c00-2800, expr='b'}}}, {SaveExpr: <slot=6, type='int4'> arg={Func(int4)::int4 arg={Var(int2): kvec=0x1c00-2800, expr='b'}}}, {SaveExpr: <slot=7, type='int4'> arg={Var(int4): kvec=0x2800-3c00, expr='c'}}, {SaveExpr: <slot=8, type='int8'> arg={Func(int8)::int8 arg={Var(int4): kvec=0x2800-3c00, expr='c'}}}, {SaveExpr: <slot=9, type='int8'> arg={Var(int8): kvec=0x3c00-6000, expr='d'}}, {SaveExpr: <slot=10, type='float2'> arg={Var(float2): kvec=0x6000-6c00, expr='e'}}, {SaveExpr: <slot=11, type='float8'> arg={Func(float8)::float8 arg={Var(float2): kvec=0x6000-6c00, expr='e'}}}, {SaveExpr: <slot=12, type='float4'> arg={Var(float4): kvec=0x6c00-8000, expr='f'}}, {SaveExpr: <slot=13, type='float8'> arg={Func(float8)::float8 arg={Var(float4): kvec=0x6c00-8000, expr='f'}}}, {SaveExpr: <slot=14, type='float8'> arg={Var(float8): kvec=0x8000-a400, expr='g'}}]}
         Fallback-desc: [<dest='35', expr='a', depth=0:1>, <dest='38', expr='b', depth=0:1>, <dest='41', expr='c', depth=0:1>, <dest='43', expr='d', depth=0:1>, <dest='44', expr='e', depth=0:1>, <dest='46', expr='f', depth=0:1>, <dest='48', expr='g', depth=0:1>, <dest='49', expr='id', depth=0:0>]
         Partial Function BufSz: 504
         CUDA Stack Size: 4224

SELECT 
COUNT(a) AS a_count,SUM(a) AS a_sum,AVG(a) AS a_avg,MAX(a) AS a_max,MIN(a) AS a_min,
COUNT(b) AS b_count,SUM(b) AS b_sum,AVG(b) AS b_avg,MAX(b) AS b_max,MIN(b) AS b_min,
COUNT(c) AS c_count,SUM(c) AS c_sum,AVG(c) AS c_avg,MAX(c) AS c_max,MIN(c) AS c_min,
COUNT(d) AS d_count,SUM(d) AS d_sum,AVG(d) AS d_avg,MAX(d) AS d_max,MIN(d) AS d_min,
COUNT(e) AS e_count,SUM(e) AS e_sum,AVG(e) AS e_avg,MAX(e) AS e_max,MIN(e) AS e_min,
COUNT(f) AS f_count,SUM(f) AS f_sum,AVG(f) AS f_avg,MAX(f) AS f_max,MIN(f) AS f_min,
COUNT(g) AS g_count,SUM(g) AS g_sum,AVG(g) AS g_avg,MAX(g) AS g_max,MIN(g) AS g_min
INTO TEMPORARY cached_result FROM cache_test_table WHERE id%3=0;
SELECT
COUNT(a) AS a_count,SUM(a) AS a_sum,AVG(a) AS a_avg,MAX(a) AS a_max,MIN(a) AS a_min,
COUNT(b) AS b_count,SUM(b) AS b_sum,AVG(b) AS b_avg,MAX(b) AS b_max,MIN(b) AS b_min,
COUNT(c) AS c_count,SUM(c) AS c_sum,AVG(c) AS c_avg,MAX(c) AS c_max,MIN(c) AS c_min,
COUNT(d) AS d_count,SUM(d) AS d_sum,AVG(d) AS d_avg,MAX(d) AS d_max,MIN(d) AS d_min,
COUNT(e) AS e_count,SUM(e) AS e_sum,AVG(e) AS e_avg,MAX(e) AS e_max,MIN(e) AS e_min,
COUNT(f) AS f_count,SUM(f) AS f_sum,AVG(f) AS f_avg,MAX(f) AS f_max,MIN(f) AS f_min,
COUNT(g) AS g_count,SUM(g) AS g_sum,AVG(g) AS g_avg,MAX(g) AS g_max,MIN(g) AS g_min
INTO TEMPORARY normal_result FROM normal_table WHERE id%3=0;
--clms=("a" "b" "c" "d" "e" "f" "g") ; mtds=("count" "sum" "avg" "max" "min"); for a in ${clms[@]}; do for m in ${mtds[@]}; do echo ",ABS(c.${a}_${m} - n.${a}_${m}) < 1 AS ${a}_${m}_ok" ; done ; done;
SELECT 
ABS(c.a_count - n.a_count) < 1 AS a_count_ok
,ABS(c.a_sum - n.a_sum) < 1 AS a_sum_ok
,ABS(c.a_avg - n.a_avg) < 1 AS a_avg_ok
,ABS(c.a_max - n.a_max) < 1 AS a_max_ok
,ABS(c.a_min - n.a_min) < 1 AS a_min_ok
,ABS(c.b_count - n.b_count) < 1 AS b_count_ok
,ABS(c.b_sum - n.b_sum) < 1 AS b_sum_ok
,ABS(c.b_avg - n.b_avg) < 1 AS b_avg_ok
,ABS(c.b_max - n.b_max) < 1 AS b_max_ok
,ABS(c.b_min - n.b_min) < 1 AS b_min_ok
,ABS(c.c_count - n.c_count) < 1 AS c_count_ok
,ABS(c.c_sum - n.c_sum) < 1 AS c_sum_ok
,ABS(c.c_avg - n.c_avg) < 1 AS c_avg_ok
,ABS(c.c_max - n.c_max) < 1 AS c_max_ok
,ABS(c.c_min - n.c_min) < 1 AS c_min_ok
,ABS(c.d_count - n.d_count) < 1 AS d_count_ok
,ABS(c.d_sum - n.d_sum) < 1 AS d_sum_ok
,ABS(c.d_avg - n.d_avg) < 1 AS d_avg_ok
,ABS(c.d_max - n.d_max) < 1 AS d_max_ok
,ABS(c.d_min - n.d_min) < 1 AS d_min_ok
,ABS(c.e_count - n.e_count) < 1 AS e_count_ok
,ABS(c.e_sum - n.e_sum)::float8/ABS(n.e_sum) < 0.00001 AS e_sum_ok
,ABS(c.e_avg - n.e_avg)::float8/ABS(c.e_avg) < 0.00001 AS e_avg_ok
,ABS(c.e_max - n.e_max) < 1 AS e_max_ok
,ABS(c.e_min - n.e_min) < 1 AS e_min_ok
,ABS(c.f_count - n.f_count) < 1 AS f_count_ok
,ABS(c.f_sum - n.f_sum)::float8/ABS(n.f_sum) < 0.00001 AS f_sum_ok
,ABS(c.f_avg - n.f_avg)::float8/ABS(c.f_avg) < 0.00001 AS f_avg_ok
,ABS(c.f_max - n.f_max) < 1 AS f_max_ok
,ABS(c.f_min - n.f_min) < 1 AS f_min_ok
,ABS(c.g_count - n.g_count) < 1 AS g_count_ok
,ABS(c.g_sum - n.g_sum)::float8/ABS(n.g_sum) < 0.00001 AS g_sum_ok
,ABS(c.g_avg - n.g_avg)::float8/ABS(c.g_avg) < 0.00001 AS g_avg_ok
,ABS(c.g_max - n.g_max) < 1 AS g_max_ok
,ABS(c.g_min - n.g_min) < 1 AS g_min_ok
 FROM cached_result AS c,
normal_result AS n
WHERE c.a_count = n.a_count;
 t          | t        | t        | t        | t        | t          | t        | t        | t        | t        | t          | t        | t        | t        | t        | t          | t        | t        | t        | t        | t          | t        | t        | t        | t        | t          | t        | t        | t        | t        | t          | t        | t        | t        | t

---
--- TRUNCATE
---
TRUNCATE TABLE cache_test_table;
TRUNCATE TABLE normal_table;
SELECT COUNT(*) = 0 AS ok FROM cache_test_table;
 t

SELECT COUNT(*) = 0 AS ok FROM normal_table;
 t

---
--- corruption_check
---
CREATE TABLE cache_corruption_test (
  id   int,
  a    int1,
  b    int2,
  c    int4,
  d    int8,
  e    float2,
  f    float4,
  g    float8,
  h    text,
  i    varchar(32),
  j    char(32)
);
CREATE TRIGGER row_sync_corruption AFTER INSERT OR UPDATE OR DELETE ON cache_corruption_test FOR ROW 
    EXECUTE FUNCTION pgstrom.gpucache_sync_trigger('gpu_device_id=0,max_num_rows=5000,redo_buffer_size=150m,gpu_sync_threshold=10m,gpu_sync_interval=4');
ALTER TABLE cache_corruption_test ENABLE ALWAYS TRIGGER row_sync_corruption;
-- check phase
SELECT phase FROM pgstrom.gpucache_info WHERE table_name='cache_corruption_test';

-- INSERT 4000 rows ( < max: 5000 rows )
INSERT INTO cache_corruption_test (
  SELECT x 
  ,pgstrom.random_int(1,-128,127)     -- a int1
  ,pgstrom.random_int(1,-32768,32767)  -- b int2
  ,pgstrom.random_int(1,-2147483648,2147483647)  -- c int4
  ,pgstrom.random_int(1,-9223372036854775808,9223372036854775807)   -- d int8
  ,pgstrom.random_float(0.5, -32000, 32000)   -- e float2
  ,pgstrom.random_float(0.5, -32000, 32000)   -- f float4
  ,pgstrom.random_float(0.5, -32000, 32000)   -- f float8
  ,LEFT(MD5((x%479)::TEXT),(x%32+1)::INTEGER)     -- h text
  ,LEFT(MD5((x%479+1)::TEXT),(x%32+1)::INTEGER)     -- i text
  ,LEFT(MD5((x%479+2)::TEXT),(x%32+1)::INTEGER)     -- j text
  FROM generate_series(1,4000) x
);
-- Apply to GPUCache
SELECT pgstrom.gpucache_apply_redo('cache_corruption_test') AS apply_redo_result;
 

-- phase should be 'is_ready'
SELECT phase FROM pgstrom.gpucache_info WHERE table_name='cache_corruption_test';
 is_ready

-- check GPUCache is still usable.
VACUUM ANALYZE cache_corruption_test;
EXPLAIN (costs off, verbose)
SELECT * FROM cache_corruption_test WHERE b%3=0;
 Custom Scan (GpuScan) on gpu_cache_temp_test.cache_corruption_test
   Output: id, a, b, c, d, e, f, g, h, i, j
   GPU Projection: id, a, b, c, d, e, f, g, h, i, j
   GPU Scan Quals: (((b)::integer % 3) = 0) [rows: 4000 -> 20]
   GPU Cache: GPU0 [phase: ready, max_num_rows: 5000]
   GPU Cache Options: gpu_device_id=0,max_num_rows=5000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
   KVars-Slot: <slot=0, type='int2', expr='b', kv_off=0x0000>, <slot=1, type='int4', expr='id', kv_off=0x0c00>, <slot=2, type='int1', expr='a', kv_off=0x2000>, <slot=3, type='int4', expr='c', kv_off=0x2800>, <slot=4, type='int8', expr='d', kv_off=0x3c00>, <slot=5, type='float2', expr='e', kv_off=0x6000>, <slot=6, type='float4', expr='f', kv_off=0x6c00>, <slot=7, type='float8', expr='g', kv_off=0x8000>, <slot=8, type='text', expr='h', kv_off=0xa400>, <slot=9, type='text', expr='i', kv_off=0xd800>, <slot=10, type='bpchar', expr='j', kv_off=0x10c00>
   KVecs-Buffer: nbytes: 81920, ndims: 2, items=[kvec0=<0x0000-0bff, type='int2', expr='b'>, kvec1=<0x0c00-1fff, type='int4', expr='id'>, kvec2=<0x2000-27ff, type='int1', expr='a'>, kvec3=<0x2800-3bff, type='int4', expr='c'>, kvec4=<0x3c00-5fff, type='int8', expr='d'>, kvec5=<0x6000-6bff, type='float2', expr='e'>, kvec6=<0x6c00-7fff, type='float4', expr='f'>, kvec7=<0x8000-a3ff, type='float8', expr='g'>, kvec8=<0xa400-d7ff, type='text', expr='h'>, kvec9=<0xd800-10bff, type='text', expr='i'>, kvec10=<0x10c00-13fff, type='bpchar', expr='j'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=1, type='int4' resno=1(id)>, <slot=2, type='int1' resno=2(a)>, <slot=0, type='int2' resno=3(b)>, <slot=3, type='int4' resno=4(c)>, <slot=4, type='int8' resno=5(d)>, <slot=5, type='float2' resno=6(e)>, <slot=6, type='float4' resno=7(f)>, <slot=7, type='float8' resno=8(g)>, <slot=8, type='text' resno=9(h)>, <slot=9, type='text' resno=10(i)>, <slot=10, type='bpchar' resno=11(j)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-0bff, type='int2', expr='b'>, <slot=1, offset=0x0c00-1fff, type='int4', expr='id'>, <slot=2, offset=0x2000-27ff, type='int1', expr='a'>, <slot=3, offset=0x2800-3bff, type='int4', expr='c'>, <slot=4, offset=0x3c00-5fff, type='int8', expr='d'>, <slot=5, offset=0x6000-6bff, type='float2', expr='e'>, <slot=6, offset=0x6c00-7fff, type='float4', expr='f'>, <slot=7, offset=0x8000-a3ff, type='float8', expr='g'>, <slot=8, offset=0xa400-d7ff, type='text', expr='h'>, <slot=9, offset=0xd800-10bff, type='text', expr='i'>, <slot=10, offset=0x10c00-13fff, type='bpchar', expr='j'>]}}}
   Scan Quals OpCode: {Func(bool)::int4eq args=[{Func(int4)::int4mod args=[{Func(int4)::int4 arg={Var(int2): slot=0, expr='b'}}, {Const(int4): value='3'}]}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<1,2,0,3,4,5,6,7,8,9,10> args=[{SaveExpr: <slot=1, type='int4'> arg={Var(int4): kvec=0x0c00-2000, expr='id'}}, {SaveExpr: <slot=2, type='int1'> arg={Var(int1): kvec=0x2000-2800, expr='a'}}, {SaveExpr: <slot=0, type='int2'> arg={Var(int2): kvec=0x0000-0c00, expr='b'}}, {SaveExpr: <slot=3, type='int4'> arg={Var(int4): kvec=0x2800-3c00, expr='c'}}, {SaveExpr: <slot=4, type='int8'> arg={Var(int8): kvec=0x3c00-6000, expr='d'}}, {SaveExpr: <slot=5, type='float2'> arg={Var(float2): kvec=0x6000-6c00, expr='e'}}, {SaveExpr: <slot=6, type='float4'> arg={Var(float4): kvec=0x6c00-8000, expr='f'}}, {SaveExpr: <slot=7, type='float8'> arg={Var(float8): kvec=0x8000-a400, expr='g'}}, {SaveExpr: <slot=8, type='text'> arg={Var(text): kvec=0xa400-d800, expr='h'}}, {SaveExpr: <slot=9, type='text'> arg={Var(text): kvec=0xd800-10c00, expr='i'}}, {SaveExpr: <slot=10, type='bpchar'> arg={Var(bpchar): kvec=0x10c00-14000, expr='j'}}]}
   Fallback-desc: [<dest='0', expr='id', depth=0:1>, <dest='1', expr='a', depth=0:1>, <dest='2', expr='b', depth=0:1>, <dest='3', expr='c', depth=0:1>, <dest='4', expr='d', depth=0:1>, <dest='5', expr='e', depth=0:1>, <dest='6', expr='f', depth=0:1>, <dest='7', expr='g', depth=0:1>, <dest='8', expr='h', depth=0:1>, <dest='9', expr='i', depth=0:1>, <dest='10', expr='j', depth=0:1>]
   CUDA Stack Size: 4176

-- update to make the table corrupted
UPDATE cache_corruption_test SET d=d/2 WHERE id in (SELECT id FROM cache_corruption_test LIMIT 1001);
WARNING:  gpucache: rowid exceeds max_num_rows (5000), so it is now switched to 'corrupted' state
-- Apply to GPUCache (returns error because the table is corrupted)
SELECT pgstrom.gpucache_apply_redo('cache_corruption_test') AS apply_redo_result;
 

-- phase should be 'corrupted'
SELECT phase FROM pgstrom.gpucache_info WHERE table_name='cache_corruption_test';
 corrupted

-- check GPUCache is not usable.
VACUUM ANALYZE cache_corruption_test;
EXPLAIN (costs off, verbose)
SELECT * FROM cache_corruption_test WHERE b%3=0;
 Custom Scan (GpuScan) on gpu_cache_temp_test.cache_corruption_test
   Output: id, a, b, c, d, e, f, g, h, i, j
   GPU Projection: id, a, b, c, d, e, f, g, h, i, j
   GPU Scan Quals: (((b)::integer % 3) = 0) [rows: 4000 -> 20]
   GPU Cache: GPU0 [phase: corrupted, max_num_rows: 5000]
   GPU Cache Options: gpu_device_id=0,max_num_rows=5000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
   KVars-Slot: <slot=0, type='int2', expr='b', kv_off=0x0000>, <slot=1, type='int4', expr='id', kv_off=0x0c00>, <slot=2, type='int1', expr='a', kv_off=0x2000>, <slot=3, type='int4', expr='c', kv_off=0x2800>, <slot=4, type='int8', expr='d', kv_off=0x3c00>, <slot=5, type='float2', expr='e', kv_off=0x6000>, <slot=6, type='float4', expr='f', kv_off=0x6c00>, <slot=7, type='float8', expr='g', kv_off=0x8000>, <slot=8, type='text', expr='h', kv_off=0xa400>, <slot=9, type='text', expr='i', kv_off=0xd800>, <slot=10, type='bpchar', expr='j', kv_off=0x10c00>
   KVecs-Buffer: nbytes: 81920, ndims: 2, items=[kvec0=<0x0000-0bff, type='int2', expr='b'>, kvec1=<0x0c00-1fff, type='int4', expr='id'>, kvec2=<0x2000-27ff, type='int1', expr='a'>, kvec3=<0x2800-3bff, type='int4', expr='c'>, kvec4=<0x3c00-5fff, type='int8', expr='d'>, kvec5=<0x6000-6bff, type='float2', expr='e'>, kvec6=<0x6c00-7fff, type='float4', expr='f'>, kvec7=<0x8000-a3ff, type='float8', expr='g'>, kvec8=<0xa400-d7ff, type='text', expr='h'>, kvec9=<0xd800-10bff, type='text', expr='i'>, kvec10=<0x10c00-13fff, type='bpchar', expr='j'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=1, type='int4' resno=1(id)>, <slot=2, type='int1' resno=2(a)>, <slot=0, type='int2' resno=3(b)>, <slot=3, type='int4' resno=4(c)>, <slot=4, type='int8' resno=5(d)>, <slot=5, type='float2' resno=6(e)>, <slot=6, type='float4' resno=7(f)>, <slot=7, type='float8' resno=8(g)>, <slot=8, type='text' resno=9(h)>, <slot=9, type='text' resno=10(i)>, <slot=10, type='bpchar' resno=11(j)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-0bff, type='int2', expr='b'>, <slot=1, offset=0x0c00-1fff, type='int4', expr='id'>, <slot=2, offset=0x2000-27ff, type='int1', expr='a'>, <slot=3, offset=0x2800-3bff, type='int4', expr='c'>, <slot=4, offset=0x3c00-5fff, type='int8', expr='d'>, <slot=5, offset=0x6000-6bff, type='float2', expr='e'>, <slot=6, offset=0x6c00-7fff, type='float4', expr='f'>, <slot=7, offset=0x8000-a3ff, type='float8', expr='g'>, <slot=8, offset=0xa400-d7ff, type='text', expr='h'>, <slot=9, offset=0xd800-10bff, type='text', expr='i'>, <slot=10, offset=0x10c00-13fff, type='bpchar', expr='j'>]}}}
   Scan Quals OpCode: {Func(bool)::int4eq args=[{Func(int4)::int4mod args=[{Func(int4)::int4 arg={Var(int2): slot=0, expr='b'}}, {Const(int4): value='3'}]}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<1,2,0,3,4,5,6,7,8,9,10> args=[{SaveExpr: <slot=1, type='int4'> arg={Var(int4): kvec=0x0c00-2000, expr='id'}}, {SaveExpr: <slot=2, type='int1'> arg={Var(int1): kvec=0x2000-2800, expr='a'}}, {SaveExpr: <slot=0, type='int2'> arg={Var(int2): kvec=0x0000-0c00, expr='b'}}, {SaveExpr: <slot=3, type='int4'> arg={Var(int4): kvec=0x2800-3c00, expr='c'}}, {SaveExpr: <slot=4, type='int8'> arg={Var(int8): kvec=0x3c00-6000, expr='d'}}, {SaveExpr: <slot=5, type='float2'> arg={Var(float2): kvec=0x6000-6c00, expr='e'}}, {SaveExpr: <slot=6, type='float4'> arg={Var(float4): kvec=0x6c00-8000, expr='f'}}, {SaveExpr: <slot=7, type='float8'> arg={Var(float8): kvec=0x8000-a400, expr='g'}}, {SaveExpr: <slot=8, type='text'> arg={Var(text): kvec=0xa400-d800, expr='h'}}, {SaveExpr: <slot=9, type='text'> arg={Var(text): kvec=0xd800-10c00, expr='i'}}, {SaveExpr: <slot=10, type='bpchar'> arg={Var(bpchar): kvec=0x10c00-14000, expr='j'}}]}
   Fallback-desc: [<dest='0', expr='id', depth=0:1>, <dest='1', expr='a', depth=0:1>, <dest='2', expr='b', depth=0:1>, <dest='3', expr='c', depth=0:1>, <dest='4', expr='d', depth=0:1>, <dest='5', expr='e', depth=0:1>, <dest='6', expr='f', depth=0:1>, <dest='7', expr='g', depth=0:1>, <dest='8', expr='h', depth=0:1>, <dest='9', expr='i', depth=0:1>, <dest='10', expr='j', depth=0:1>]
   CUDA Stack Size: 4176

-- Recover GPUCache
SELECT pgstrom.gpucache_recovery('cache_corruption_test');
 

-- phase should be is_ready
SELECT phase FROM pgstrom.gpucache_info WHERE table_name='cache_corruption_test';
 is_empty

VACUUM ANALYZE cache_corruption_test;
EXPLAIN (costs off, verbose)
SELECT count(*) FROM cache_corruption_test;
 Aggregate
   Output: pgstrom.fcount((pgstrom.nrows()))
   ->  Custom Scan (GpuPreAgg) on gpu_cache_temp_test.cache_corruption_test
         Output: (pgstrom.nrows())
         GPU Projection: pgstrom.nrows()
         GPU Cache: GPU0 [phase: empty, max_num_rows: 5000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=5000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760
         KVars-Slot: 
         Partial Aggregation OpCode: {AggFuncs <nrows[*]>}
         Fallback-desc: []
         Partial Function BufSz: 8
         CUDA Stack Size: 3856

-- cleanup temporary resource
SET client_min_messages = error;
DROP SCHEMA gpu_cache_temp_test CASCADE;
-- Checking GPUCache is removed correctly.
SELECT count(*) = 0 AS ok FROM pgstrom.gpucache_info WHERE table_name in ('cache_test_table','cache_corruption_test') AND database_name=current_database();
 t

