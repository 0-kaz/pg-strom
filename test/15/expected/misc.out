---
--- Misc tests according to issues
---
SET pg_strom.regression_test_mode = on;
SET client_min_messages = error;
DROP SCHEMA IF EXISTS regtest_miscs CASCADE;
CREATE SCHEMA regtest_miscs;
SET search_path = regtest_miscs,public;
SET pg_strom.enabled=on;
SET enable_seqscan=0;
-- #624
CREATE TABLE t1(c0 money , c1 money);
INSERT INTO t1(c0, c1) VALUES(1, 1);
EXPLAIN(costs off, verbose)
SELECT SUM(t1.c1) FROM t1;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.sum_cash((pgstrom.psum(c1)))
   ->  Custom Scan (GpuPreAgg) on regtest_miscs.t1
         Output: (pgstrom.psum(c1))
         GPU Projection: pgstrom.psum(c1)
         KVars-Slot: <slot=0, type='money', expr='c1'>
         KVecs-Buffer: nbytes: 18432, ndims: 2, item=kvec0=<0x0000-47ff, type='money', expr='c1'>
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='money' resno=2(c1)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-47ff, type='money', expr='c1'>]}}}
         Partial Aggregation OpCode: {AggFuncs <psum::int[slot=0, expr='c1']> arg={SaveExpr: <slot=0, type='money'> arg={Var(money): kvec=0x0000-4800, expr='c1'}}}
         Partial Function BufSz: 16
         CUDA Stack Size: 3888
(12 rows)

SELECT SUM(t1.c1) FROM t1;
  sum  
-------
 $1.00
(1 row)

-- #625
DROP TABLE IF EXISTS t0;
DROP TABLE IF EXISTS t1;
CREATE TABLE t0(c0 int , c1 int);
INSERT INTO t0(c0, c1) VALUES(0, 1);
CREATE TABLE t1(LIKE t0);
ALTER TABLE t0 DROP c1;
EXPLAIN(costs off, verbose)
SELECT * FROM t1 LEFT OUTER JOIN t0 ON (t1.c0 = t1.c1);
                                                                                                                                                        QUERY PLAN                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuJoin) on regtest_miscs.t0
   Output: t1.c0, t1.c1, t0.c0
   GPU Projection: t1.c0, t1.c1, t0.c0
   GPU Right Outer Join Quals [1]: (t1.c0 = t1.c1) ... [nrows: 2550 -> 28815]
   KVars-Slot: <slot=0, type='int4', expr='t1.c0'>, <slot=1, type='int4', expr='t1.c1'>, <slot=2, type='int4', expr='t0.c0'>
   KVecs-Buffer: nbytes: 30720, ndims: 3, items=[kvec0=<0x0000-27ff, type='int4', expr='c0'>, kvec1=<0x2800-4fff, type='int4', expr='c1'>, kvec2=<0x5000-77ff, type='int4', expr='c0'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=2, type='int4' resno=1(c0)>]}, items[1]={LoadVars(depth=1): kvars=[<slot=0, type='int4' resno=1(c0)>, <slot=1, type='int4' resno=2(c1)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=2, offset=0x5000-77ff, type='int4', expr='c0'>]}}, items[1]={MoveVars(depth=1): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='c0'>, <slot=1, offset=0x2800-4fff, type='int4', expr='c1'>, <offset=0x5000-77ff, type='int4', expr='c0'>]}}}
   Join Quals OpCode: {Packed items[1]={JoinQuals:  {Func(bool)::int4eq args=[{Var(int4): slot=0, expr='c0'}, {Var(int4): slot=1, expr='c1'}]}}}
   Projection OpCode: {Projection: layout=<0,1,2> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='c0'}}, {SaveExpr: <slot=1, type='int4'> arg={Var(int4): kvec=0x2800-5000, expr='c1'}}, {SaveExpr: <slot=2, type='int4'> arg={Var(int4): kvec=0x5000-7800, expr='c0'}}]}
   CUDA Stack Size: 3936
   ->  Seq Scan on regtest_miscs.t1
         Output: t1.c0, t1.c1
(13 rows)

SELECT * FROM t1 LEFT OUTER JOIN t0 ON (t1.c0 = t1.c1);
 c0 | c1 | c0 
----+----+----
(0 rows)

-- #626
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;
CREATE TABLE t1(c0 INT);
CREATE TABLE t2(LIKE t1);
INSERT INTO t2(c0) VALUES(1);
INSERT INTO t1(c0) VALUES(1);
EXPLAIN(costs off, verbose)
SELECT t2.c0 FROM t1 RIGHT OUTER JOIN t2 ON ((CAST(0.1 AS MONEY)) IN (CAST(0.1 AS MONEY)));
                  QUERY PLAN                  
----------------------------------------------
 Nested Loop Left Join
   Output: t2.c0
   Join Filter: ((0.1)::money = (0.1)::money)
   ->  Seq Scan on regtest_miscs.t2
         Output: t2.c0
   ->  Materialize
         ->  Seq Scan on regtest_miscs.t1
(7 rows)

SELECT t2.c0 FROM t1 RIGHT OUTER JOIN t2 ON ((CAST(0.1 AS MONEY)) IN (CAST(0.1 AS MONEY)));
 c0 
----
  1
(1 row)

-- #627
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;
CREATE TABLE t1(c0 INT);
CREATE TABLE t2(LIKE t1);
INSERT INTO t2(c0) VALUES(1);
INSERT INTO t1(c0) VALUES(1);
EXPLAIN(costs off, verbose)
SELECT t2 FROM t1 RIGHT OUTER JOIN t2 ON ((CAST(0.1 AS MONEY)) IN (CAST(0.1 AS MONEY)));
                  QUERY PLAN                  
----------------------------------------------
 Nested Loop Left Join
   Output: t2.*
   Join Filter: ((0.1)::money = (0.1)::money)
   ->  Seq Scan on regtest_miscs.t2
         Output: t2.*
   ->  Materialize
         ->  Seq Scan on regtest_miscs.t1
(7 rows)

SELECT t2 FROM t1 RIGHT OUTER JOIN t2 ON ((CAST(0.1 AS MONEY)) IN (CAST(0.1 AS MONEY)));
 t2  
-----
 (1)
(1 row)

-- #628
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;
CREATE TABLE t1(c0 INT);
CREATE TABLE t2(LIKE t1);
INSERT INTO t2(c0) VALUES(1);
INSERT INTO t1(c0) VALUES(1);
EXPLAIN(costs off, verbose)
SELECT t1.c0 FROM t1 RIGHT OUTER JOIN t2 ON ((CAST(0.1 AS MONEY)) NOT IN (CAST(0.1 AS MONEY)));
                  QUERY PLAN                   
-----------------------------------------------
 Nested Loop Left Join
   Output: t1.c0
   Join Filter: ((0.1)::money <> (0.1)::money)
   ->  Seq Scan on regtest_miscs.t2
         Output: t2.c0
   ->  Materialize
         Output: t1.c0
         ->  Seq Scan on regtest_miscs.t1
               Output: t1.c0
(9 rows)

SELECT t1.c0 FROM t1 RIGHT OUTER JOIN t2 ON ((CAST(0.1 AS MONEY)) NOT IN (CAST(0.1 AS MONEY)));
 c0 
----
   
(1 row)

-- #630
DROP TABLE IF EXISTS t0;
DROP TABLE IF EXISTS t1;
CREATE TABLE t0(c0 money , c1 boolean);
CREATE TABLE t1(LIKE t0);
INSERT INTO t0(c0, c1) VALUES((1)::MONEY, TRUE);
INSERT INTO t1(c0, c1) VALUES((1)::MONEY, TRUE);
EXPLAIN(costs off, verbose)
SELECT SUM(t1.c0) FROM t1 LEFT OUTER JOIN t0 ON ((t0.c0)IS DISTINCT FROM(CAST(1.0E1 AS MONEY))) WHERE (t0.c1) IS NULL;
                                                                                                      QUERY PLAN                                                                                                      
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.sum_cash((pgstrom.psum(t1.c0)))
   ->  Custom Scan (GpuPreAgg) on regtest_miscs.t1
         Output: (pgstrom.psum(t1.c0))
         GPU Projection: pgstrom.psum(t1.c0)
         GPU Left Outer Join Quals [1]: [(t0.c1 IS NULL)] ... [nrows: 2200 -> 24079]
         KVars-Slot: <slot=0, type='money', expr='t1.c0'>, <slot=1, type='bool', expr='t0.c1'>
         KVecs-Buffer: nbytes: 22528, ndims: 3, items=[kvec0=<0x0000-47ff, type='money', expr='c0'>, kvec1=<0x4800-57ff, type='bool', expr='c1'>]
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='money' resno=1(c0)>]}, items[1]={LoadVars(depth=1): kvars=[<slot=1, type='bool' resno=1(c1)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-47ff, type='money', expr='c0'>]}}, items[1]={MoveVars(depth=1): items=[<offset=0x0000-47ff, type='money', expr='c0'>]}}}
         Join Quals OpCode: {Packed items[1]={JoinQuals:  <{IsNull arg={Var(bool): slot=1, expr='c1'}}>}}
         Partial Aggregation OpCode: {AggFuncs <psum::int[slot=0, expr='c0']> arg={SaveExpr: <slot=0, type='money'> arg={Var(money): kvec=0x0000-4800, expr='c0'}}}
         Partial Function BufSz: 16
         CUDA Stack Size: 3904
         ->  Custom Scan (GpuScan) on regtest_miscs.t0
               Output: t0.c1
               GPU Projection: c1
               GPU Scan Quals: (c0 IS DISTINCT FROM ('10'::numeric)::money) [rows: 2200 -> 2189]
               KVars-Slot: <slot=0, type='money', expr='c0'>, <slot=1, type='bool', expr='c1'>
               KVecs-Buffer: nbytes: 22528, ndims: 2, items=[kvec0=<0x0000-47ff, type='money', expr='c0'>, kvec1=<0x4800-57ff, type='bool', expr='c1'>]
               LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='money' resno=1(c0)>, <slot=1, type='bool' resno=2(c1)>]}}
               MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=1, offset=0x4800-57ff, type='bool', expr='c1'>]}}}
               Scan Quals OpCode: {DistinctFrom arg={Func(bool)::cash_eq args=[{Var(money): slot=0, expr='c0'}, {Func(money)::money arg={Const(numeric): value='10'}}]}}
               Projection OpCode: {Projection: layout=<1> arg={SaveExpr: <slot=1, type='bool'> arg={Var(bool): kvec=0x4800-5800, expr='c1'}}}
               CUDA Stack Size: 3904
(25 rows)

SELECT SUM(t1.c0) FROM t1 LEFT OUTER JOIN t0 ON ((t0.c0)IS DISTINCT FROM(CAST(1.0E1 AS MONEY))) WHERE (t0.c1) IS NULL;
 sum 
-----
    
(1 row)

-- #631
DROP TABLE IF EXISTS t0;
DROP TABLE IF EXISTS t1;
create table t0 (
"c0" bigint ,
"c1" float ,
"c2" decimal(40, 20) 
);
insert into t0 values (0.1,1,0.1);
create table t1 (
"c0" bigint ,
"c1" float ,
"c2" decimal(40, 20) 
);
insert into t1 values (0.1,1,0.1);
EXPLAIN(costs off, verbose)
WITH MYWITH AS (SELECT 1 AS f1
   FROM  (SELECT "c2" AS f6 FROM t0) AS t1 
    INNER JOIN  (SELECT "c1" AS f5 FROM t1) AS t2  
    ON (( ((f5)  IN (f6))) AND ((1 > ((f6)::bigint >> 5)) IS FALSE)))
SELECT * FROM MYWITH;
                                                                                                        QUERY PLAN                                                                                                         
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuJoin) on regtest_miscs.t1
   Output: 1
   GPU Projection: 
   GPU Join Quals [1]: ((t0.c2)::double precision = t1.c1) ... [nrows: 1100 -> 4032]
   GPU Outer Hash [1]: t1.c1
   GPU Inner Hash [1]: (t0.c2)::double precision
   KVars-Slot: <slot=0, type='numeric', expr='t0.c2'>, <slot=1, type='float8', expr='t1.c1'>
   KVecs-Buffer: nbytes: 75776, ndims: 3, items=[kvec0=<0x0000-dfff, type='numeric', expr='c2'>, kvec1=<0xe000-127ff, type='float8', expr='c1'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=1, type='float8' resno=2(c1)>]}, items[1]={LoadVars(depth=1): kvars=[<slot=0, type='numeric' resno=1(c2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=1, offset=0xe000-127ff, type='float8', expr='c1'>]}}}
   Join Quals OpCode: {Packed items[1]={JoinQuals:  {Func(bool)::float8eq args=[{Func(float8)::float8 arg={Var(numeric): slot=0, expr='c2'}}, {Var(float8): kvec=0xe000-12800, expr='c1'}]}}}
   Join HashValue OpCode: {Packed items[1]={HashValue arg={Var(float8): kvec=0xe000-12800, expr='c1'}}}
   Projection OpCode: {Projection: layout=<>}
   CUDA Stack Size: 3920
   ->  Custom Scan (GpuScan) on regtest_miscs.t0
         Output: t0.c2
         GPU Projection: c2
         GPU Scan Quals: ((1 > ((c2)::bigint >> 5)) IS FALSE) [rows: 1100 -> 733]
         KVars-Slot: <slot=0, type='numeric', expr='c2'>
         KVecs-Buffer: nbytes: 57344, ndims: 2, item=kvec0=<0x0000-dfff, type='numeric', expr='c2'>
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='numeric' resno=3(c2)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-dfff, type='numeric', expr='c2'>]}}}
         Scan Quals OpCode: {BoolTest::IsFalse arg={Func(bool)::int48gt args=[{Const(int4): value='1'}, {Func(int8)::int8shr args=[{Func(int8)::int8 arg={Var(numeric): slot=0, expr='c2'}}, {Const(int4): value='5'}]}]}}
         Projection OpCode: {Projection: layout=<0> arg={SaveExpr: <slot=0, type='numeric'> arg={Var(numeric): kvec=0x0000-e000, expr='c2'}}}
         CUDA Stack Size: 3904
(25 rows)

WITH MYWITH AS (SELECT 1 AS f1
   FROM  (SELECT "c2" AS f6 FROM t0) AS t1 
    INNER JOIN  (SELECT "c1" AS f5 FROM t1) AS t2  
    ON (( ((f5)  IN (f6))) AND ((1 > ((f6)::bigint >> 5)) IS FALSE)))
SELECT * FROM MYWITH;
 f1 
----
(0 rows)

-- #632
DROP TABLE IF EXISTS t0;
create table t0 (c1 float, c2 decimal(40, 20));
insert into t0 values (1,0.1);
SELECT * FROM
        (SELECT c2 AS f1,
                c1 AS f2
         FROM t0) AS t3
      WHERE((f2) IN (f2, 1))
        AND (NOT (f1 = ALL
                    (SELECT c2
                     FROM t0)));
 f1 | f2 
----+----
(0 rows)

-- #633
DROP TABLE IF EXISTS t0;
CREATE TABLE t0(c0 INT );
INSERT INTO t0(c0) VALUES(1);
SELECT AVG(0.1) FROM t0 GROUP BY t0.c0;
          avg           
------------------------
 0.10000000000000000000
(1 row)

-- #634
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;
CREATE TABLE t1(c0 int);
CREATE TABLE t2(LIKE t1);
INSERT INTO t1(c0) VALUES(1);
INSERT INTO t2(c0) VALUES(1);
SELECT MIN(t2.c0)
FROM t2
LEFT OUTER JOIN
    (SELECT c0 FROM t1) AS sub0 
        ON (t2.c0 > 0) 
GROUP BY (t2.c0)
HAVING BOOL_AND(TRUE);
 min 
-----
   1
(1 row)

-- #635
DROP TABLE IF EXISTS t0;
CREATE TABLE t0(c0 int , c1 int );
INSERT INTO t0(c0, c1) VALUES(1, 1);
SELECT MIN(c0) FROM t0 GROUP BY t0.c0 HAVING CAST((MIN('1')) AS BOOLEAN);
 min 
-----
   1
(1 row)

-- #636
DROP TABLE IF EXISTS t0;
CREATE TABLE t0(c0 INT , c1 INT  PRIMARY KEY );
INSERT INTO t0(c1, c0) VALUES(1, 1);
SELECT MAX(c0) FROM t0 GROUP BY t0.c1 HAVING t0.c0<MIN(t0.c0);
 max 
-----
(0 rows)

-- #637
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(c0 int) USING heap;
INSERT INTO t1(c0) VALUES(1);
SELECT c0 FROM t1 GROUP BY t1.c0 HAVING NOT (MIN(65536))::BOOLEAN;
 c0 
----
(0 rows)

-- #638
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(c0 int) USING heap;
INSERT INTO t1(c0) VALUES(1);
SELECT MIN(1) FROM t1 GROUP BY t1.c0 HAVING NOT (MIN(1))::BOOLEAN;
 min 
-----
(0 rows)

-- #639
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;
CREATE TABLE t1(c0 int);
CREATE TABLE t2(LIKE t1);
INSERT INTO t1(c0) VALUES(1);
INSERT INTO t2(c0) VALUES(1);
SELECT MIN(t2.c0)
FROM t2
LEFT OUTER JOIN
    (SELECT c0 FROM t1) AS sub0 
        ON t2.c0 > 0 
GROUP BY (t2.c0)
HAVING TRUE;
 min 
-----
   1
(1 row)

-- #642
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;
CREATE TABLE t1(c0 int);
CREATE TABLE t2(LIKE t1);
INSERT INTO t1(c0) VALUES(1);
INSERT INTO t2(c0) VALUES(1);
SELECT MIN(t2.c0)
FROM t2
LEFT OUTER JOIN
    (SELECT c0 FROM t1) AS sub0 
        ON t2.c0 > 0 
GROUP BY (t2.c0)
HAVING TRUE;
 min 
-----
   1
(1 row)

-- #643
DROP TABLE IF EXISTS t0;
DROP TABLE IF EXISTS t1;
CREATE TABLE t0(c0 int, UNIQUE(c0));
CREATE TABLE t1(LIKE t0);
INSERT INTO t0 VALUES(1);
INSERT INTO t1 VALUES(1);
SELECT * FROM t0 LEFT OUTER JOIN t1 ON FALSE CROSS JOIN (SELECT * FROM t0, t1 WHERE TRUE ORDER BY t0.c0 ASC, t1.c0 DESC) AS sub;
 c0 | c0 | c0 | c0 
----+----+----+----
  1 |    |  1 |  1
(1 row)

-- #644
DROP TABLE IF EXISTS t0;
DROP TABLE IF EXISTS t1;
CREATE TABLE t0(c0 DECIMAL) ;
CREATE TABLE t1(LIKE t0);
INSERT INTO t0(c0) VALUES(NULL);
INSERT INTO t1(c0) VALUES(NULL);
SELECT * FROM t0 RIGHT OUTER JOIN t1 ON ((t1.c0)::INT) IS NULL;
 c0 | c0 
----+----
    |   
(1 row)

-- #645
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t3;
CREATE TABLE t1(c0 int);
CREATE TABLE t3(LIKE t1);
INSERT INTO t1(c0) VALUES(1);
INSERT INTO t3(c0) VALUES(1);
SELECT (((t1.c0) BETWEEN SYMMETRIC 0 AND 1)OR(((0.1)::MONEY) IN (CAST(0.1 AS MONEY), CAST(0.0 AS MONEY)))) FROM t1, t3 WHERE (t1.c0) BETWEEN SYMMETRIC (0) AND (t3.c0);
 ?column? 
----------
 t
(1 row)

-- #646
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;
DROP TABLE IF EXISTS t3;
CREATE TABLE t1(c0 CHAR, c1 DECIMAL);
CREATE TABLE t2(LIKE t1);
CREATE TABLE t3(LIKE t1);
INSERT INTO t3(c0, c1) VALUES(B'1', 0.5);
INSERT INTO t2(c0, c1) VALUES(B'1', 0.7);
INSERT INTO t1(c0) VALUES(B'1');
SELECT ('[0,1)'::int4range), (t1.c1)::INT FROM t1, t2, t3 WHERE ((t3.c1)!=(t2.c1));
 int4range | c1 
-----------+----
 [0,1)     |   
(1 row)

-- #647
DROP TABLE IF EXISTS t0;
DROP TABLE IF EXISTS t1;
CREATE TABLE t0(c0 int , c1 int);
CREATE TABLE t1(LIKE t0);
INSERT INTO t0(c0, c1) VALUES(1, 0), (1, 0);
INSERT INTO t1(c0, c1) VALUES(1, 0);
SELECT * FROM t1, t0 WHERE ((t1.c1) IS NOT DISTINCT FROM (t0.c1)) IS TRUE;
 c0 | c1 | c0 | c1 
----+----+----+----
  1 |  0 |  1 |  0
  1 |  0 |  1 |  0
(2 rows)

-- #648
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;
CREATE TABLE t1(c0 money , c1 int4range);
CREATE TABLE t2(LIKE t1);
INSERT INTO t1(c0, c1) VALUES(CAST(0.5 AS MONEY), ('[0,1]'::int4range));
INSERT INTO t2(c1, c0) VALUES('[0,1]'::int4range, (0.7)::MONEY);
EXPLAIN(costs off, verbose)
SELECT t1.c0 FROM t2, t1 WHERE (t2.c0) BETWEEN SYMMETRIC (t1.c0) AND ((0.9)::MONEY);


 Custom Scan (GpuJoin) on regtest_miscs.t1
   Output: t1.c0
   GPU Projection: t1.c0
   GPU Join Quals [1]: (((t2.c0 >= t1.c0) AND (t2.c0 <= (0.9)::money)) OR ((t2.c0 >= (0.9)::money) AND (t2.c0 <= t1.c0))) ... [nrows: 1200 -> 302373]
   KVars-Slot: <slot=0, type='money', expr='t1.c0'>, <slot=1, type='money', expr='t2.c0'>
   KVecs-Buffer: nbytes: 36864, ndims: 3, items=[kvec0=<0x0000-47ff, type='money', expr='c0'>, kvec1=<0x4800-8fff, type='money', expr='c0'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='money' resno=1(c0)>]}, items[1]={LoadVars(depth=1): kvars=[<slot=1, type='money' resno=1(c0)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-47ff, type='money', expr='c0'>]}}, items[1]={MoveVars(depth=1): items=[<offset=0x0000-47ff, type='money', expr='c0'>]}}}
   Join Quals OpCode: {Packed items[1]={JoinQuals:  {Bool::OR args=[{Bool::AND args=[{Func(bool)::cash_ge args=[{Var(money): slot=1, expr='c0'}, {Var(money): kvec=0x0000-4800, expr='c0'}]}, {Func(bool)::cash_le args=[{Var(money): slot=1, expr='c0'}, {Func(money)::money arg={Const(numeric): value='0.9'}}]}]}, {Bool::AND args=[{Func(bool)::cash_ge args=[{Var(money): slot=1, expr='c0'}, {Func(money)::money arg={Const(numeric): value='0.9'}}]}, {Func(bool)::cash_le args=[{Var(money): slot=1, expr='c0'}, {Var(money): kvec=0x0000-4800, expr='c0'}]}]}]}}}
   Projection OpCode: {Projection: layout=<0> arg={SaveExpr: <slot=0, type='money'> arg={Var(money): kvec=0x0000-4800, expr='c0'}}}
   CUDA Stack Size: 3904
   ->  Custom Scan (GpuScan) on regtest_miscs.t2
         Output: t2.c0
         GPU Projection: c0
         GPU Scan Quals: ((c0 <= (0.9)::money) OR (c0 >= (0.9)::money)) [rows: 1200 -> 667]
         KVars-Slot: <slot=0, type='money', expr='c0'>
         KVecs-Buffer: nbytes: 18432, ndims: 2, item=kvec0=<0x0000-47ff, type='money', expr='c0'>
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='money' resno=1(c0)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-47ff, type='money', expr='c0'>]}}}
         Scan Quals OpCode: {Bool::OR args=[{Func(bool)::cash_le args=[{Var(money): slot=0, expr='c0'}, {Func(money)::money arg={Const(numeric): value='0.9'}}]}, {Func(bool)::cash_ge args=[{Var(money): slot=0, expr='c0'}, {Func(money)::money arg={Const(numeric): value='0.9'}}]}]}
         Projection OpCode: {Projection: layout=<0> arg={SaveExpr: <slot=0, type='money'> arg={Var(money): kvec=0x0000-4800, expr='c0'}}}
         CUDA Stack Size: 3888
(22 rows)

SELECT t1.c0 FROM t2, t1 WHERE (t2.c0) BETWEEN SYMMETRIC (t1.c0) AND ((0.9)::MONEY);
  c0   
-------
 $0.50
(1 row)

-- #649
DROP TABLE IF EXISTS t0;
DROP TABLE IF EXISTS t1;
CREATE TABLE t0(c0 money);
CREATE TABLE t1(LIKE t0);
VACUUM FREEZE ANALYZE t1(c0);
INSERT INTO t1(c0) VALUES((0.1)::MONEY);
INSERT INTO t0(c0) VALUES((0.1)::MONEY);
EXPLAIN(costs off, verbose)
SELECT * FROM t1, t0 WHERE (t0.c0) BETWEEN (t1.c0) AND (CAST(0.8 AS MONEY));
                                                                                                                              QUERY PLAN                                                                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuJoin) on regtest_miscs.t1
   Output: t1.c0, t0.c0
   GPU Projection: t1.c0, t0.c0
   GPU Join Quals [1]: (t0.c0 >= t1.c0) ... [nrows: 226 -> 56726]
   KVars-Slot: <slot=0, type='money', expr='t1.c0'>, <slot=1, type='money', expr='t0.c0'>
   KVecs-Buffer: nbytes: 36864, ndims: 3, items=[kvec0=<0x0000-47ff, type='money', expr='c0'>, kvec1=<0x4800-8fff, type='money', expr='c0'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='money' resno=1(c0)>]}, items[1]={LoadVars(depth=1): kvars=[<slot=1, type='money' resno=1(c0)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-47ff, type='money', expr='c0'>]}}, items[1]={MoveVars(depth=1): items=[<offset=0x0000-47ff, type='money', expr='c0'>, <slot=1, offset=0x4800-8fff, type='money', expr='c0'>]}}}
   Join Quals OpCode: {Packed items[1]={JoinQuals:  {Func(bool)::cash_ge args=[{Var(money): slot=1, expr='c0'}, {Var(money): kvec=0x0000-4800, expr='c0'}]}}}
   Projection OpCode: {Projection: layout=<0,1> args=[{SaveExpr: <slot=0, type='money'> arg={Var(money): kvec=0x0000-4800, expr='c0'}}, {SaveExpr: <slot=1, type='money'> arg={Var(money): kvec=0x4800-9000, expr='c0'}}]}
   CUDA Stack Size: 3904
   ->  Custom Scan (GpuScan) on regtest_miscs.t0
         Output: t0.c0
         GPU Projection: c0
         GPU Scan Quals: (c0 <= (0.8)::money) [rows: 2260 -> 753]
         KVars-Slot: <slot=0, type='money', expr='c0'>
         KVecs-Buffer: nbytes: 18432, ndims: 2, item=kvec0=<0x0000-47ff, type='money', expr='c0'>
         LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='money' resno=1(c0)>]}}
         MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-47ff, type='money', expr='c0'>]}}}
         Scan Quals OpCode: {Func(bool)::cash_le args=[{Var(money): slot=0, expr='c0'}, {Func(money)::money arg={Const(numeric): value='0.8'}}]}
         Projection OpCode: {Projection: layout=<0> arg={SaveExpr: <slot=0, type='money'> arg={Var(money): kvec=0x0000-4800, expr='c0'}}}
         CUDA Stack Size: 3888
(22 rows)

SELECT * FROM t1, t0 WHERE (t0.c0) BETWEEN (t1.c0) AND (CAST(0.8 AS MONEY));
  c0   |  c0   
-------+-------
 $0.10 | $0.10
(1 row)

-- #650
DROP TABLE IF EXISTS t0;
DROP TABLE IF EXISTS t1;
CREATE TABLE t0(c0 REAL);
CREATE TABLE t1(c0 boolean);
INSERT INTO t1(c0) VALUES(null);
INSERT INTO t0(c0) VALUES(0.1);
EXPLAIN(costs off, verbose)
SELECT * FROM t0,t1 WHERE ((t0.c0)::INT IS NOT DISTINCT FROM (t0.c0)) OR (t1.c0);
                                                                                                                                               QUERY PLAN                                                                                                                                                
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuJoin) on regtest_miscs.t1
   Output: t0.c0, t1.c0
   GPU Projection: t0.c0, t1.c0
   GPU Join Quals [1]: ((NOT (((t0.c0)::integer)::double precision IS DISTINCT FROM t0.c0)) OR t1.c0) ... [nrows: 2810 -> 3600664]
   KVars-Slot: <slot=0, type='float4', expr='t0.c0'>, <slot=1, type='bool', expr='t1.c0'>
   KVecs-Buffer: nbytes: 14336, ndims: 3, items=[kvec0=<0x0000-27ff, type='float4', expr='c0'>, kvec1=<0x2800-37ff, type='bool', expr='c0'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=1, type='bool' resno=1(c0)>]}, items[1]={LoadVars(depth=1): kvars=[<slot=0, type='float4' resno=1(c0)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=1, offset=0x2800-37ff, type='bool', expr='c0'>]}}, items[1]={MoveVars(depth=1): items=[<slot=0, offset=0x0000-27ff, type='float4', expr='c0'>, <offset=0x2800-37ff, type='bool', expr='c0'>]}}}
   Join Quals OpCode: {Packed items[1]={JoinQuals:  {Bool::OR args=[{Bool::NOT arg={DistinctFrom arg={Func(bool)::float84eq args=[{Func(float8)::float8 arg={Func(int4)::int4 arg={Var(float4): slot=0, expr='c0'}}}, {Var(float4): slot=0, expr='c0'}]}}}, {Var(bool): kvec=0x2800-3800, expr='c0'}]}}}
   Projection OpCode: {Projection: layout=<0,1> args=[{SaveExpr: <slot=0, type='float4'> arg={Var(float4): kvec=0x0000-2800, expr='c0'}}, {SaveExpr: <slot=1, type='bool'> arg={Var(bool): kvec=0x2800-3800, expr='c0'}}]}
   CUDA Stack Size: 3904
   ->  Seq Scan on regtest_miscs.t0
         Output: t0.c0
(13 rows)

SELECT * FROM t0,t1 WHERE ((t0.c0)::INT IS NOT DISTINCT FROM (t0.c0)) OR (t1.c0);
 c0 | c0 
----+----
(0 rows)

-- #679
DROP TABLE IF EXISTS t0;
DROP TABLE IF EXISTS t1;
CREATE TABLE t0(c0 serial CHECK(true) NO INHERIT UNIQUE PRIMARY KEY) ;
CREATE TABLE t1(LIKE t0);
INSERT INTO t0(c0) VALUES(1);
INSERT INTO t1(c0) VALUES(1);
EXPLAIN(costs off, verbose)
SELECT * FROM t0 RIGHT OUTER JOIN (SELECT * FROM t1, t0 ORDER BY t0.c0 DESC, t1.c0 DESC) AS sub0 ON FALSE;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Nested Loop Left Join
   Output: c0, t1.c0, t0.c0
   Join Filter: false
   ->  Incremental Sort
         Output: t1.c0, t0.c0
         Sort Key: t0.c0 DESC, t1.c0 DESC
         Presorted Key: t0.c0
         ->  Nested Loop
               Output: t1.c0, t0.c0
               ->  Index Only Scan Backward using t0_pkey on regtest_miscs.t0
                     Output: t0.c0
               ->  Materialize
                     Output: t1.c0
                     ->  Seq Scan on regtest_miscs.t1
                           Output: t1.c0
   ->  Result
         Output: c0
         One-Time Filter: false
(18 rows)

SELECT * FROM t0 RIGHT OUTER JOIN (SELECT * FROM t1, t0 ORDER BY t0.c0 DESC, t1.c0 DESC) AS sub0 ON FALSE;
 c0 | c0 | c0 
----+----+----
    |  1 |  1
(1 row)

-- #680
DROP TABLE IF EXISTS t0;
DROP TABLE IF EXISTS t1;
CREATE TABLE t0(c0 money, c1 BIT, c2 inet);
CREATE TABLE IF NOT EXISTS t1(LIKE t0);
INSERT INTO t1(c2, c0) VALUES('45.143.62.35', (1.0)::MONEY);
INSERT INTO t0(c1, c0, c2) VALUES('B1', CAST(0.5 AS MONEY), '83.157.203.154');
EXPLAIN(costs off, verbose)
SELECT t1.c1, t0.c2 FROM t1 FULL OUTER JOIN t0 ON (t0.c2) IN (t1.c2) WHERE ((t0.c0) IN ((0.1)::MONEY)) ISNULL;
                                                                                                                                                          QUERY PLAN                                                                                                                                                          
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuJoin) on regtest_miscs.t1
   Output: t1.c1, t0.c2
   GPU Projection: t1.c1, t0.c2
   GPU Full Outer Join Quals [1]: (t0.c2 = t1.c2), [((t0.c0 = (0.1)::money) IS NULL)] ... [nrows: 1060 -> 28]
   GPU Outer Hash [1]: t1.c2
   GPU Inner Hash [1]: t0.c2
   KVars-Slot: <slot=0, type='bytea', expr='t1.c1'>, <slot=1, type='inet', expr='t0.c2'>, <slot=2, type='inet', expr='t1.c2'>, <slot=3, type='money', expr='t0.c0'>
   KVecs-Buffer: nbytes: 122880, ndims: 3, items=[kvec0=<0x0000-67ff, type='bytea', expr='c1'>, kvec1=<0x6800-ffff, type='inet', expr='c2'>, kvec2=<0x10000-197ff, type='inet', expr='c2'>, kvec3=<0x19800-1dfff, type='money', expr='c0'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='bytea' resno=2(c1)>, <slot=2, type='inet' resno=3(c2)>]}, items[1]={LoadVars(depth=1): kvars=[<slot=1, type='inet' resno=1(c2)>, <slot=3, type='money' resno=2(c0)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-67ff, type='bytea', expr='c1'>, <slot=2, offset=0x10000-197ff, type='inet', expr='c2'>]}}, items[1]={MoveVars(depth=1): items=[<offset=0x0000-67ff, type='bytea', expr='c1'>, <slot=1, offset=0x6800-ffff, type='inet', expr='c2'>]}}}
   Join Quals OpCode: {Packed items[1]={JoinQuals:  {Func(bool)::network_eq args=[{Var(inet): slot=1, expr='c2'}, {Var(inet): kvec=0x10000-19800, expr='c2'}]}, <{IsNull arg={Func(bool)::cash_eq args=[{Var(money): slot=3, expr='c0'}, {Func(money)::money arg={Const(numeric): value='0.1'}}]}}>}}
   Join HashValue OpCode: {Packed items[1]={HashValue arg={Var(inet): kvec=0x10000-19800, expr='c2'}}}
   Projection OpCode: {Projection: layout=<0,1> args=[{SaveExpr: <slot=0, type='bytea'> arg={Var(bytea): kvec=0x0000-6800, expr='c1'}}, {SaveExpr: <slot=1, type='inet'> arg={Var(inet): kvec=0x6800-10000, expr='c2'}}]}
   CUDA Stack Size: 4000
   ->  Seq Scan on regtest_miscs.t0
         Output: t0.c2, t0.c0
(16 rows)

SELECT t1.c1, t0.c2 FROM t1 FULL OUTER JOIN t0 ON (t0.c2) IN (t1.c2) WHERE ((t0.c0) IN ((0.1)::MONEY)) ISNULL;
 c1 | c2 
----+----
    | 
(1 row)

-- #683
DROP TABLE IF EXISTS t2;
DROP TABLE IF EXISTS t3;
CREATE TABLE t2(c0 bigint);
CREATE TABLE t3(LIKE t2);
INSERT INTO t3(c0) VALUES(33092);
EXPLAIN(costs off, verbose)
SELECT DISTINCT ON (t3.c0 + 1) t3.c0 FROM t3 FULL OUTER JOIN t2 ON (t2.c0) IN (t3.c0);
                                                                                                                                        QUERY PLAN                                                                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Unique
   Output: t3.c0, ((t3.c0 + 1))
   ->  Sort
         Output: t3.c0, ((t3.c0 + 1))
         Sort Key: ((t3.c0 + 1))
         ->  Custom Scan (GpuJoin) on regtest_miscs.t3
               Output: t3.c0, ((t3.c0 + 1))
               GPU Projection: t3.c0, (t3.c0 + 1)
               GPU Full Outer Join Quals [1]: (t2.c0 = t3.c0) ... [nrows: 2260 -> 25538]
               GPU Outer Hash [1]: t3.c0
               GPU Inner Hash [1]: t2.c0
               KVars-Slot: <slot=0, type='int8', expr='t3.c0'>, <slot=1, type='int8', expr='((t3.c0 + 1))'>, <slot=2, type='int8', expr='t2.c0'>
               KVecs-Buffer: nbytes: 36864, ndims: 3, items=[kvec0=<0x0000-47ff, type='int8', expr='c0'>, kvec1=<0x4800-8fff, type='int8', expr='c0'>]
               LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int8' resno=1(c0)>]}, items[1]={LoadVars(depth=1): kvars=[<slot=2, type='int8' resno=1(c0)>]}}
               MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-47ff, type='int8', expr='c0'>]}}, items[1]={MoveVars(depth=1): items=[<offset=0x0000-47ff, type='int8', expr='c0'>]}}}
               Join Quals OpCode: {Packed items[1]={JoinQuals:  {Func(bool)::int8eq args=[{Var(int8): slot=2, expr='c0'}, {Var(int8): kvec=0x0000-4800, expr='c0'}]}}}
               Join HashValue OpCode: {Packed items[1]={HashValue arg={Var(int8): kvec=0x0000-4800, expr='c0'}}}
               Projection OpCode: {Projection: layout=<0,1> args=[{SaveExpr: <slot=0, type='int8'> arg={Var(int8): kvec=0x0000-4800, expr='c0'}}, {SaveExpr: <slot=1, type='int8'> arg={Func(int8)::int84pl args=[{Var(int8): kvec=0x0000-4800, expr='c0'}, {Const(int4): value='1'}]}}]}
               CUDA Stack Size: 3936
               ->  Seq Scan on regtest_miscs.t2
                     Output: t2.c0
(21 rows)

SELECT DISTINCT ON (t3.c0 + 1) t3.c0 FROM t3 FULL OUTER JOIN t2 ON (t2.c0) IN (t3.c0);
  c0   
-------
 33092
(1 row)

DROP SCHEMA regtest_miscs CASCADE;
