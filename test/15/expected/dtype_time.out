---
--- Micro test cases for date & time operators / functions
---
SET pg_strom.regression_test_mode = on;
SET client_min_messages = error;
DROP SCHEMA IF EXISTS regtest_dtype_time_temp CASCADE;
CREATE SCHEMA regtest_dtype_time_temp;
RESET client_min_messages;
SET search_path = regtest_dtype_time_temp,public;
CREATE TABLE rt_datetime (
  id      int,
  d1      date,
  d2      date,
  t1      time,
  t2      time,
  t3      time,
  t4      time,
  tz1     timetz,
  tz2     timetz,
  tz3     timetz,
  tz4     timetz,
  ts1     timestamp,
  ts2     timestamp,
  ts3     timestamp,
  ts4     timestamp,
  tsz1    timestamptz,
  tsz2    timestamptz,
  tsz3    timestamptz,
  tsz4    timestamptz,
  iv1     interval,
  iv2     interval,
  ival    int
);
SELECT pgstrom.random_setseed(20190613);
 random_setseed 
----------------
 
(1 row)

INSERT INTO rt_datetime (
  SELECT x, pgstrom.random_date(1.0),
            pgstrom.random_date(1.0),
            pgstrom.random_time(1.0),
            pgstrom.random_time(1.0),
            pgstrom.random_time(1.0),
            pgstrom.random_time(1.0),
            pgstrom.random_timetz(1.0),
            pgstrom.random_timetz(1.0),
            pgstrom.random_timetz(1.0),
            pgstrom.random_timetz(1.0),
            pgstrom.random_timestamp(1.0),
            pgstrom.random_timestamp(1.0),
            pgstrom.random_timestamp(1.0),
            pgstrom.random_timestamp(1.0),
            pgstrom.random_timestamp(1.0),
            pgstrom.random_timestamp(1.0),
            pgstrom.random_timestamp(1.0),
            pgstrom.random_timestamp(1.0),
            pgstrom.random_timestamp(0.5) - pgstrom.random_timestamp(0.5),
            pgstrom.random_timestamp(0.5) - pgstrom.random_timestamp(0.5),
            pgstrom.random_int(1,-32000,32000)
    FROM generate_series(1,3000) x);
VACUUM ANALYZE;
-- force to use GpuScan, instead of SeqScan
SET enable_seqscan = off;
-- type cast operators
SET timezone = 'Japan';
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, d1::timestamp v1, d2::timestamptz v2, t1::timetz v3,
           ts1::date v4, ts2::time v5, ts1::timestamptz v6,
           tsz1::date v7, tsz1::time v8, tsz2::timetz v9
  INTO test01g
  FROM rt_datetime
 WHERE id > 0;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               

 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((d1)::timestamp without time zone), ((d2)::timestamp with time zone), (t1)::time with time zone, ((ts1)::date), ((ts2)::time without time zone), ((ts1)::timestamp with time zone), ((tsz1)::date), ((tsz1)::time without time zone), (tsz2)::time with time zone
   GPU Projection: id, (d1)::timestamp without time zone, (d2)::timestamp with time zone, t1, (ts1)::date, (ts2)::time without time zone, (ts1)::timestamp with time zone, (tsz1)::date, (tsz1)::time without time zone, tsz2
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='timestamp', expr='(d1)::timestamp without time zone'>, <slot=2, type='date', expr='d1'>, <slot=3, type='timestamptz', expr='(d2)::timestamp with time zone'>, <slot=4, type='date', expr='d2'>, <slot=5, type='time', expr='t1'>, <slot=6, type='date', expr='(ts1)::date'>, <slot=7, type='timestamp', expr='ts1'>, <slot=8, type='time', expr='(ts2)::time without time zone'>, <slot=9, type='timestamp', expr='ts2'>, <slot=10, type='timestamptz', expr='(ts1)::timestamp with time zone'>, <slot=11, type='date', expr='(tsz1)::date'>, <slot=12, type='timestamptz', expr='tsz1'>, <slot=13, type='time', expr='(tsz1)::time without time zone'>, <slot=14, type='timestamptz', expr='tsz2'>
   KVecs-Buffer: nbytes: 122880, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-4fff, type='date', expr='d1'>, kvec2=<0x5000-77ff, type='date', expr='d2'>, kvec3=<0x7800-bfff, type='time', expr='t1'>, kvec4=<0xc000-107ff, type='timestamp', expr='ts1'>, kvec5=<0x10800-14fff, type='timestamp', expr='ts2'>, kvec6=<0x15000-197ff, type='timestamptz', expr='tsz1'>, kvec7=<0x19800-1dfff, type='timestamptz', expr='tsz2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='date' resno=2(d1)>, <slot=4, type='date' resno=3(d2)>, <slot=5, type='time' resno=4(t1)>, <slot=7, type='timestamp' resno=12(ts1)>, <slot=9, type='timestamp' resno=13(ts2)>, <slot=12, type='timestamptz' resno=16(tsz1)>, <slot=14, type='timestamptz' resno=17(tsz2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-4fff, type='date', expr='d1'>, <slot=4, offset=0x5000-77ff, type='date', expr='d2'>, <slot=5, offset=0x7800-bfff, type='time', expr='t1'>, <slot=7, offset=0xc000-107ff, type='timestamp', expr='ts1'>, <slot=9, offset=0x10800-14fff, type='timestamp', expr='ts2'>, <slot=12, offset=0x15000-197ff, type='timestamptz', expr='tsz1'>, <slot=14, offset=0x19800-1dfff, type='timestamptz', expr='tsz2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,3,5,6,8,10,11,13,14> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='timestamp'> arg={Func(timestamp)::timestamp arg={Var(date): kvec=0x2800-5000, expr='d1'}}}, {SaveExpr: <slot=3, type='timestamptz'> arg={Func(timestamptz)::timestamptz arg={Var(date): kvec=0x5000-7800, expr='d2'}}}, {SaveExpr: <slot=5, type='time'> arg={Var(time): kvec=0x7800-c000, expr='t1'}}, {SaveExpr: <slot=6, type='date'> arg={Func(date)::date arg={Var(timestamp): kvec=0xc000-10800, expr='ts1'}}}, {SaveExpr: <slot=8, type='time'> arg={Func(time)::time arg={Var(timestamp): kvec=0x10800-15000, expr='ts2'}}}, {SaveExpr: <slot=10, type='timestamptz'> arg={Func(timestamptz)::timestamptz arg={Var(timestamp): kvec=0xc000-10800, expr='ts1'}}}, {SaveExpr: <slot=11, type='date'> arg={Func(date)::date arg={Var(timestamptz): kvec=0x15000-19800, expr='tsz1'}}}, {SaveExpr: <slot=13, type='time'> arg={Func(time)::time arg={Var(timestamptz): kvec=0x15000-19800, expr='tsz1'}}}, {SaveExpr: <slot=14, type='timestamptz'> arg={Var(timestamptz): kvec=0x19800-1e000, expr='tsz2'}}]}
(10 rows)

SELECT id, d1::timestamp v1, d2::timestamptz v2, t1::timetz v3,
           ts1::date v4, ts2::time v5, ts1::timestamptz v6,
           tsz1::date v7, tsz1::time v8, tsz2::timetz v9
  INTO test01g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, d1::timestamp v1, d2::timestamptz v2, t1::timetz v3,
           ts1::date v4, ts2::time v5, ts1::timestamptz v6,
           tsz1::date v7, tsz1::time v8, tsz2::timetz v9
  INTO test01p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test01g EXCEPT SELECT * FROM test01p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test01p EXCEPT SELECT * FROM test01g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

-- type cast operators (different timezone)
SET timezone = 'CET';
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, d1::timestamp v1, d2::timestamptz v2, t1::timetz v3,
           ts1::date v4, ts2::time v5, ts1::timestamptz v6,
           tsz1::date v7, tsz1::time v8, tsz2::timetz v9
  INTO test02g
  FROM rt_datetime
 WHERE id > 0;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               

 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((d1)::timestamp without time zone), ((d2)::timestamp with time zone), (t1)::time with time zone, ((ts1)::date), ((ts2)::time without time zone), ((ts1)::timestamp with time zone), ((tsz1)::date), ((tsz1)::time without time zone), (tsz2)::time with time zone
   GPU Projection: id, (d1)::timestamp without time zone, (d2)::timestamp with time zone, t1, (ts1)::date, (ts2)::time without time zone, (ts1)::timestamp with time zone, (tsz1)::date, (tsz1)::time without time zone, tsz2
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='timestamp', expr='(d1)::timestamp without time zone'>, <slot=2, type='date', expr='d1'>, <slot=3, type='timestamptz', expr='(d2)::timestamp with time zone'>, <slot=4, type='date', expr='d2'>, <slot=5, type='time', expr='t1'>, <slot=6, type='date', expr='(ts1)::date'>, <slot=7, type='timestamp', expr='ts1'>, <slot=8, type='time', expr='(ts2)::time without time zone'>, <slot=9, type='timestamp', expr='ts2'>, <slot=10, type='timestamptz', expr='(ts1)::timestamp with time zone'>, <slot=11, type='date', expr='(tsz1)::date'>, <slot=12, type='timestamptz', expr='tsz1'>, <slot=13, type='time', expr='(tsz1)::time without time zone'>, <slot=14, type='timestamptz', expr='tsz2'>
   KVecs-Buffer: nbytes: 122880, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-4fff, type='date', expr='d1'>, kvec2=<0x5000-77ff, type='date', expr='d2'>, kvec3=<0x7800-bfff, type='time', expr='t1'>, kvec4=<0xc000-107ff, type='timestamp', expr='ts1'>, kvec5=<0x10800-14fff, type='timestamp', expr='ts2'>, kvec6=<0x15000-197ff, type='timestamptz', expr='tsz1'>, kvec7=<0x19800-1dfff, type='timestamptz', expr='tsz2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='date' resno=2(d1)>, <slot=4, type='date' resno=3(d2)>, <slot=5, type='time' resno=4(t1)>, <slot=7, type='timestamp' resno=12(ts1)>, <slot=9, type='timestamp' resno=13(ts2)>, <slot=12, type='timestamptz' resno=16(tsz1)>, <slot=14, type='timestamptz' resno=17(tsz2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-4fff, type='date', expr='d1'>, <slot=4, offset=0x5000-77ff, type='date', expr='d2'>, <slot=5, offset=0x7800-bfff, type='time', expr='t1'>, <slot=7, offset=0xc000-107ff, type='timestamp', expr='ts1'>, <slot=9, offset=0x10800-14fff, type='timestamp', expr='ts2'>, <slot=12, offset=0x15000-197ff, type='timestamptz', expr='tsz1'>, <slot=14, offset=0x19800-1dfff, type='timestamptz', expr='tsz2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,3,5,6,8,10,11,13,14> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='timestamp'> arg={Func(timestamp)::timestamp arg={Var(date): kvec=0x2800-5000, expr='d1'}}}, {SaveExpr: <slot=3, type='timestamptz'> arg={Func(timestamptz)::timestamptz arg={Var(date): kvec=0x5000-7800, expr='d2'}}}, {SaveExpr: <slot=5, type='time'> arg={Var(time): kvec=0x7800-c000, expr='t1'}}, {SaveExpr: <slot=6, type='date'> arg={Func(date)::date arg={Var(timestamp): kvec=0xc000-10800, expr='ts1'}}}, {SaveExpr: <slot=8, type='time'> arg={Func(time)::time arg={Var(timestamp): kvec=0x10800-15000, expr='ts2'}}}, {SaveExpr: <slot=10, type='timestamptz'> arg={Func(timestamptz)::timestamptz arg={Var(timestamp): kvec=0xc000-10800, expr='ts1'}}}, {SaveExpr: <slot=11, type='date'> arg={Func(date)::date arg={Var(timestamptz): kvec=0x15000-19800, expr='tsz1'}}}, {SaveExpr: <slot=13, type='time'> arg={Func(time)::time arg={Var(timestamptz): kvec=0x15000-19800, expr='tsz1'}}}, {SaveExpr: <slot=14, type='timestamptz'> arg={Var(timestamptz): kvec=0x19800-1e000, expr='tsz2'}}]}
(10 rows)

SELECT id, d1::timestamp v1, d2::timestamptz v2, t1::timetz v3,
           ts1::date v4, ts2::time v5, ts1::timestamptz v6,
           tsz1::date v7, tsz1::time v8, tsz2::timetz v9
  INTO test02g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, d1::timestamp v1, d2::timestamptz v2, t1::timetz v3,
           ts1::date v4, ts2::time v5, ts1::timestamptz v6,
           tsz1::date v7, tsz1::time v8, tsz2::timetz v9
  INTO test02p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test02g EXCEPT SELECT * FROM test02p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test02p EXCEPT SELECT * FROM test02g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

-- 'date' operators
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, d1 + ival v1, d2 - ival v2, d1 - d2 v3,
           d1 + t1 v4, d2 + tz1 v5, timestamptz(d1, tz2) v6
  INTO test10g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((d1 + ival)), ((d2 - ival)), ((d1 - d2)), ((d1 + t1)), (d2 + tz1), timestamptz(d1, tz2)
   GPU Projection: id, (d1 + ival), (d2 - ival), (d1 - d2), (d1 + t1), d2, tz1, d1, tz2
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='date', expr='(d1 + ival)'>, <slot=2, type='date', expr='d1'>, <slot=3, type='int4', expr='ival'>, <slot=4, type='date', expr='(d2 - ival)'>, <slot=5, type='date', expr='d2'>, <slot=6, type='int4', expr='(d1 - d2)'>, <slot=7, type='timestamp', expr='(d1 + t1)'>, <slot=8, type='time', expr='t1'>, <slot=9, type='timetz', expr='tz1'>, <slot=10, type='timetz', expr='tz2'>
   KVecs-Buffer: nbytes: 129024, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-4fff, type='date', expr='d1'>, kvec2=<0x5000-77ff, type='int4', expr='ival'>, kvec3=<0x7800-9fff, type='date', expr='d2'>, kvec4=<0xa000-e7ff, type='time', expr='t1'>, kvec5=<0xe800-16fff, type='timetz', expr='tz1'>, kvec6=<0x17000-1f7ff, type='timetz', expr='tz2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='date' resno=2(d1)>, <slot=5, type='date' resno=3(d2)>, <slot=8, type='time' resno=4(t1)>, <slot=9, type='timetz' resno=8(tz1)>, <slot=10, type='timetz' resno=9(tz2)>, <slot=3, type='int4' resno=22(ival)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-4fff, type='date', expr='d1'>, <slot=3, offset=0x5000-77ff, type='int4', expr='ival'>, <slot=5, offset=0x7800-9fff, type='date', expr='d2'>, <slot=8, offset=0xa000-e7ff, type='time', expr='t1'>, <slot=9, offset=0xe800-16fff, type='timetz', expr='tz1'>, <slot=10, offset=0x17000-1f7ff, type='timetz', expr='tz2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,6,7,5,9,2,10> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='date'> arg={Func(date)::date_pli args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(int4): kvec=0x5000-7800, expr='ival'}]}}, {SaveExpr: <slot=4, type='date'> arg={Func(date)::date_mii args=[{Var(date): kvec=0x7800-a000, expr='d2'}, {Var(int4): kvec=0x5000-7800, expr='ival'}]}}, {SaveExpr: <slot=6, type='int4'> arg={Func(int4)::date_mi args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(date): kvec=0x7800-a000, expr='d2'}]}}, {SaveExpr: <slot=7, type='timestamp'> arg={Func(timestamp)::datetime_pl args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(time): kvec=0xa000-e800, expr='t1'}]}}, {SaveExpr: <slot=5, type='date'> arg={Var(date): kvec=0x7800-a000, expr='d2'}}, {SaveExpr: <slot=9, type='timetz'> arg={Var(timetz): kvec=0xe800-17000, expr='tz1'}}, {SaveExpr: <slot=2, type='date'> arg={Var(date): kvec=0x2800-5000, expr='d1'}}, {SaveExpr: <slot=10, type='timetz'> arg={Var(timetz): kvec=0x17000-1f800, expr='tz2'}}]}
(10 rows)

SELECT id, d1 + ival v1, d2 - ival v2, d1 - d2 v3,
           d1 + t1 v4, d2 + tz1 v5, timestamptz(d1, tz2) v6
  INTO test10g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, d1 + ival v1, d2 - ival v2, d1 - d2 v3,
           d1 + t1 v4, d2 + tz1 v5, timestamptz(d1, tz2) v6
  INTO test10p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test10g EXCEPT SELECT * FROM test10p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test10p EXCEPT SELECT * FROM test10g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

-- 'time' and 'timetz' operators
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, t1 + d2 v1, t2 - t1 v2,
           tz1 + iv1 v3, tz2 - iv2 v4
  INTO test11g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((d2 + t1)), ((t2 - t1)), ((tz1 + iv1)), ((tz2 - iv2))
   GPU Projection: id, (d2 + t1), (t2 - t1), (tz1 + iv1), (tz2 - iv2)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='timestamp', expr='(d2 + t1)'>, <slot=2, type='date', expr='d2'>, <slot=3, type='time', expr='t1'>, <slot=4, type='interval', expr='(t2 - t1)'>, <slot=5, type='time', expr='t2'>, <slot=6, type='timetz', expr='(tz1 + iv1)'>, <slot=7, type='timetz', expr='tz1'>, <slot=8, type='interval', expr='iv1'>, <slot=9, type='timetz', expr='(tz2 - iv2)'>, <slot=10, type='timetz', expr='tz2'>, <slot=11, type='interval', expr='iv2'>
   KVecs-Buffer: nbytes: 196608, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-4fff, type='date', expr='d2'>, kvec2=<0x5000-97ff, type='time', expr='t1'>, kvec3=<0x9800-dfff, type='time', expr='t2'>, kvec4=<0xe000-167ff, type='timetz', expr='tz1'>, kvec5=<0x16800-1efff, type='interval', expr='iv1'>, kvec6=<0x1f000-277ff, type='timetz', expr='tz2'>, kvec7=<0x27800-2ffff, type='interval', expr='iv2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='date' resno=3(d2)>, <slot=3, type='time' resno=4(t1)>, <slot=5, type='time' resno=5(t2)>, <slot=7, type='timetz' resno=8(tz1)>, <slot=10, type='timetz' resno=9(tz2)>, <slot=8, type='interval' resno=20(iv1)>, <slot=11, type='interval' resno=21(iv2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-4fff, type='date', expr='d2'>, <slot=3, offset=0x5000-97ff, type='time', expr='t1'>, <slot=5, offset=0x9800-dfff, type='time', expr='t2'>, <slot=7, offset=0xe000-167ff, type='timetz', expr='tz1'>, <slot=8, offset=0x16800-1efff, type='interval', expr='iv1'>, <slot=10, offset=0x1f000-277ff, type='timetz', expr='tz2'>, <slot=11, offset=0x27800-2ffff, type='interval', expr='iv2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,6,9> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='timestamp'> arg={Func(timestamp)::datetime_pl args=[{Var(date): kvec=0x2800-5000, expr='d2'}, {Var(time): kvec=0x5000-9800, expr='t1'}]}}, {SaveExpr: <slot=4, type='interval'> arg={Func(interval)::time_mi_time args=[{Var(time): kvec=0x9800-e000, expr='t2'}, {Var(time): kvec=0x5000-9800, expr='t1'}]}}, {SaveExpr: <slot=6, type='timetz'> arg={Func(timetz)::timetz_pl_interval args=[{Var(timetz): kvec=0xe000-16800, expr='tz1'}, {Var(interval): kvec=0x16800-1f000, expr='iv1'}]}}, {SaveExpr: <slot=9, type='timetz'> arg={Func(timetz)::timetz_mi_interval args=[{Var(timetz): kvec=0x1f000-27800, expr='tz2'}, {Var(interval): kvec=0x27800-30000, expr='iv2'}]}}]}
(10 rows)

SELECT id, t1 + d2 v1, t2 - t1 v2,
           tz1 + iv1 v3, tz2 - iv2 v4
  INTO test11g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, t1 + d2 v1, t2 - t1 v2,
           tz1 + iv1 v3, tz2 - iv2 v4
  INTO test11p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test11g EXCEPT SELECT * FROM test11p) ORDER BY id;
 id | v1 | v2 | v3 | v4 
----+----+----+----+----
(0 rows)

(SELECT * FROM test11p EXCEPT SELECT * FROM test11g) ORDER BY id;
 id | v1 | v2 | v3 | v4 
----+----+----+----+----
(0 rows)

-- 'timestamp' and 'timestamptz' operators
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, ts1 - ts2 v1, tsz1 + iv1 v2, tsz2 - iv2 v3
  INTO test12g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((ts1 - ts2)), ((tsz1 + iv1)), ((tsz2 - iv2))
   GPU Projection: id, (ts1 - ts2), (tsz1 + iv1), (tsz2 - iv2)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='interval', expr='(ts1 - ts2)'>, <slot=2, type='timestamp', expr='ts1'>, <slot=3, type='timestamp', expr='ts2'>, <slot=4, type='timestamptz', expr='(tsz1 + iv1)'>, <slot=5, type='timestamptz', expr='tsz1'>, <slot=6, type='interval', expr='iv1'>, <slot=7, type='timestamptz', expr='(tsz2 - iv2)'>, <slot=8, type='timestamptz', expr='tsz2'>, <slot=9, type='interval', expr='iv2'>
   KVecs-Buffer: nbytes: 153600, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-6fff, type='timestamp', expr='ts1'>, kvec2=<0x7000-b7ff, type='timestamp', expr='ts2'>, kvec3=<0xb800-ffff, type='timestamptz', expr='tsz1'>, kvec4=<0x10000-187ff, type='interval', expr='iv1'>, kvec5=<0x18800-1cfff, type='timestamptz', expr='tsz2'>, kvec6=<0x1d000-257ff, type='interval', expr='iv2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='timestamp' resno=12(ts1)>, <slot=3, type='timestamp' resno=13(ts2)>, <slot=5, type='timestamptz' resno=16(tsz1)>, <slot=8, type='timestamptz' resno=17(tsz2)>, <slot=6, type='interval' resno=20(iv1)>, <slot=9, type='interval' resno=21(iv2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-6fff, type='timestamp', expr='ts1'>, <slot=3, offset=0x7000-b7ff, type='timestamp', expr='ts2'>, <slot=5, offset=0xb800-ffff, type='timestamptz', expr='tsz1'>, <slot=6, offset=0x10000-187ff, type='interval', expr='iv1'>, <slot=8, offset=0x18800-1cfff, type='timestamptz', expr='tsz2'>, <slot=9, offset=0x1d000-257ff, type='interval', expr='iv2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,7> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='interval'> arg={Func(interval)::timestamp_mi args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(timestamp): kvec=0x7000-b800, expr='ts2'}]}}, {SaveExpr: <slot=4, type='timestamptz'> arg={Func(timestamptz)::timestamptz_pl_interval args=[{Var(timestamptz): kvec=0xb800-10000, expr='tsz1'}, {Var(interval): kvec=0x10000-18800, expr='iv1'}]}}, {SaveExpr: <slot=7, type='timestamptz'> arg={Func(timestamptz)::timestamptz_mi_interval args=[{Var(timestamptz): kvec=0x18800-1d000, expr='tsz2'}, {Var(interval): kvec=0x1d000-25800, expr='iv2'}]}}]}
(10 rows)

SELECT id, ts1 - ts2 v1, tsz1 + iv1 v2, tsz2 - iv2 v3
  INTO test12g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, ts1 - ts2 v1, tsz1 + iv1 v2, tsz2 - iv2 v3
  INTO test12p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test12g EXCEPT SELECT * FROM test12p) ORDER BY id;
 id | v1 | v2 | v3 
----+----+----+----
(0 rows)

(SELECT * FROM test12p EXCEPT SELECT * FROM test12g) ORDER BY id;
 id | v1 | v2 | v3 
----+----+----+----
(0 rows)

-- 'interval' operators
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, -iv1 v1, iv1 + iv2 v2, iv2 - iv1 v3
  INTO test13g
  FROM rt_datetime
 WHERE id > 0;
                                                                                                                                                                                                                                                                                                            QUERY PLAN                                                                                                                                                                                                                                                                                                            

 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((- iv1)), ((iv1 + iv2)), ((iv2 - iv1))
   GPU Projection: id, (- iv1), (iv1 + iv2), (iv2 - iv1)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='interval', expr='(- iv1)'>, <slot=2, type='interval', expr='iv1'>, <slot=3, type='interval', expr='(iv1 + iv2)'>, <slot=4, type='interval', expr='iv2'>, <slot=5, type='interval', expr='(iv2 - iv1)'>
   KVecs-Buffer: nbytes: 79872, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-afff, type='interval', expr='iv1'>, kvec2=<0xb000-137ff, type='interval', expr='iv2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='interval' resno=20(iv1)>, <slot=4, type='interval' resno=21(iv2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-afff, type='interval', expr='iv1'>, <slot=4, offset=0xb000-137ff, type='interval', expr='iv2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,3,5> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='interval'> arg={Func(interval)::interval_um arg={Var(interval): kvec=0x2800-b000, expr='iv1'}}}, {SaveExpr: <slot=3, type='interval'> arg={Func(interval)::interval_pl args=[{Var(interval): kvec=0x2800-b000, expr='iv1'}, {Var(interval): kvec=0xb000-13800, expr='iv2'}]}}, {SaveExpr: <slot=5, type='interval'> arg={Func(interval)::interval_mi args=[{Var(interval): kvec=0xb000-13800, expr='iv2'}, {Var(interval): kvec=0x2800-b000, expr='iv1'}]}}]}
(10 rows)

SELECT id, -iv1 v1, iv1 + iv2 v2, iv2 - iv1 v3
  INTO test13g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, -iv1 v1, iv1 + iv2 v2, iv2 - iv1 v3
  INTO test13p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test13g EXCEPT SELECT * FROM test13p) ORDER BY id;
 id | v1 | v2 | v3 
----+----+----+----
(0 rows)

(SELECT * FROM test13p EXCEPT SELECT * FROM test13g) ORDER BY id;
 id | v1 | v2 | v3 
----+----+----+----
(0 rows)

-- 'date' <COMP> 'date'
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, d1 =  d2 v1, d1 <> d2 v2, d1 <  d2 v3,
           d1 <= d2 v4, d1 >  d2 v5, d1 >= d2 v6
  INTO test20g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((d1 = d2)), ((d1 <> d2)), ((d1 < d2)), ((d1 <= d2)), ((d1 > d2)), ((d1 >= d2))
   GPU Projection: id, (d1 = d2), (d1 <> d2), (d1 < d2), (d1 <= d2), (d1 > d2), (d1 >= d2)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='bool', expr='(d1 = d2)'>, <slot=2, type='date', expr='d1'>, <slot=3, type='date', expr='d2'>, <slot=4, type='bool', expr='(d1 <> d2)'>, <slot=5, type='bool', expr='(d1 < d2)'>, <slot=6, type='bool', expr='(d1 <= d2)'>, <slot=7, type='bool', expr='(d1 > d2)'>, <slot=8, type='bool', expr='(d1 >= d2)'>
   KVecs-Buffer: nbytes: 30720, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-4fff, type='date', expr='d1'>, kvec2=<0x5000-77ff, type='date', expr='d2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='date' resno=2(d1)>, <slot=3, type='date' resno=3(d2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-4fff, type='date', expr='d1'>, <slot=3, offset=0x5000-77ff, type='date', expr='d2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,5,6,7,8> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='bool'> arg={Func(bool)::date_eq args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(date): kvec=0x5000-7800, expr='d2'}]}}, {SaveExpr: <slot=4, type='bool'> arg={Func(bool)::date_ne args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(date): kvec=0x5000-7800, expr='d2'}]}}, {SaveExpr: <slot=5, type='bool'> arg={Func(bool)::date_lt args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(date): kvec=0x5000-7800, expr='d2'}]}}, {SaveExpr: <slot=6, type='bool'> arg={Func(bool)::date_le args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(date): kvec=0x5000-7800, expr='d2'}]}}, {SaveExpr: <slot=7, type='bool'> arg={Func(bool)::date_gt args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(date): kvec=0x5000-7800, expr='d2'}]}}, {SaveExpr: <slot=8, type='bool'> arg={Func(bool)::date_ge args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(date): kvec=0x5000-7800, expr='d2'}]}}]}
(10 rows)

SELECT id, d1 =  d2 v1, d1 <> d2 v2, d1 <  d2 v3,
           d1 <= d2 v4, d1 >  d2 v5, d1 >= d2 v6
  INTO test20g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, d1 =  d2 v1, d1 <> d2 v2, d1 <  d2 v3,
           d1 <= d2 v4, d1 >  d2 v5, d1 >= d2 v6
  INTO test20p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test20g EXCEPT SELECT * FROM test20p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test20p EXCEPT SELECT * FROM test20g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

-- 'date' <COMP> 'timestamp'
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, d1 =  ts2 v1, d1 <> ts2 v2, d1 <  ts2 v3,
           d1 <= ts2 v4, d1 >  ts2 v5, d1 >= ts2 v6
  INTO test21g
  FROM rt_datetime
 WHERE id > 0;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         

 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((d1 = ts2)), ((d1 <> ts2)), ((d1 < ts2)), ((d1 <= ts2)), ((d1 > ts2)), ((d1 >= ts2))
   GPU Projection: id, (d1 = ts2), (d1 <> ts2), (d1 < ts2), (d1 <= ts2), (d1 > ts2), (d1 >= ts2)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='bool', expr='(d1 = ts2)'>, <slot=2, type='date', expr='d1'>, <slot=3, type='timestamp', expr='ts2'>, <slot=4, type='bool', expr='(d1 <> ts2)'>, <slot=5, type='bool', expr='(d1 < ts2)'>, <slot=6, type='bool', expr='(d1 <= ts2)'>, <slot=7, type='bool', expr='(d1 > ts2)'>, <slot=8, type='bool', expr='(d1 >= ts2)'>
   KVecs-Buffer: nbytes: 38912, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-4fff, type='date', expr='d1'>, kvec2=<0x5000-97ff, type='timestamp', expr='ts2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='date' resno=2(d1)>, <slot=3, type='timestamp' resno=13(ts2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-4fff, type='date', expr='d1'>, <slot=3, offset=0x5000-97ff, type='timestamp', expr='ts2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,5,6,7,8> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='bool'> arg={Func(bool)::date_eq_timestamp args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(timestamp): kvec=0x5000-9800, expr='ts2'}]}}, {SaveExpr: <slot=4, type='bool'> arg={Func(bool)::date_ne_timestamp args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(timestamp): kvec=0x5000-9800, expr='ts2'}]}}, {SaveExpr: <slot=5, type='bool'> arg={Func(bool)::date_lt_timestamp args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(timestamp): kvec=0x5000-9800, expr='ts2'}]}}, {SaveExpr: <slot=6, type='bool'> arg={Func(bool)::date_le_timestamp args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(timestamp): kvec=0x5000-9800, expr='ts2'}]}}, {SaveExpr: <slot=7, type='bool'> arg={Func(bool)::date_gt_timestamp args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(timestamp): kvec=0x5000-9800, expr='ts2'}]}}, {SaveExpr: <slot=8, type='bool'> arg={Func(bool)::date_ge_timestamp args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(timestamp): kvec=0x5000-9800, expr='ts2'}]}}]}
(10 rows)

SELECT id, d1 =  ts2 v1, d1 <> ts2 v2, d1 <  ts2 v3,
           d1 <= ts2 v4, d1 >  ts2 v5, d1 >= ts2 v6
  INTO test21g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, d1 =  ts2 v1, d1 <> ts2 v2, d1 <  ts2 v3,
           d1 <= ts2 v4, d1 >  ts2 v5, d1 >= ts2 v6
  INTO test21p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test21g EXCEPT SELECT * FROM test21p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test21p EXCEPT SELECT * FROM test21g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

-- 'timestamp' <COMP> 'date'
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, ts1 =  d2 v1, ts1 <> d2 v2, ts1 <  d2 v3,
           ts1 <= d2 v4, ts1 >  d2 v5, ts1 >= d2 v6
  INTO test22g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((ts1 = d2)), ((ts1 <> d2)), ((ts1 < d2)), ((ts1 <= d2)), ((ts1 > d2)), ((ts1 >= d2))
   GPU Projection: id, (ts1 = d2), (ts1 <> d2), (ts1 < d2), (ts1 <= d2), (ts1 > d2), (ts1 >= d2)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='bool', expr='(ts1 = d2)'>, <slot=2, type='timestamp', expr='ts1'>, <slot=3, type='date', expr='d2'>, <slot=4, type='bool', expr='(ts1 <> d2)'>, <slot=5, type='bool', expr='(ts1 < d2)'>, <slot=6, type='bool', expr='(ts1 <= d2)'>, <slot=7, type='bool', expr='(ts1 > d2)'>, <slot=8, type='bool', expr='(ts1 >= d2)'>
   KVecs-Buffer: nbytes: 38912, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-6fff, type='timestamp', expr='ts1'>, kvec2=<0x7000-97ff, type='date', expr='d2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=3, type='date' resno=3(d2)>, <slot=2, type='timestamp' resno=12(ts1)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-6fff, type='timestamp', expr='ts1'>, <slot=3, offset=0x7000-97ff, type='date', expr='d2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,5,6,7,8> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='bool'> arg={Func(bool)::timestamp_eq_date args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}, {SaveExpr: <slot=4, type='bool'> arg={Func(bool)::timestamp_ne_date args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}, {SaveExpr: <slot=5, type='bool'> arg={Func(bool)::timestamp_lt_date args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}, {SaveExpr: <slot=6, type='bool'> arg={Func(bool)::timestamp_le_date args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}, {SaveExpr: <slot=7, type='bool'> arg={Func(bool)::timestamp_gt_date args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}, {SaveExpr: <slot=8, type='bool'> arg={Func(bool)::timestamp_ge_date args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}]}
(10 rows)

SELECT id, ts1 =  d2 v1, ts1 <> d2 v2, ts1 <  d2 v3,
           ts1 <= d2 v4, ts1 >  d2 v5, ts1 >= d2 v6
  INTO test22g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, ts1 =  d2 v1, ts1 <> d2 v2, ts1 <  d2 v3,
           ts1 <= d2 v4, ts1 >  d2 v5, ts1 >= d2 v6
  INTO test22p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test22g EXCEPT SELECT * FROM test22p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test22p EXCEPT SELECT * FROM test22g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

-- 'date' <COMP> 'timestamptz'
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, d1 =  tsz2 v1, d1 <> tsz2 v2, d1 <  tsz2 v3,
           d1 <= tsz2 v4, d1 >  tsz2 v5, d1 >= tsz2 v6
  INTO test23g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((d1 = tsz2)), ((d1 <> tsz2)), ((d1 < tsz2)), ((d1 <= tsz2)), ((d1 > tsz2)), ((d1 >= tsz2))
   GPU Projection: id, (d1 = tsz2), (d1 <> tsz2), (d1 < tsz2), (d1 <= tsz2), (d1 > tsz2), (d1 >= tsz2)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='bool', expr='(d1 = tsz2)'>, <slot=2, type='date', expr='d1'>, <slot=3, type='timestamptz', expr='tsz2'>, <slot=4, type='bool', expr='(d1 <> tsz2)'>, <slot=5, type='bool', expr='(d1 < tsz2)'>, <slot=6, type='bool', expr='(d1 <= tsz2)'>, <slot=7, type='bool', expr='(d1 > tsz2)'>, <slot=8, type='bool', expr='(d1 >= tsz2)'>
   KVecs-Buffer: nbytes: 38912, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-4fff, type='date', expr='d1'>, kvec2=<0x5000-97ff, type='timestamptz', expr='tsz2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='date' resno=2(d1)>, <slot=3, type='timestamptz' resno=17(tsz2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-4fff, type='date', expr='d1'>, <slot=3, offset=0x5000-97ff, type='timestamptz', expr='tsz2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,5,6,7,8> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='bool'> arg={Func(bool)::date_eq_timestamptz args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(timestamptz): kvec=0x5000-9800, expr='tsz2'}]}}, {SaveExpr: <slot=4, type='bool'> arg={Func(bool)::date_ne_timestamptz args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(timestamptz): kvec=0x5000-9800, expr='tsz2'}]}}, {SaveExpr: <slot=5, type='bool'> arg={Func(bool)::date_lt_timestamptz args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(timestamptz): kvec=0x5000-9800, expr='tsz2'}]}}, {SaveExpr: <slot=6, type='bool'> arg={Func(bool)::date_le_timestamptz args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(timestamptz): kvec=0x5000-9800, expr='tsz2'}]}}, {SaveExpr: <slot=7, type='bool'> arg={Func(bool)::date_gt_timestamptz args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(timestamptz): kvec=0x5000-9800, expr='tsz2'}]}}, {SaveExpr: <slot=8, type='bool'> arg={Func(bool)::date_ge_timestamptz args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(timestamptz): kvec=0x5000-9800, expr='tsz2'}]}}]}
(10 rows)

SELECT id, d1 =  tsz2 v1, d1 <> tsz2 v2, d1 <  tsz2 v3,
           d1 <= tsz2 v4, d1 >  tsz2 v5, d1 >= tsz2 v6
  INTO test23g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, d1 =  tsz2 v1, d1 <> tsz2 v2, d1 <  tsz2 v3,
           d1 <= tsz2 v4, d1 >  tsz2 v5, d1 >= tsz2 v6
  INTO test23p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test23g EXCEPT SELECT * FROM test23p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test23p EXCEPT SELECT * FROM test23g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

-- 'timestamptz' <COMP> 'date'
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, tsz1 =  d2 v1, tsz1 <> d2 v2, tsz1 <  d2 v3,
           tsz1 <= d2 v4, tsz1 >  d2 v5, tsz1 >= d2 v6
  INTO test24g
  FROM rt_datetime
 WHERE id > 0;

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((tsz1 = d2)), ((tsz1 <> d2)), ((tsz1 < d2)), ((tsz1 <= d2)), ((tsz1 > d2)), ((tsz1 >= d2))
   GPU Projection: id, (tsz1 = d2), (tsz1 <> d2), (tsz1 < d2), (tsz1 <= d2), (tsz1 > d2), (tsz1 >= d2)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='bool', expr='(tsz1 = d2)'>, <slot=2, type='timestamptz', expr='tsz1'>, <slot=3, type='date', expr='d2'>, <slot=4, type='bool', expr='(tsz1 <> d2)'>, <slot=5, type='bool', expr='(tsz1 < d2)'>, <slot=6, type='bool', expr='(tsz1 <= d2)'>, <slot=7, type='bool', expr='(tsz1 > d2)'>, <slot=8, type='bool', expr='(tsz1 >= d2)'>
   KVecs-Buffer: nbytes: 38912, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-6fff, type='timestamptz', expr='tsz1'>, kvec2=<0x7000-97ff, type='date', expr='d2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=3, type='date' resno=3(d2)>, <slot=2, type='timestamptz' resno=16(tsz1)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-6fff, type='timestamptz', expr='tsz1'>, <slot=3, offset=0x7000-97ff, type='date', expr='d2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,5,6,7,8> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='bool'> arg={Func(bool)::timestamptz_eq_date args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}, {SaveExpr: <slot=4, type='bool'> arg={Func(bool)::timestamptz_ne_date args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}, {SaveExpr: <slot=5, type='bool'> arg={Func(bool)::timestamptz_lt_date args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}, {SaveExpr: <slot=6, type='bool'> arg={Func(bool)::timestamptz_le_date args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}, {SaveExpr: <slot=7, type='bool'> arg={Func(bool)::timestamptz_gt_date args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}, {SaveExpr: <slot=8, type='bool'> arg={Func(bool)::timestamptz_ge_date args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}]}
(10 rows)

SELECT id, tsz1 =  d2 v1, tsz1 <> d2 v2, tsz1 <  d2 v3,
           tsz1 <= d2 v4, tsz1 >  d2 v5, tsz1 >= d2 v6
  INTO test24g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, tsz1 =  d2 v1, tsz1 <> d2 v2, tsz1 <  d2 v3,
           tsz1 <= d2 v4, tsz1 >  d2 v5, tsz1 >= d2 v6
  INTO test24p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test24g EXCEPT SELECT * FROM test24p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test24p EXCEPT SELECT * FROM test24g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

-- 'time' <COMP> 'time'
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, t1 =  t2 v1, t1 <> t2 v2, t1 <  t2 v3,
           t1 <= t2 v4, t1 >  t2 v5, t1 >= t2 v6
  INTO test25g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((t1 = t2)), ((t1 <> t2)), ((t1 < t2)), ((t1 <= t2)), ((t1 > t2)), ((t1 >= t2))
   GPU Projection: id, (t1 = t2), (t1 <> t2), (t1 < t2), (t1 <= t2), (t1 > t2), (t1 >= t2)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='bool', expr='(t1 = t2)'>, <slot=2, type='time', expr='t1'>, <slot=3, type='time', expr='t2'>, <slot=4, type='bool', expr='(t1 <> t2)'>, <slot=5, type='bool', expr='(t1 < t2)'>, <slot=6, type='bool', expr='(t1 <= t2)'>, <slot=7, type='bool', expr='(t1 > t2)'>, <slot=8, type='bool', expr='(t1 >= t2)'>
   KVecs-Buffer: nbytes: 47104, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-6fff, type='time', expr='t1'>, kvec2=<0x7000-b7ff, type='time', expr='t2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='time' resno=4(t1)>, <slot=3, type='time' resno=5(t2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-6fff, type='time', expr='t1'>, <slot=3, offset=0x7000-b7ff, type='time', expr='t2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,5,6,7,8> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='bool'> arg={Func(bool)::time_eq args=[{Var(time): kvec=0x2800-7000, expr='t1'}, {Var(time): kvec=0x7000-b800, expr='t2'}]}}, {SaveExpr: <slot=4, type='bool'> arg={Func(bool)::time_ne args=[{Var(time): kvec=0x2800-7000, expr='t1'}, {Var(time): kvec=0x7000-b800, expr='t2'}]}}, {SaveExpr: <slot=5, type='bool'> arg={Func(bool)::time_lt args=[{Var(time): kvec=0x2800-7000, expr='t1'}, {Var(time): kvec=0x7000-b800, expr='t2'}]}}, {SaveExpr: <slot=6, type='bool'> arg={Func(bool)::time_le args=[{Var(time): kvec=0x2800-7000, expr='t1'}, {Var(time): kvec=0x7000-b800, expr='t2'}]}}, {SaveExpr: <slot=7, type='bool'> arg={Func(bool)::time_gt args=[{Var(time): kvec=0x2800-7000, expr='t1'}, {Var(time): kvec=0x7000-b800, expr='t2'}]}}, {SaveExpr: <slot=8, type='bool'> arg={Func(bool)::time_ge args=[{Var(time): kvec=0x2800-7000, expr='t1'}, {Var(time): kvec=0x7000-b800, expr='t2'}]}}]}
(10 rows)

SELECT id, t1 =  t2 v1, t1 <> t2 v2, t1 <  t2 v3,
           t1 <= t2 v4, t1 >  t2 v5, t1 >= t2 v6
  INTO test25g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, t1 =  t2 v1, t1 <> t2 v2, t1 <  t2 v3,
           t1 <= t2 v4, t1 >  t2 v5, t1 >= t2 v6
  INTO test25p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test25g EXCEPT SELECT * FROM test25p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test25p EXCEPT SELECT * FROM test25g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

-- 'timetz' <COMP> 'timetz'
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, tz1 =  tz2 v1, tz1 <> tz2 v2, tz1 <  tz2 v3,
           tz1 <= tz2 v4, tz1 >  tz2 v5, tz1 >= tz2 v6
  INTO test26g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((tz1 = tz2)), ((tz1 <> tz2)), ((tz1 < tz2)), ((tz1 <= tz2)), ((tz1 > tz2)), ((tz1 >= tz2))
   GPU Projection: id, (tz1 = tz2), (tz1 <> tz2), (tz1 < tz2), (tz1 <= tz2), (tz1 > tz2), (tz1 >= tz2)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='bool', expr='(tz1 = tz2)'>, <slot=2, type='timetz', expr='tz1'>, <slot=3, type='timetz', expr='tz2'>, <slot=4, type='bool', expr='(tz1 <> tz2)'>, <slot=5, type='bool', expr='(tz1 < tz2)'>, <slot=6, type='bool', expr='(tz1 <= tz2)'>, <slot=7, type='bool', expr='(tz1 > tz2)'>, <slot=8, type='bool', expr='(tz1 >= tz2)'>
   KVecs-Buffer: nbytes: 79872, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-afff, type='timetz', expr='tz1'>, kvec2=<0xb000-137ff, type='timetz', expr='tz2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='timetz' resno=8(tz1)>, <slot=3, type='timetz' resno=9(tz2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-afff, type='timetz', expr='tz1'>, <slot=3, offset=0xb000-137ff, type='timetz', expr='tz2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,5,6,7,8> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='bool'> arg={Func(bool)::timetz_eq args=[{Var(timetz): kvec=0x2800-b000, expr='tz1'}, {Var(timetz): kvec=0xb000-13800, expr='tz2'}]}}, {SaveExpr: <slot=4, type='bool'> arg={Func(bool)::timetz_ne args=[{Var(timetz): kvec=0x2800-b000, expr='tz1'}, {Var(timetz): kvec=0xb000-13800, expr='tz2'}]}}, {SaveExpr: <slot=5, type='bool'> arg={Func(bool)::timetz_lt args=[{Var(timetz): kvec=0x2800-b000, expr='tz1'}, {Var(timetz): kvec=0xb000-13800, expr='tz2'}]}}, {SaveExpr: <slot=6, type='bool'> arg={Func(bool)::timetz_le args=[{Var(timetz): kvec=0x2800-b000, expr='tz1'}, {Var(timetz): kvec=0xb000-13800, expr='tz2'}]}}, {SaveExpr: <slot=7, type='bool'> arg={Func(bool)::timetz_gt args=[{Var(timetz): kvec=0x2800-b000, expr='tz1'}, {Var(timetz): kvec=0xb000-13800, expr='tz2'}]}}, {SaveExpr: <slot=8, type='bool'> arg={Func(bool)::timetz_ge args=[{Var(timetz): kvec=0x2800-b000, expr='tz1'}, {Var(timetz): kvec=0xb000-13800, expr='tz2'}]}}]}
(10 rows)

SELECT id, tz1 =  tz2 v1, tz1 <> tz2 v2, tz1 <  tz2 v3,
           tz1 <= tz2 v4, tz1 >  tz2 v5, tz1 >= tz2 v6
  INTO test26g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, tz1 =  tz2 v1, tz1 <> tz2 v2, tz1 <  tz2 v3,
           tz1 <= tz2 v4, tz1 >  tz2 v5, tz1 >= tz2 v6
  INTO test26p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test26g EXCEPT SELECT * FROM test26p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test26p EXCEPT SELECT * FROM test26g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

-- 'timestamp' <COMP> 'timestamp'
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, ts1 =  ts2 v1, ts1 <> ts2 v2, ts1 <  ts2 v3,
           ts1 <= ts2 v4, ts1 >  ts2 v5, ts1 >= ts2 v6
  INTO test27g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((ts1 = ts2)), ((ts1 <> ts2)), ((ts1 < ts2)), ((ts1 <= ts2)), ((ts1 > ts2)), ((ts1 >= ts2))
   GPU Projection: id, (ts1 = ts2), (ts1 <> ts2), (ts1 < ts2), (ts1 <= ts2), (ts1 > ts2), (ts1 >= ts2)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='bool', expr='(ts1 = ts2)'>, <slot=2, type='timestamp', expr='ts1'>, <slot=3, type='timestamp', expr='ts2'>, <slot=4, type='bool', expr='(ts1 <> ts2)'>, <slot=5, type='bool', expr='(ts1 < ts2)'>, <slot=6, type='bool', expr='(ts1 <= ts2)'>, <slot=7, type='bool', expr='(ts1 > ts2)'>, <slot=8, type='bool', expr='(ts1 >= ts2)'>
   KVecs-Buffer: nbytes: 47104, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-6fff, type='timestamp', expr='ts1'>, kvec2=<0x7000-b7ff, type='timestamp', expr='ts2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='timestamp' resno=12(ts1)>, <slot=3, type='timestamp' resno=13(ts2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-6fff, type='timestamp', expr='ts1'>, <slot=3, offset=0x7000-b7ff, type='timestamp', expr='ts2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,5,6,7,8> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='bool'> arg={Func(bool)::timestamp_eq args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(timestamp): kvec=0x7000-b800, expr='ts2'}]}}, {SaveExpr: <slot=4, type='bool'> arg={Func(bool)::timestamp_ne args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(timestamp): kvec=0x7000-b800, expr='ts2'}]}}, {SaveExpr: <slot=5, type='bool'> arg={Func(bool)::timestamp_lt args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(timestamp): kvec=0x7000-b800, expr='ts2'}]}}, {SaveExpr: <slot=6, type='bool'> arg={Func(bool)::timestamp_le args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(timestamp): kvec=0x7000-b800, expr='ts2'}]}}, {SaveExpr: <slot=7, type='bool'> arg={Func(bool)::timestamp_gt args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(timestamp): kvec=0x7000-b800, expr='ts2'}]}}, {SaveExpr: <slot=8, type='bool'> arg={Func(bool)::timestamp_ge args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(timestamp): kvec=0x7000-b800, expr='ts2'}]}}]}
(10 rows)

SELECT id, ts1 =  ts2 v1, ts1 <> ts2 v2, ts1 <  ts2 v3,
           ts1 <= ts2 v4, ts1 >  ts2 v5, ts1 >= ts2 v6
  INTO test27g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, ts1 =  ts2 v1, ts1 <> ts2 v2, ts1 <  ts2 v3,
           ts1 <= ts2 v4, ts1 >  ts2 v5, ts1 >= ts2 v6
  INTO test27p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test27g EXCEPT SELECT * FROM test27p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test27p EXCEPT SELECT * FROM test27g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

-- 'timestamp' <COMP> 'date'
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, ts1 =  d2 v1, ts1 <> d2 v2, ts1 <  d2 v3,
           ts1 <= d2 v4, ts1 >  d2 v5, ts1 >= d2 v6
  INTO test28g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((ts1 = d2)), ((ts1 <> d2)), ((ts1 < d2)), ((ts1 <= d2)), ((ts1 > d2)), ((ts1 >= d2))
   GPU Projection: id, (ts1 = d2), (ts1 <> d2), (ts1 < d2), (ts1 <= d2), (ts1 > d2), (ts1 >= d2)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='bool', expr='(ts1 = d2)'>, <slot=2, type='timestamp', expr='ts1'>, <slot=3, type='date', expr='d2'>, <slot=4, type='bool', expr='(ts1 <> d2)'>, <slot=5, type='bool', expr='(ts1 < d2)'>, <slot=6, type='bool', expr='(ts1 <= d2)'>, <slot=7, type='bool', expr='(ts1 > d2)'>, <slot=8, type='bool', expr='(ts1 >= d2)'>
   KVecs-Buffer: nbytes: 38912, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-6fff, type='timestamp', expr='ts1'>, kvec2=<0x7000-97ff, type='date', expr='d2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=3, type='date' resno=3(d2)>, <slot=2, type='timestamp' resno=12(ts1)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-6fff, type='timestamp', expr='ts1'>, <slot=3, offset=0x7000-97ff, type='date', expr='d2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,5,6,7,8> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='bool'> arg={Func(bool)::timestamp_eq_date args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}, {SaveExpr: <slot=4, type='bool'> arg={Func(bool)::timestamp_ne_date args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}, {SaveExpr: <slot=5, type='bool'> arg={Func(bool)::timestamp_lt_date args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}, {SaveExpr: <slot=6, type='bool'> arg={Func(bool)::timestamp_le_date args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}, {SaveExpr: <slot=7, type='bool'> arg={Func(bool)::timestamp_gt_date args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}, {SaveExpr: <slot=8, type='bool'> arg={Func(bool)::timestamp_ge_date args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}]}
(10 rows)

SELECT id, ts1 =  d2 v1, ts1 <> d2 v2, ts1 <  d2 v3,
           ts1 <= d2 v4, ts1 >  d2 v5, ts1 >= d2 v6
  INTO test28g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, ts1 =  d2 v1, ts1 <> d2 v2, ts1 <  d2 v3,
           ts1 <= d2 v4, ts1 >  d2 v5, ts1 >= d2 v6
  INTO test28p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test28g EXCEPT SELECT * FROM test28p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test28p EXCEPT SELECT * FROM test28g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

-- 'timestamptz' <COMP> 'timestamptz'
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, tsz1 =  tsz2 v1, tsz1 <> tsz2 v2, tsz1 <  tsz2 v3,
           tsz1 <= tsz2 v4, tsz1 >  tsz2 v5, tsz1 >= tsz2 v6
  INTO test29g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((tsz1 = tsz2)), ((tsz1 <> tsz2)), ((tsz1 < tsz2)), ((tsz1 <= tsz2)), ((tsz1 > tsz2)), ((tsz1 >= tsz2))
   GPU Projection: id, (tsz1 = tsz2), (tsz1 <> tsz2), (tsz1 < tsz2), (tsz1 <= tsz2), (tsz1 > tsz2), (tsz1 >= tsz2)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='bool', expr='(tsz1 = tsz2)'>, <slot=2, type='timestamptz', expr='tsz1'>, <slot=3, type='timestamptz', expr='tsz2'>, <slot=4, type='bool', expr='(tsz1 <> tsz2)'>, <slot=5, type='bool', expr='(tsz1 < tsz2)'>, <slot=6, type='bool', expr='(tsz1 <= tsz2)'>, <slot=7, type='bool', expr='(tsz1 > tsz2)'>, <slot=8, type='bool', expr='(tsz1 >= tsz2)'>
   KVecs-Buffer: nbytes: 47104, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-6fff, type='timestamptz', expr='tsz1'>, kvec2=<0x7000-b7ff, type='timestamptz', expr='tsz2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='timestamptz' resno=16(tsz1)>, <slot=3, type='timestamptz' resno=17(tsz2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-6fff, type='timestamptz', expr='tsz1'>, <slot=3, offset=0x7000-b7ff, type='timestamptz', expr='tsz2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,5,6,7,8> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='bool'> arg={Func(bool)::timestamptz_eq args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=4, type='bool'> arg={Func(bool)::timestamptz_ne args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=5, type='bool'> arg={Func(bool)::timestamptz_lt args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=6, type='bool'> arg={Func(bool)::timestamptz_le args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=7, type='bool'> arg={Func(bool)::timestamptz_gt args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=8, type='bool'> arg={Func(bool)::timestamptz_ge args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}]}
(10 rows)

SELECT id, tsz1 =  tsz2 v1, tsz1 <> tsz2 v2, tsz1 <  tsz2 v3,
           tsz1 <= tsz2 v4, tsz1 >  tsz2 v5, tsz1 >= tsz2 v6
  INTO test29g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, tsz1 =  tsz2 v1, tsz1 <> tsz2 v2, tsz1 <  tsz2 v3,
           tsz1 <= tsz2 v4, tsz1 >  tsz2 v5, tsz1 >= tsz2 v6
  INTO test29p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test29g EXCEPT SELECT * FROM test29p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test29p EXCEPT SELECT * FROM test29g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

-- 'date' <COMP> 'timestamptz'
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, d1 =  tsz2 v1, d1 <> tsz2 v2, d1 <  tsz2 v3,
           d1 <= tsz2 v4, d1 >  tsz2 v5, d1 >= tsz2 v6
  INTO test30g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((d1 = tsz2)), ((d1 <> tsz2)), ((d1 < tsz2)), ((d1 <= tsz2)), ((d1 > tsz2)), ((d1 >= tsz2))
   GPU Projection: id, (d1 = tsz2), (d1 <> tsz2), (d1 < tsz2), (d1 <= tsz2), (d1 > tsz2), (d1 >= tsz2)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='bool', expr='(d1 = tsz2)'>, <slot=2, type='date', expr='d1'>, <slot=3, type='timestamptz', expr='tsz2'>, <slot=4, type='bool', expr='(d1 <> tsz2)'>, <slot=5, type='bool', expr='(d1 < tsz2)'>, <slot=6, type='bool', expr='(d1 <= tsz2)'>, <slot=7, type='bool', expr='(d1 > tsz2)'>, <slot=8, type='bool', expr='(d1 >= tsz2)'>
   KVecs-Buffer: nbytes: 38912, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-4fff, type='date', expr='d1'>, kvec2=<0x5000-97ff, type='timestamptz', expr='tsz2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='date' resno=2(d1)>, <slot=3, type='timestamptz' resno=17(tsz2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-4fff, type='date', expr='d1'>, <slot=3, offset=0x5000-97ff, type='timestamptz', expr='tsz2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,5,6,7,8> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='bool'> arg={Func(bool)::date_eq_timestamptz args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(timestamptz): kvec=0x5000-9800, expr='tsz2'}]}}, {SaveExpr: <slot=4, type='bool'> arg={Func(bool)::date_ne_timestamptz args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(timestamptz): kvec=0x5000-9800, expr='tsz2'}]}}, {SaveExpr: <slot=5, type='bool'> arg={Func(bool)::date_lt_timestamptz args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(timestamptz): kvec=0x5000-9800, expr='tsz2'}]}}, {SaveExpr: <slot=6, type='bool'> arg={Func(bool)::date_le_timestamptz args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(timestamptz): kvec=0x5000-9800, expr='tsz2'}]}}, {SaveExpr: <slot=7, type='bool'> arg={Func(bool)::date_gt_timestamptz args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(timestamptz): kvec=0x5000-9800, expr='tsz2'}]}}, {SaveExpr: <slot=8, type='bool'> arg={Func(bool)::date_ge_timestamptz args=[{Var(date): kvec=0x2800-5000, expr='d1'}, {Var(timestamptz): kvec=0x5000-9800, expr='tsz2'}]}}]}
(10 rows)

SELECT id, d1 =  tsz2 v1, d1 <> tsz2 v2, d1 <  tsz2 v3,
           d1 <= tsz2 v4, d1 >  tsz2 v5, d1 >= tsz2 v6
  INTO test30g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, d1 =  tsz2 v1, d1 <> tsz2 v2, d1 <  tsz2 v3,
           d1 <= tsz2 v4, d1 >  tsz2 v5, d1 >= tsz2 v6
  INTO test30p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test30g EXCEPT SELECT * FROM test30p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test30p EXCEPT SELECT * FROM test30g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

-- 'timestamptz' <COMP> 'date'
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, tsz1 =  d2 v1, tsz1 <> d2 v2, tsz1 <  d2 v3,
           tsz1 <= d2 v4, tsz1 >  d2 v5, tsz1 >= d2 v6
  INTO test31g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((tsz1 = d2)), ((tsz1 <> d2)), ((tsz1 < d2)), ((tsz1 <= d2)), ((tsz1 > d2)), ((tsz1 >= d2))
   GPU Projection: id, (tsz1 = d2), (tsz1 <> d2), (tsz1 < d2), (tsz1 <= d2), (tsz1 > d2), (tsz1 >= d2)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='bool', expr='(tsz1 = d2)'>, <slot=2, type='timestamptz', expr='tsz1'>, <slot=3, type='date', expr='d2'>, <slot=4, type='bool', expr='(tsz1 <> d2)'>, <slot=5, type='bool', expr='(tsz1 < d2)'>, <slot=6, type='bool', expr='(tsz1 <= d2)'>, <slot=7, type='bool', expr='(tsz1 > d2)'>, <slot=8, type='bool', expr='(tsz1 >= d2)'>
   KVecs-Buffer: nbytes: 38912, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-6fff, type='timestamptz', expr='tsz1'>, kvec2=<0x7000-97ff, type='date', expr='d2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=3, type='date' resno=3(d2)>, <slot=2, type='timestamptz' resno=16(tsz1)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-6fff, type='timestamptz', expr='tsz1'>, <slot=3, offset=0x7000-97ff, type='date', expr='d2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,5,6,7,8> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='bool'> arg={Func(bool)::timestamptz_eq_date args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}, {SaveExpr: <slot=4, type='bool'> arg={Func(bool)::timestamptz_ne_date args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}, {SaveExpr: <slot=5, type='bool'> arg={Func(bool)::timestamptz_lt_date args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}, {SaveExpr: <slot=6, type='bool'> arg={Func(bool)::timestamptz_le_date args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}, {SaveExpr: <slot=7, type='bool'> arg={Func(bool)::timestamptz_gt_date args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}, {SaveExpr: <slot=8, type='bool'> arg={Func(bool)::timestamptz_ge_date args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(date): kvec=0x7000-9800, expr='d2'}]}}]}
(10 rows)

SELECT id, tsz1 =  d2 v1, tsz1 <> d2 v2, tsz1 <  d2 v3,
           tsz1 <= d2 v4, tsz1 >  d2 v5, tsz1 >= d2 v6
  INTO test31g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, tsz1 =  d2 v1, tsz1 <> d2 v2, tsz1 <  d2 v3,
           tsz1 <= d2 v4, tsz1 >  d2 v5, tsz1 >= d2 v6
  INTO test31p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test31g EXCEPT SELECT * FROM test31p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test31p EXCEPT SELECT * FROM test31g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

-- 'timestamp' <COMP> 'timestamptz'
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, ts1 =  tsz2 v1, ts1 <> tsz2 v2, ts1 <  tsz2 v3,
           ts1 <= tsz2 v4, ts1 >  tsz2 v5, ts1 >= tsz2 v6
  INTO test32g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((ts1 = tsz2)), ((ts1 <> tsz2)), ((ts1 < tsz2)), ((ts1 <= tsz2)), ((ts1 > tsz2)), ((ts1 >= tsz2))
   GPU Projection: id, (ts1 = tsz2), (ts1 <> tsz2), (ts1 < tsz2), (ts1 <= tsz2), (ts1 > tsz2), (ts1 >= tsz2)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='bool', expr='(ts1 = tsz2)'>, <slot=2, type='timestamp', expr='ts1'>, <slot=3, type='timestamptz', expr='tsz2'>, <slot=4, type='bool', expr='(ts1 <> tsz2)'>, <slot=5, type='bool', expr='(ts1 < tsz2)'>, <slot=6, type='bool', expr='(ts1 <= tsz2)'>, <slot=7, type='bool', expr='(ts1 > tsz2)'>, <slot=8, type='bool', expr='(ts1 >= tsz2)'>
   KVecs-Buffer: nbytes: 47104, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-6fff, type='timestamp', expr='ts1'>, kvec2=<0x7000-b7ff, type='timestamptz', expr='tsz2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='timestamp' resno=12(ts1)>, <slot=3, type='timestamptz' resno=17(tsz2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-6fff, type='timestamp', expr='ts1'>, <slot=3, offset=0x7000-b7ff, type='timestamptz', expr='tsz2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,5,6,7,8> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='bool'> arg={Func(bool)::timestamp_eq_timestamptz args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=4, type='bool'> arg={Func(bool)::timestamp_ne_timestamptz args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=5, type='bool'> arg={Func(bool)::timestamp_lt_timestamptz args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=6, type='bool'> arg={Func(bool)::timestamp_le_timestamptz args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=7, type='bool'> arg={Func(bool)::timestamp_gt_timestamptz args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=8, type='bool'> arg={Func(bool)::timestamp_ge_timestamptz args=[{Var(timestamp): kvec=0x2800-7000, expr='ts1'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}]}
(10 rows)

SELECT id, ts1 =  tsz2 v1, ts1 <> tsz2 v2, ts1 <  tsz2 v3,
           ts1 <= tsz2 v4, ts1 >  tsz2 v5, ts1 >= tsz2 v6
  INTO test32g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, ts1 =  tsz2 v1, ts1 <> tsz2 v2, ts1 <  tsz2 v3,
           ts1 <= tsz2 v4, ts1 >  tsz2 v5, ts1 >= tsz2 v6
  INTO test32p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test32g EXCEPT SELECT * FROM test32p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test32p EXCEPT SELECT * FROM test32g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

-- 'timestamptz' <COMP> 'timestamp'
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, tsz1 =  tsz2 v1, tsz1 <> tsz2 v2, tsz1 <  tsz2 v3,
           tsz1 <= tsz2 v4, tsz1 >  tsz2 v5, tsz1 >= tsz2 v6
  INTO test33g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((tsz1 = tsz2)), ((tsz1 <> tsz2)), ((tsz1 < tsz2)), ((tsz1 <= tsz2)), ((tsz1 > tsz2)), ((tsz1 >= tsz2))
   GPU Projection: id, (tsz1 = tsz2), (tsz1 <> tsz2), (tsz1 < tsz2), (tsz1 <= tsz2), (tsz1 > tsz2), (tsz1 >= tsz2)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='bool', expr='(tsz1 = tsz2)'>, <slot=2, type='timestamptz', expr='tsz1'>, <slot=3, type='timestamptz', expr='tsz2'>, <slot=4, type='bool', expr='(tsz1 <> tsz2)'>, <slot=5, type='bool', expr='(tsz1 < tsz2)'>, <slot=6, type='bool', expr='(tsz1 <= tsz2)'>, <slot=7, type='bool', expr='(tsz1 > tsz2)'>, <slot=8, type='bool', expr='(tsz1 >= tsz2)'>
   KVecs-Buffer: nbytes: 47104, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-6fff, type='timestamptz', expr='tsz1'>, kvec2=<0x7000-b7ff, type='timestamptz', expr='tsz2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='timestamptz' resno=16(tsz1)>, <slot=3, type='timestamptz' resno=17(tsz2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-6fff, type='timestamptz', expr='tsz1'>, <slot=3, offset=0x7000-b7ff, type='timestamptz', expr='tsz2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,5,6,7,8> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='bool'> arg={Func(bool)::timestamptz_eq args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=4, type='bool'> arg={Func(bool)::timestamptz_ne args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=5, type='bool'> arg={Func(bool)::timestamptz_lt args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=6, type='bool'> arg={Func(bool)::timestamptz_le args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=7, type='bool'> arg={Func(bool)::timestamptz_gt args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=8, type='bool'> arg={Func(bool)::timestamptz_ge args=[{Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}]}
(10 rows)

SELECT id, tsz1 =  tsz2 v1, tsz1 <> tsz2 v2, tsz1 <  tsz2 v3,
           tsz1 <= tsz2 v4, tsz1 >  tsz2 v5, tsz1 >= tsz2 v6
  INTO test33g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, tsz1 =  tsz2 v1, tsz1 <> tsz2 v2, tsz1 <  tsz2 v3,
           tsz1 <= tsz2 v4, tsz1 >  tsz2 v5, tsz1 >= tsz2 v6
  INTO test33p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test33g EXCEPT SELECT * FROM test33p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test33p EXCEPT SELECT * FROM test33g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

-- 'interval' <COMP> 'interval'
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, iv1 =  iv2 v1, iv1 <> iv2 v2, iv1 <  iv2 v3,
           iv1 <= iv2 v4, iv1 >  iv2 v5, iv1 >= iv2 v6
  INTO test34g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((iv1 = iv2)), ((iv1 <> iv2)), ((iv1 < iv2)), ((iv1 <= iv2)), ((iv1 > iv2)), ((iv1 >= iv2))
   GPU Projection: id, (iv1 = iv2), (iv1 <> iv2), (iv1 < iv2), (iv1 <= iv2), (iv1 > iv2), (iv1 >= iv2)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='bool', expr='(iv1 = iv2)'>, <slot=2, type='interval', expr='iv1'>, <slot=3, type='interval', expr='iv2'>, <slot=4, type='bool', expr='(iv1 <> iv2)'>, <slot=5, type='bool', expr='(iv1 < iv2)'>, <slot=6, type='bool', expr='(iv1 <= iv2)'>, <slot=7, type='bool', expr='(iv1 > iv2)'>, <slot=8, type='bool', expr='(iv1 >= iv2)'>
   KVecs-Buffer: nbytes: 79872, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-afff, type='interval', expr='iv1'>, kvec2=<0xb000-137ff, type='interval', expr='iv2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='interval' resno=20(iv1)>, <slot=3, type='interval' resno=21(iv2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-afff, type='interval', expr='iv1'>, <slot=3, offset=0xb000-137ff, type='interval', expr='iv2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,4,5,6,7,8> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='bool'> arg={Func(bool)::interval_eq args=[{Var(interval): kvec=0x2800-b000, expr='iv1'}, {Var(interval): kvec=0xb000-13800, expr='iv2'}]}}, {SaveExpr: <slot=4, type='bool'> arg={Func(bool)::interval_ne args=[{Var(interval): kvec=0x2800-b000, expr='iv1'}, {Var(interval): kvec=0xb000-13800, expr='iv2'}]}}, {SaveExpr: <slot=5, type='bool'> arg={Func(bool)::interval_lt args=[{Var(interval): kvec=0x2800-b000, expr='iv1'}, {Var(interval): kvec=0xb000-13800, expr='iv2'}]}}, {SaveExpr: <slot=6, type='bool'> arg={Func(bool)::interval_le args=[{Var(interval): kvec=0x2800-b000, expr='iv1'}, {Var(interval): kvec=0xb000-13800, expr='iv2'}]}}, {SaveExpr: <slot=7, type='bool'> arg={Func(bool)::interval_gt args=[{Var(interval): kvec=0x2800-b000, expr='iv1'}, {Var(interval): kvec=0xb000-13800, expr='iv2'}]}}, {SaveExpr: <slot=8, type='bool'> arg={Func(bool)::interval_ge args=[{Var(interval): kvec=0x2800-b000, expr='iv1'}, {Var(interval): kvec=0xb000-13800, expr='iv2'}]}}]}
(10 rows)

SELECT id, iv1 =  iv2 v1, iv1 <> iv2 v2, iv1 <  iv2 v3,
           iv1 <= iv2 v4, iv1 >  iv2 v5, iv1 >= iv2 v6
  INTO test34g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, iv1 =  iv2 v1, iv1 <> iv2 v2, iv1 <  iv2 v3,
           iv1 <= iv2 v4, iv1 >  iv2 v5, iv1 >= iv2 v6
  INTO test34p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test34g EXCEPT SELECT * FROM test34p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test34p EXCEPT SELECT * FROM test34g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

-- test for overlaps functions
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, (t1,t2)     OVERLAPS (t3,t4)     v1,
           (t1,t3)     OVERLAPS (t2,t4)     v2,
           (tz1,tz2)   OVERLAPS (tz3,tz4)   v3,
           (tz1,tz3)   OVERLAPS (tz2,tz4)   v4,
           (ts1,ts2)   OVERLAPS (ts3,ts4)   v5,
           (ts1,ts3)   OVERLAPS (ts2,ts4)   v6,
           (tsz1,tsz2) OVERLAPS (tsz3,tsz4) v7,
           (tsz1,tsz3) OVERLAPS (tsz2,tsz4) v8
  INTO test40g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, ((t1, t2) OVERLAPS (t3, t4)), ((t1, t3) OVERLAPS (t2, t4)), ((tz1, tz2) OVERLAPS (tz3, tz4)), ((tz1, tz3) OVERLAPS (tz2, tz4)), ((ts1, ts2) OVERLAPS (ts3, ts4)), ((ts1, ts3) OVERLAPS (ts2, ts4)), ((tsz1, tsz2) OVERLAPS (tsz3, tsz4)), ((tsz1, tsz3) OVERLAPS (tsz2, tsz4))
   GPU Projection: id, t1, t2, t3, t4, tz1, tz2, tz3, tz4, ts1, ts2, ts3, ts4, tsz1, tsz2, tsz3, tsz4
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='time', expr='t1'>, <slot=2, type='time', expr='t2'>, <slot=3, type='time', expr='t3'>, <slot=4, type='time', expr='t4'>, <slot=5, type='timetz', expr='tz1'>, <slot=6, type='timetz', expr='tz2'>, <slot=7, type='timetz', expr='tz3'>, <slot=8, type='timetz', expr='tz4'>, <slot=9, type='timestamp', expr='ts1'>, <slot=10, type='timestamp', expr='ts2'>, <slot=11, type='timestamp', expr='ts3'>, <slot=12, type='timestamp', expr='ts4'>, <slot=13, type='timestamptz', expr='tsz1'>, <slot=14, type='timestamptz', expr='tsz2'>, <slot=15, type='timestamptz', expr='tsz3'>, <slot=16, type='timestamptz', expr='tsz4'>
   KVecs-Buffer: nbytes: 370688, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-6fff, type='time', expr='t1'>, kvec2=<0x7000-b7ff, type='time', expr='t2'>, kvec3=<0xb800-ffff, type='time', expr='t3'>, kvec4=<0x10000-147ff, type='time', expr='t4'>, kvec5=<0x14800-1cfff, type='timetz', expr='tz1'>, kvec6=<0x1d000-257ff, type='timetz', expr='tz2'>, kvec7=<0x25800-2dfff, type='timetz', expr='tz3'>, kvec8=<0x2e000-367ff, type='timetz', expr='tz4'>, kvec9=<0x36800-3afff, type='timestamp', expr='ts1'>, kvec10=<0x3b000-3f7ff, type='timestamp', expr='ts2'>, kvec11=<0x3f800-43fff, type='timestamp', expr='ts3'>, kvec12=<0x44000-487ff, type='timestamp', expr='ts4'>, kvec13=<0x48800-4cfff, type='timestamptz', expr='tsz1'>, kvec14=<0x4d000-517ff, type='timestamptz', expr='tsz2'>, kvec15=<0x51800-55fff, type='timestamptz', expr='tsz3'>, kvec16=<0x56000-5a7ff, type='timestamptz', expr='tsz4'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=1, type='time' resno=4(t1)>, <slot=2, type='time' resno=5(t2)>, <slot=3, type='time' resno=6(t3)>, <slot=4, type='time' resno=7(t4)>, <slot=5, type='timetz' resno=8(tz1)>, <slot=6, type='timetz' resno=9(tz2)>, <slot=7, type='timetz' resno=10(tz3)>, <slot=8, type='timetz' resno=11(tz4)>, <slot=9, type='timestamp' resno=12(ts1)>, <slot=10, type='timestamp' resno=13(ts2)>, <slot=11, type='timestamp' resno=14(ts3)>, <slot=12, type='timestamp' resno=15(ts4)>, <slot=13, type='timestamptz' resno=16(tsz1)>, <slot=14, type='timestamptz' resno=17(tsz2)>, <slot=15, type='timestamptz' resno=18(tsz3)>, <slot=16, type='timestamptz' resno=19(tsz4)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=1, offset=0x2800-6fff, type='time', expr='t1'>, <slot=2, offset=0x7000-b7ff, type='time', expr='t2'>, <slot=3, offset=0xb800-ffff, type='time', expr='t3'>, <slot=4, offset=0x10000-147ff, type='time', expr='t4'>, <slot=5, offset=0x14800-1cfff, type='timetz', expr='tz1'>, <slot=6, offset=0x1d000-257ff, type='timetz', expr='tz2'>, <slot=7, offset=0x25800-2dfff, type='timetz', expr='tz3'>, <slot=8, offset=0x2e000-367ff, type='timetz', expr='tz4'>, <slot=9, offset=0x36800-3afff, type='timestamp', expr='ts1'>, <slot=10, offset=0x3b000-3f7ff, type='timestamp', expr='ts2'>, <slot=11, offset=0x3f800-43fff, type='timestamp', expr='ts3'>, <slot=12, offset=0x44000-487ff, type='timestamp', expr='ts4'>, <slot=13, offset=0x48800-4cfff, type='timestamptz', expr='tsz1'>, <slot=14, offset=0x4d000-517ff, type='timestamptz', expr='tsz2'>, <slot=15, offset=0x51800-55fff, type='timestamptz', expr='tsz3'>, <slot=16, offset=0x56000-5a7ff, type='timestamptz', expr='tsz4'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='time'> arg={Var(time): kvec=0x2800-7000, expr='t1'}}, {SaveExpr: <slot=2, type='time'> arg={Var(time): kvec=0x7000-b800, expr='t2'}}, {SaveExpr: <slot=3, type='time'> arg={Var(time): kvec=0xb800-10000, expr='t3'}}, {SaveExpr: <slot=4, type='time'> arg={Var(time): kvec=0x10000-14800, expr='t4'}}, {SaveExpr: <slot=5, type='timetz'> arg={Var(timetz): kvec=0x14800-1d000, expr='tz1'}}, {SaveExpr: <slot=6, type='timetz'> arg={Var(timetz): kvec=0x1d000-25800, expr='tz2'}}, {SaveExpr: <slot=7, type='timetz'> arg={Var(timetz): kvec=0x25800-2e000, expr='tz3'}}, {SaveExpr: <slot=8, type='timetz'> arg={Var(timetz): kvec=0x2e000-36800, expr='tz4'}}, {SaveExpr: <slot=9, type='timestamp'> arg={Var(timestamp): kvec=0x36800-3b000, expr='ts1'}}, {SaveExpr: <slot=10, type='timestamp'> arg={Var(timestamp): kvec=0x3b000-3f800, expr='ts2'}}, {SaveExpr: <slot=11, type='timestamp'> arg={Var(timestamp): kvec=0x3f800-44000, expr='ts3'}}, {SaveExpr: <slot=12, type='timestamp'> arg={Var(timestamp): kvec=0x44000-48800, expr='ts4'}}, {SaveExpr: <slot=13, type='timestamptz'> arg={Var(timestamptz): kvec=0x48800-4d000, expr='tsz1'}}, {SaveExpr: <slot=14, type='timestamptz'> arg={Var(timestamptz): kvec=0x4d000-51800, expr='tsz2'}}, {SaveExpr: <slot=15, type='timestamptz'> arg={Var(timestamptz): kvec=0x51800-56000, expr='tsz3'}}, {SaveExpr: <slot=16, type='timestamptz'> arg={Var(timestamptz): kvec=0x56000-5a800, expr='tsz4'}}]}
(10 rows)

SELECT id, (t1,t2)     OVERLAPS (t3,t4)     v1,
           (t1,t3)     OVERLAPS (t2,t4)     v2,
           (tz1,tz2)   OVERLAPS (tz3,tz4)   v3,
           (tz1,tz3)   OVERLAPS (tz2,tz4)   v4,
           (ts1,ts2)   OVERLAPS (ts3,ts4)   v5,
           (ts1,ts3)   OVERLAPS (ts2,ts4)   v6,
           (tsz1,tsz2) OVERLAPS (tsz3,tsz4) v7,
           (tsz1,tsz3) OVERLAPS (tsz2,tsz4) v8
  INTO test40g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, (t1,t2)     OVERLAPS (t3,t4)     v1,
           (t1,t3)     OVERLAPS (t2,t4)     v2,
           (tz1,tz2)   OVERLAPS (tz3,tz4)   v3,
           (tz1,tz3)   OVERLAPS (tz2,tz4)   v4,
           (ts1,ts2)   OVERLAPS (ts3,ts4)   v5,
           (ts1,ts3)   OVERLAPS (ts2,ts4)   v6,
           (tsz1,tsz2) OVERLAPS (tsz3,tsz4) v7,
           (tsz1,tsz3) OVERLAPS (tsz2,tsz4) v8
  INTO test40p
  FROM rt_datetime
 WHERE id > 0;
(SELECT * FROM test40g EXCEPT SELECT * FROM test40p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 
----+----+----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test40p EXCEPT SELECT * FROM test40g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 
----+----+----+----+----+----+----+----+----
(0 rows)

-- extract() on 'time' type
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, EXTRACT (microseconds FROM t1) v1,
           EXTRACT (milliseconds FROM t2) v2,
           EXTRACT (second FROM t3) v3,
           EXTRACT (minute FROM t4) v4,
           EXTRACT (hour FROM t1) v5
  INTO test41g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, (EXTRACT(microseconds FROM t1)), (EXTRACT(milliseconds FROM t2)), (EXTRACT(second FROM t3)), (EXTRACT(minute FROM t4)), (EXTRACT(hour FROM t1))
   GPU Projection: id, EXTRACT(microseconds FROM t1), EXTRACT(milliseconds FROM t2), EXTRACT(second FROM t3), EXTRACT(minute FROM t4), EXTRACT(hour FROM t1)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='numeric', expr='EXTRACT(microseconds FROM t1)'>, <slot=2, type='time', expr='t1'>, <slot=3, type='numeric', expr='EXTRACT(milliseconds FROM t2)'>, <slot=4, type='time', expr='t2'>, <slot=5, type='numeric', expr='EXTRACT(second FROM t3)'>, <slot=6, type='time', expr='t3'>, <slot=7, type='numeric', expr='EXTRACT(minute FROM t4)'>, <slot=8, type='time', expr='t4'>, <slot=9, type='numeric', expr='EXTRACT(hour FROM t1)'>
   KVecs-Buffer: nbytes: 83968, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-6fff, type='time', expr='t1'>, kvec2=<0x7000-b7ff, type='time', expr='t2'>, kvec3=<0xb800-ffff, type='time', expr='t3'>, kvec4=<0x10000-147ff, type='time', expr='t4'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='time' resno=4(t1)>, <slot=4, type='time' resno=5(t2)>, <slot=6, type='time' resno=6(t3)>, <slot=8, type='time' resno=7(t4)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-6fff, type='time', expr='t1'>, <slot=4, offset=0x7000-b7ff, type='time', expr='t2'>, <slot=6, offset=0xb800-ffff, type='time', expr='t3'>, <slot=8, offset=0x10000-147ff, type='time', expr='t4'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,3,5,7,9> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='microseconds'}, {Var(time): kvec=0x2800-7000, expr='t1'}]}}, {SaveExpr: <slot=3, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='milliseconds'}, {Var(time): kvec=0x7000-b800, expr='t2'}]}}, {SaveExpr: <slot=5, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='second'}, {Var(time): kvec=0xb800-10000, expr='t3'}]}}, {SaveExpr: <slot=7, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='minute'}, {Var(time): kvec=0x10000-14800, expr='t4'}]}}, {SaveExpr: <slot=9, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='hour'}, {Var(time): kvec=0x2800-7000, expr='t1'}]}}]}
(10 rows)

SELECT id, EXTRACT (microseconds FROM t1) v1,
           EXTRACT (milliseconds FROM t2) v2,
           EXTRACT (second FROM t3) v3,
           EXTRACT (minute FROM t4) v4,
           EXTRACT (hour FROM t1) v5
  INTO test41g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, EXTRACT (microseconds FROM t1) v1,
           EXTRACT (milliseconds FROM t2) v2,
           EXTRACT (second FROM t3) v3,
           EXTRACT (minute FROM t4) v4,
           EXTRACT (hour FROM t1) v5
  INTO test41p
  FROM rt_datetime
 WHERE id > 0;
SELECT * FROM test41g AS a, test41p AS b WHERE a.id=b.id AND
(
  ABS(a.v1 - b.v1) > 0.1
  OR ABS(a.v2 - b.v2) > 0.1
  OR ABS(a.v3 - b.v3) > 0.1
  OR ABS(a.v4 - b.v4) > 0.1
  OR ABS(a.v5 - b.v5) > 0.1
) LIMIT 5;
 id | v1 | v2 | v3 | v4 | v5 | id | v1 | v2 | v3 | v4 | v5 
----+----+----+----+----+----+----+----+----+----+----+----
(0 rows)

-- extract() on 'timetz' type
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, EXTRACT (microseconds FROM tz1) v1,
           EXTRACT (milliseconds FROM tz2) v2,
           EXTRACT (second FROM tz3) v3,
           EXTRACT (minute FROM tz4) v4,
           EXTRACT (hour FROM tz1) v5
  INTO test42g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, (EXTRACT(microseconds FROM tz1)), (EXTRACT(milliseconds FROM tz2)), (EXTRACT(second FROM tz3)), (EXTRACT(minute FROM tz4)), (EXTRACT(hour FROM tz1))
   GPU Projection: id, EXTRACT(microseconds FROM tz1), EXTRACT(milliseconds FROM tz2), EXTRACT(second FROM tz3), EXTRACT(minute FROM tz4), EXTRACT(hour FROM tz1)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='numeric', expr='EXTRACT(microseconds FROM tz1)'>, <slot=2, type='timetz', expr='tz1'>, <slot=3, type='numeric', expr='EXTRACT(milliseconds FROM tz2)'>, <slot=4, type='timetz', expr='tz2'>, <slot=5, type='numeric', expr='EXTRACT(second FROM tz3)'>, <slot=6, type='timetz', expr='tz3'>, <slot=7, type='numeric', expr='EXTRACT(minute FROM tz4)'>, <slot=8, type='timetz', expr='tz4'>, <slot=9, type='numeric', expr='EXTRACT(hour FROM tz1)'>
   KVecs-Buffer: nbytes: 149504, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-afff, type='timetz', expr='tz1'>, kvec2=<0xb000-137ff, type='timetz', expr='tz2'>, kvec3=<0x13800-1bfff, type='timetz', expr='tz3'>, kvec4=<0x1c000-247ff, type='timetz', expr='tz4'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='timetz' resno=8(tz1)>, <slot=4, type='timetz' resno=9(tz2)>, <slot=6, type='timetz' resno=10(tz3)>, <slot=8, type='timetz' resno=11(tz4)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-afff, type='timetz', expr='tz1'>, <slot=4, offset=0xb000-137ff, type='timetz', expr='tz2'>, <slot=6, offset=0x13800-1bfff, type='timetz', expr='tz3'>, <slot=8, offset=0x1c000-247ff, type='timetz', expr='tz4'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,3,5,7,9> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='microseconds'}, {Var(timetz): kvec=0x2800-b000, expr='tz1'}]}}, {SaveExpr: <slot=3, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='milliseconds'}, {Var(timetz): kvec=0xb000-13800, expr='tz2'}]}}, {SaveExpr: <slot=5, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='second'}, {Var(timetz): kvec=0x13800-1c000, expr='tz3'}]}}, {SaveExpr: <slot=7, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='minute'}, {Var(timetz): kvec=0x1c000-24800, expr='tz4'}]}}, {SaveExpr: <slot=9, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='hour'}, {Var(timetz): kvec=0x2800-b000, expr='tz1'}]}}]}
(10 rows)

SELECT id, EXTRACT (microseconds FROM tz1) v1,
           EXTRACT (milliseconds FROM tz2) v2,
           EXTRACT (second FROM tz3) v3,
           EXTRACT (minute FROM tz4) v4,
           EXTRACT (hour FROM tz1) v5
  INTO test42g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, EXTRACT (microseconds FROM tz1) v1,
           EXTRACT (milliseconds FROM tz2) v2,
           EXTRACT (second FROM tz3) v3,
           EXTRACT (minute FROM tz4) v4,
           EXTRACT (hour FROM tz1) v5
  INTO test42p
  FROM rt_datetime
 WHERE id > 0;
SELECT * FROM test42g AS a, test42p AS b WHERE a.id=b.id AND
(
  ABS(a.v1 - b.v1) > 0.1
  OR ABS(a.v2 - b.v2) > 0.1
  OR ABS(a.v3 - b.v3) > 0.1
  OR ABS(a.v4 - b.v4) > 0.1
  OR ABS(a.v5 - b.v5) > 0.1
) LIMIT 5;
 id | v1 | v2 | v3 | v4 | v5 | id | v1 | v2 | v3 | v4 | v5 
----+----+----+----+----+----+----+----+----+----+----+----
(0 rows)

-- extract() on 'timestamp' type
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, EXTRACT (century         FROM ts1) v1,
           EXTRACT (day             FROM ts2) v2,
           EXTRACT (decade          FROM ts1) v3,
           EXTRACT (dow             FROM ts2) v4,
           EXTRACT (doy             FROM ts1) v5,
           EXTRACT (epoch           FROM ts2) v6,
           EXTRACT (hour            FROM ts1) v7,
           EXTRACT (isodow          FROM ts2) v8,
           EXTRACT (isoyear         FROM ts1) v9,
           EXTRACT (microseconds    FROM ts2) v10,
           EXTRACT (millennium      FROM ts1) v11,
           EXTRACT (milliseconds    FROM ts2) v12,
           EXTRACT (minute          FROM ts1) v13,
           EXTRACT (month           FROM ts2) v14,
           EXTRACT (quarter         FROM ts1) v15,
           EXTRACT (second          FROM ts2) v16,
           EXTRACT (week            FROM ts2) v17,
           EXTRACT (year            FROM ts1) v18
  INTO test43g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, (EXTRACT(century FROM ts1)), (EXTRACT(day FROM ts2)), (EXTRACT(decade FROM ts1)), (EXTRACT(dow FROM ts2)), (EXTRACT(doy FROM ts1)), (EXTRACT(epoch FROM ts2)), (EXTRACT(hour FROM ts1)), (EXTRACT(isodow FROM ts2)), (EXTRACT(isoyear FROM ts1)), (EXTRACT(microseconds FROM ts2)), (EXTRACT(millennium FROM ts1)), (EXTRACT(milliseconds FROM ts2)), (EXTRACT(minute FROM ts1)), (EXTRACT(month FROM ts2)), (EXTRACT(quarter FROM ts1)), (EXTRACT(second FROM ts2)), (EXTRACT(week FROM ts2)), (EXTRACT(year FROM ts1))
   GPU Projection: id, EXTRACT(century FROM ts1), EXTRACT(day FROM ts2), EXTRACT(decade FROM ts1), EXTRACT(dow FROM ts2), EXTRACT(doy FROM ts1), EXTRACT(epoch FROM ts2), EXTRACT(hour FROM ts1), EXTRACT(isodow FROM ts2), EXTRACT(isoyear FROM ts1), EXTRACT(microseconds FROM ts2), EXTRACT(millennium FROM ts1), EXTRACT(milliseconds FROM ts2), EXTRACT(minute FROM ts1), EXTRACT(month FROM ts2), EXTRACT(quarter FROM ts1), EXTRACT(second FROM ts2), EXTRACT(week FROM ts2), EXTRACT(year FROM ts1)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='numeric', expr='EXTRACT(century FROM ts1)'>, <slot=2, type='timestamp', expr='ts1'>, <slot=3, type='numeric', expr='EXTRACT(day FROM ts2)'>, <slot=4, type='timestamp', expr='ts2'>, <slot=5, type='numeric', expr='EXTRACT(decade FROM ts1)'>, <slot=6, type='numeric', expr='EXTRACT(dow FROM ts2)'>, <slot=7, type='numeric', expr='EXTRACT(doy FROM ts1)'>, <slot=8, type='numeric', expr='EXTRACT(epoch FROM ts2)'>, <slot=9, type='numeric', expr='EXTRACT(hour FROM ts1)'>, <slot=10, type='numeric', expr='EXTRACT(isodow FROM ts2)'>, <slot=11, type='numeric', expr='EXTRACT(isoyear FROM ts1)'>, <slot=12, type='numeric', expr='EXTRACT(microseconds FROM ts2)'>, <slot=13, type='numeric', expr='EXTRACT(millennium FROM ts1)'>, <slot=14, type='numeric', expr='EXTRACT(milliseconds FROM ts2)'>, <slot=15, type='numeric', expr='EXTRACT(minute FROM ts1)'>, <slot=16, type='numeric', expr='EXTRACT(month FROM ts2)'>, <slot=17, type='numeric', expr='EXTRACT(quarter FROM ts1)'>, <slot=18, type='numeric', expr='EXTRACT(second FROM ts2)'>, <slot=19, type='numeric', expr='EXTRACT(week FROM ts2)'>, <slot=20, type='numeric', expr='EXTRACT(year FROM ts1)'>
   KVecs-Buffer: nbytes: 47104, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-6fff, type='timestamp', expr='ts1'>, kvec2=<0x7000-b7ff, type='timestamp', expr='ts2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='timestamp' resno=12(ts1)>, <slot=4, type='timestamp' resno=13(ts2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-6fff, type='timestamp', expr='ts1'>, <slot=4, offset=0x7000-b7ff, type='timestamp', expr='ts2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='century'}, {Var(timestamp): kvec=0x2800-7000, expr='ts1'}]}}, {SaveExpr: <slot=3, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='day'}, {Var(timestamp): kvec=0x7000-b800, expr='ts2'}]}}, {SaveExpr: <slot=5, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='decade'}, {Var(timestamp): kvec=0x2800-7000, expr='ts1'}]}}, {SaveExpr: <slot=6, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='dow'}, {Var(timestamp): kvec=0x7000-b800, expr='ts2'}]}}, {SaveExpr: <slot=7, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='doy'}, {Var(timestamp): kvec=0x2800-7000, expr='ts1'}]}}, {SaveExpr: <slot=8, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='epoch'}, {Var(timestamp): kvec=0x7000-b800, expr='ts2'}]}}, {SaveExpr: <slot=9, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='hour'}, {Var(timestamp): kvec=0x2800-7000, expr='ts1'}]}}, {SaveExpr: <slot=10, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='isodow'}, {Var(timestamp): kvec=0x7000-b800, expr='ts2'}]}}, {SaveExpr: <slot=11, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='isoyear'}, {Var(timestamp): kvec=0x2800-7000, expr='ts1'}]}}, {SaveExpr: <slot=12, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='microseconds'}, {Var(timestamp): kvec=0x7000-b800, expr='ts2'}]}}, {SaveExpr: <slot=13, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='millennium'}, {Var(timestamp): kvec=0x2800-7000, expr='ts1'}]}}, {SaveExpr: <slot=14, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='milliseconds'}, {Var(timestamp): kvec=0x7000-b800, expr='ts2'}]}}, {SaveExpr: <slot=15, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='minute'}, {Var(timestamp): kvec=0x2800-7000, expr='ts1'}]}}, {SaveExpr: <slot=16, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='month'}, {Var(timestamp): kvec=0x7000-b800, expr='ts2'}]}}, {SaveExpr: <slot=17, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='quarter'}, {Var(timestamp): kvec=0x2800-7000, expr='ts1'}]}}, {SaveExpr: <slot=18, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='second'}, {Var(timestamp): kvec=0x7000-b800, expr='ts2'}]}}, {SaveExpr: <slot=19, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='week'}, {Var(timestamp): kvec=0x7000-b800, expr='ts2'}]}}, {SaveExpr: <slot=20, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='year'}, {Var(timestamp): kvec=0x2800-7000, expr='ts1'}]}}]}
(10 rows)

SELECT id, EXTRACT (century         FROM ts1) v1,
           EXTRACT (day             FROM ts2) v2,
           EXTRACT (decade          FROM ts1) v3,
           EXTRACT (dow             FROM ts2) v4,
           EXTRACT (doy             FROM ts1) v5,
           EXTRACT (epoch           FROM ts2) v6,
           EXTRACT (hour            FROM ts1) v7,
           EXTRACT (isodow          FROM ts2) v8,
           EXTRACT (isoyear         FROM ts1) v9,
           EXTRACT (microseconds    FROM ts2) v10,
           EXTRACT (millennium      FROM ts1) v11,
           EXTRACT (milliseconds    FROM ts2) v12,
           EXTRACT (minute          FROM ts1) v13,
           EXTRACT (month           FROM ts2) v14,
           EXTRACT (quarter         FROM ts1) v15,
           EXTRACT (second          FROM ts2) v16,
           EXTRACT (week            FROM ts2) v17,
           EXTRACT (year            FROM ts1) v18
  INTO test43g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, EXTRACT (century         FROM ts1) v1,
           EXTRACT (day             FROM ts2) v2,
           EXTRACT (decade          FROM ts1) v3,
           EXTRACT (dow             FROM ts2) v4,
           EXTRACT (doy             FROM ts1) v5,
           EXTRACT (epoch           FROM ts2) v6,
           EXTRACT (hour            FROM ts1) v7,
           EXTRACT (isodow          FROM ts2) v8,
           EXTRACT (isoyear         FROM ts1) v9,
           EXTRACT (microseconds    FROM ts2) v10,
           EXTRACT (millennium      FROM ts1) v11,
           EXTRACT (milliseconds    FROM ts2) v12,
           EXTRACT (minute          FROM ts1) v13,
           EXTRACT (month           FROM ts2) v14,
           EXTRACT (quarter         FROM ts1) v15,
           EXTRACT (second          FROM ts2) v16,
           EXTRACT (week            FROM ts2) v17,
           EXTRACT (year            FROM ts1) v18
  INTO test43p
  FROM rt_datetime
 WHERE id > 0;
SELECT * FROM test43g AS a, test43p AS b WHERE a.id=b.id AND
(
  ABS(a.v1 - b.v1) > 0.1
  OR ABS(a.v2 - b.v2) > 0.1
  OR ABS(a.v3 - b.v3) > 0.1
  OR ABS(a.v4 - b.v4) > 0.1
  OR ABS(a.v5 - b.v5) > 0.1
  OR ABS(a.v6 - b.v6) > 0.1
  OR ABS(a.v7 - b.v7) > 0.1
  OR ABS(a.v8 - b.v8) > 0.1
  OR ABS(a.v9 - b.v9) > 0.1
  OR ABS(a.v10 - b.v10) > 0.1
  OR ABS(a.v11 - b.v11) > 0.1
  OR ABS(a.v12 - b.v12) > 0.1
  OR ABS(a.v13 - b.v13) > 0.1
  OR ABS(a.v14 - b.v14) > 0.1
  OR ABS(a.v15 - b.v15) > 0.1
  OR ABS(a.v16 - b.v16) > 0.1
  OR ABS(a.v17 - b.v17) > 0.1
  OR ABS(a.v18 - b.v18) > 0.1
) LIMIT 5;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13 | v14 | v15 | v16 | v17 | v18 | id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13 | v14 | v15 | v16 | v17 | v18 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----+-----+-----+-----+-----+-----+----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----+-----+-----+-----+-----+-----
(0 rows)

-- extract() on 'timestamptz' type
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, EXTRACT (century         FROM tsz1) v1,
           EXTRACT (day             FROM tsz2) v2,
           EXTRACT (decade          FROM tsz1) v3,
           EXTRACT (dow             FROM tsz2) v4,
           EXTRACT (doy             FROM tsz1) v5,
           EXTRACT (epoch           FROM tsz2) v6,
           EXTRACT (hour            FROM tsz1) v7,
           EXTRACT (isodow          FROM tsz2) v8,
           EXTRACT (isoyear         FROM tsz1) v9,
           EXTRACT (microseconds    FROM tsz2) v10,
           EXTRACT (millennium      FROM tsz1) v11,
           EXTRACT (milliseconds    FROM tsz2) v12,
           EXTRACT (minute          FROM tsz1) v13,
           EXTRACT (month           FROM tsz2) v14,
           EXTRACT (quarter         FROM tsz1) v15,
           EXTRACT (second          FROM tsz2) v16,
           EXTRACT (timezone        FROM tsz1) v17,
           EXTRACT (timezone_hour   FROM tsz2) v18,
           EXTRACT (timezone_minute FROM tsz1) v19,
           EXTRACT (week            FROM tsz2) v20,
           EXTRACT (year            FROM tsz1) v21
  INTO test44g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, (EXTRACT(century FROM tsz1)), (EXTRACT(day FROM tsz2)), (EXTRACT(decade FROM tsz1)), (EXTRACT(dow FROM tsz2)), (EXTRACT(doy FROM tsz1)), (EXTRACT(epoch FROM tsz2)), (EXTRACT(hour FROM tsz1)), (EXTRACT(isodow FROM tsz2)), (EXTRACT(isoyear FROM tsz1)), (EXTRACT(microseconds FROM tsz2)), (EXTRACT(millennium FROM tsz1)), (EXTRACT(milliseconds FROM tsz2)), (EXTRACT(minute FROM tsz1)), (EXTRACT(month FROM tsz2)), (EXTRACT(quarter FROM tsz1)), (EXTRACT(second FROM tsz2)), (EXTRACT(timezone FROM tsz1)), (EXTRACT(timezone_hour FROM tsz2)), (EXTRACT(timezone_minute FROM tsz1)), (EXTRACT(week FROM tsz2)), (EXTRACT(year FROM tsz1))
   GPU Projection: id, EXTRACT(century FROM tsz1), EXTRACT(day FROM tsz2), EXTRACT(decade FROM tsz1), EXTRACT(dow FROM tsz2), EXTRACT(doy FROM tsz1), EXTRACT(epoch FROM tsz2), EXTRACT(hour FROM tsz1), EXTRACT(isodow FROM tsz2), EXTRACT(isoyear FROM tsz1), EXTRACT(microseconds FROM tsz2), EXTRACT(millennium FROM tsz1), EXTRACT(milliseconds FROM tsz2), EXTRACT(minute FROM tsz1), EXTRACT(month FROM tsz2), EXTRACT(quarter FROM tsz1), EXTRACT(second FROM tsz2), EXTRACT(timezone FROM tsz1), EXTRACT(timezone_hour FROM tsz2), EXTRACT(timezone_minute FROM tsz1), EXTRACT(week FROM tsz2), EXTRACT(year FROM tsz1)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='numeric', expr='EXTRACT(century FROM tsz1)'>, <slot=2, type='timestamptz', expr='tsz1'>, <slot=3, type='numeric', expr='EXTRACT(day FROM tsz2)'>, <slot=4, type='timestamptz', expr='tsz2'>, <slot=5, type='numeric', expr='EXTRACT(decade FROM tsz1)'>, <slot=6, type='numeric', expr='EXTRACT(dow FROM tsz2)'>, <slot=7, type='numeric', expr='EXTRACT(doy FROM tsz1)'>, <slot=8, type='numeric', expr='EXTRACT(epoch FROM tsz2)'>, <slot=9, type='numeric', expr='EXTRACT(hour FROM tsz1)'>, <slot=10, type='numeric', expr='EXTRACT(isodow FROM tsz2)'>, <slot=11, type='numeric', expr='EXTRACT(isoyear FROM tsz1)'>, <slot=12, type='numeric', expr='EXTRACT(microseconds FROM tsz2)'>, <slot=13, type='numeric', expr='EXTRACT(millennium FROM tsz1)'>, <slot=14, type='numeric', expr='EXTRACT(milliseconds FROM tsz2)'>, <slot=15, type='numeric', expr='EXTRACT(minute FROM tsz1)'>, <slot=16, type='numeric', expr='EXTRACT(month FROM tsz2)'>, <slot=17, type='numeric', expr='EXTRACT(quarter FROM tsz1)'>, <slot=18, type='numeric', expr='EXTRACT(second FROM tsz2)'>, <slot=19, type='numeric', expr='EXTRACT(timezone FROM tsz1)'>, <slot=20, type='numeric', expr='EXTRACT(timezone_hour FROM tsz2)'>, <slot=21, type='numeric', expr='EXTRACT(timezone_minute FROM tsz1)'>, <slot=22, type='numeric', expr='EXTRACT(week FROM tsz2)'>, <slot=23, type='numeric', expr='EXTRACT(year FROM tsz1)'>
   KVecs-Buffer: nbytes: 47104, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-6fff, type='timestamptz', expr='tsz1'>, kvec2=<0x7000-b7ff, type='timestamptz', expr='tsz2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='timestamptz' resno=16(tsz1)>, <slot=4, type='timestamptz' resno=17(tsz2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-6fff, type='timestamptz', expr='tsz1'>, <slot=4, offset=0x7000-b7ff, type='timestamptz', expr='tsz2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='century'}, {Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}]}}, {SaveExpr: <slot=3, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='day'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=5, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='decade'}, {Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}]}}, {SaveExpr: <slot=6, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='dow'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=7, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='doy'}, {Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}]}}, {SaveExpr: <slot=8, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='epoch'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=9, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='hour'}, {Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}]}}, {SaveExpr: <slot=10, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='isodow'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=11, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='isoyear'}, {Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}]}}, {SaveExpr: <slot=12, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='microseconds'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=13, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='millennium'}, {Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}]}}, {SaveExpr: <slot=14, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='milliseconds'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=15, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='minute'}, {Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}]}}, {SaveExpr: <slot=16, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='month'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=17, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='quarter'}, {Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}]}}, {SaveExpr: <slot=18, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='second'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=19, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='timezone'}, {Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}]}}, {SaveExpr: <slot=20, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='timezone_hour'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=21, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='timezone_minute'}, {Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}]}}, {SaveExpr: <slot=22, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='week'}, {Var(timestamptz): kvec=0x7000-b800, expr='tsz2'}]}}, {SaveExpr: <slot=23, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='year'}, {Var(timestamptz): kvec=0x2800-7000, expr='tsz1'}]}}]}
(10 rows)

SELECT id, EXTRACT (century         FROM tsz1) v1,
           EXTRACT (day             FROM tsz2) v2,
           EXTRACT (decade          FROM tsz1) v3,
           EXTRACT (dow             FROM tsz2) v4,
           EXTRACT (doy             FROM tsz1) v5,
           EXTRACT (epoch           FROM tsz2) v6,
           EXTRACT (hour            FROM tsz1) v7,
           EXTRACT (isodow          FROM tsz2) v8,
           EXTRACT (isoyear         FROM tsz1) v9,
           EXTRACT (microseconds    FROM tsz2) v10,
           EXTRACT (millennium      FROM tsz1) v11,
           EXTRACT (milliseconds    FROM tsz2) v12,
           EXTRACT (minute          FROM tsz1) v13,
           EXTRACT (month           FROM tsz2) v14,
           EXTRACT (quarter         FROM tsz1) v15,
           EXTRACT (second          FROM tsz2) v16,
           EXTRACT (timezone        FROM tsz1) v17,
           EXTRACT (timezone_hour   FROM tsz2) v18,
           EXTRACT (timezone_minute FROM tsz1) v19,
           EXTRACT (week            FROM tsz2) v20,
           EXTRACT (year            FROM tsz1) v21
  INTO test44g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, EXTRACT (century         FROM tsz1) v1,
           EXTRACT (day             FROM tsz2) v2,
           EXTRACT (decade          FROM tsz1) v3,
           EXTRACT (dow             FROM tsz2) v4,
           EXTRACT (doy             FROM tsz1) v5,
           EXTRACT (epoch           FROM tsz2) v6,
           EXTRACT (hour            FROM tsz1) v7,
           EXTRACT (isodow          FROM tsz2) v8,
           EXTRACT (isoyear         FROM tsz1) v9,
           EXTRACT (microseconds    FROM tsz2) v10,
           EXTRACT (millennium      FROM tsz1) v11,
           EXTRACT (milliseconds    FROM tsz2) v12,
           EXTRACT (minute          FROM tsz1) v13,
           EXTRACT (month           FROM tsz2) v14,
           EXTRACT (quarter         FROM tsz1) v15,
           EXTRACT (second          FROM tsz2) v16,
           EXTRACT (timezone        FROM tsz1) v17,
           EXTRACT (timezone_hour   FROM tsz2) v18,
           EXTRACT (timezone_minute FROM tsz1) v19,
           EXTRACT (week            FROM tsz2) v20,
           EXTRACT (year            FROM tsz1) v21
  INTO test44p
  FROM rt_datetime
 WHERE id > 0;
SELECT * FROM test44g AS a, test44p AS b WHERE a.id=b.id AND
(
  ABS(a.v1 - b.v1) > 0.1
  OR ABS(a.v2 - b.v2) > 0.1
  OR ABS(a.v3 - b.v3) > 0.1
  OR ABS(a.v4 - b.v4) > 0.1
  OR ABS(a.v5 - b.v5) > 0.1
  OR ABS(a.v6 - b.v6) > 0.1
  OR ABS(a.v7 - b.v7) > 0.1
  OR ABS(a.v8 - b.v8) > 0.1
  OR ABS(a.v9 - b.v9) > 0.1
  OR ABS(a.v10 - b.v10) > 0.1
  OR ABS(a.v11 - b.v11) > 0.1
  OR ABS(a.v12 - b.v12) > 0.1
  OR ABS(a.v13 - b.v13) > 0.1
  OR ABS(a.v14 - b.v14) > 0.1
  OR ABS(a.v15 - b.v15) > 0.1
  OR ABS(a.v16 - b.v16) > 0.1
  OR ABS(a.v17 - b.v17) > 0.1
  OR ABS(a.v18 - b.v18) > 0.1
  OR ABS(a.v19 - b.v19) > 0.1
  OR ABS(a.v20 - b.v20) > 0.1
  OR ABS(a.v21 - b.v21) > 0.1
) LIMIT 5;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13 | v14 | v15 | v16 | v17 | v18 | v19 | v20 | v21 | id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13 | v14 | v15 | v16 | v17 | v18 | v19 | v20 | v21 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----
(0 rows)

-- extract() on 'interval' type
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, EXTRACT (microseconds FROM iv1) v1,
           EXTRACT (milliseconds FROM iv2) v2,
           EXTRACT (second       FROM iv1) v3,
           EXTRACT (minute       FROM iv2) v4,
           EXTRACT (hour         FROM iv1) v5,
           EXTRACT (day          FROM iv2) v6,
           EXTRACT (month        FROM iv1) v7,
           EXTRACT (quarter      FROM iv2) v8,
           EXTRACT (year         FROM iv1) v9,
           EXTRACT (decade       FROM iv2) v10,
           EXTRACT (century      FROM iv1) v11,
           EXTRACT (millennium   FROM iv2) v12
  INTO test45g
  FROM rt_datetime
 WHERE id > 0;


 Custom Scan (GpuScan) on regtest_dtype_time_temp.rt_datetime
   Output: id, (EXTRACT(microseconds FROM iv1)), (EXTRACT(milliseconds FROM iv2)), (EXTRACT(second FROM iv1)), (EXTRACT(minute FROM iv2)), (EXTRACT(hour FROM iv1)), (EXTRACT(day FROM iv2)), (EXTRACT(month FROM iv1)), (EXTRACT(quarter FROM iv2)), (EXTRACT(year FROM iv1)), (EXTRACT(decade FROM iv2)), (EXTRACT(century FROM iv1)), (EXTRACT(millennium FROM iv2))
   GPU Projection: id, EXTRACT(microseconds FROM iv1), EXTRACT(milliseconds FROM iv2), EXTRACT(second FROM iv1), EXTRACT(minute FROM iv2), EXTRACT(hour FROM iv1), EXTRACT(day FROM iv2), EXTRACT(month FROM iv1), EXTRACT(quarter FROM iv2), EXTRACT(year FROM iv1), EXTRACT(decade FROM iv2), EXTRACT(century FROM iv1), EXTRACT(millennium FROM iv2)
   GPU Scan Quals: (id > 0) [rows: 3000 -> 3000]
   KVars-Slot: <slot=0, type='int4', expr='id'>, <slot=1, type='numeric', expr='EXTRACT(microseconds FROM iv1)'>, <slot=2, type='interval', expr='iv1'>, <slot=3, type='numeric', expr='EXTRACT(milliseconds FROM iv2)'>, <slot=4, type='interval', expr='iv2'>, <slot=5, type='numeric', expr='EXTRACT(second FROM iv1)'>, <slot=6, type='numeric', expr='EXTRACT(minute FROM iv2)'>, <slot=7, type='numeric', expr='EXTRACT(hour FROM iv1)'>, <slot=8, type='numeric', expr='EXTRACT(day FROM iv2)'>, <slot=9, type='numeric', expr='EXTRACT(month FROM iv1)'>, <slot=10, type='numeric', expr='EXTRACT(quarter FROM iv2)'>, <slot=11, type='numeric', expr='EXTRACT(year FROM iv1)'>, <slot=12, type='numeric', expr='EXTRACT(decade FROM iv2)'>, <slot=13, type='numeric', expr='EXTRACT(century FROM iv1)'>, <slot=14, type='numeric', expr='EXTRACT(millennium FROM iv2)'>
   KVecs-Buffer: nbytes: 79872, ndims: 2, items=[kvec0=<0x0000-27ff, type='int4', expr='id'>, kvec1=<0x2800-afff, type='interval', expr='iv1'>, kvec2=<0xb000-137ff, type='interval', expr='iv2'>]
   LoadVars OpCode: {Packed items[0]={LoadVars(depth=0): kvars=[<slot=0, type='int4' resno=1(id)>, <slot=2, type='interval' resno=20(iv1)>, <slot=4, type='interval' resno=21(iv2)>]}}
   MoveVars OpCode: {Packed items[0]={MoveVars(depth=0): items=[<slot=0, offset=0x0000-27ff, type='int4', expr='id'>, <slot=2, offset=0x2800-afff, type='interval', expr='iv1'>, <slot=4, offset=0xb000-137ff, type='interval', expr='iv2'>]}}}
   Scan Quals OpCode: {Func(bool)::int4gt args=[{Var(int4): slot=0, expr='id'}, {Const(int4): value='0'}]}
   Projection OpCode: {Projection: layout=<0,1,3,5,6,7,8,9,10,11,12,13,14> args=[{SaveExpr: <slot=0, type='int4'> arg={Var(int4): kvec=0x0000-2800, expr='id'}}, {SaveExpr: <slot=1, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='microseconds'}, {Var(interval): kvec=0x2800-b000, expr='iv1'}]}}, {SaveExpr: <slot=3, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='milliseconds'}, {Var(interval): kvec=0xb000-13800, expr='iv2'}]}}, {SaveExpr: <slot=5, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='second'}, {Var(interval): kvec=0x2800-b000, expr='iv1'}]}}, {SaveExpr: <slot=6, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='minute'}, {Var(interval): kvec=0xb000-13800, expr='iv2'}]}}, {SaveExpr: <slot=7, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='hour'}, {Var(interval): kvec=0x2800-b000, expr='iv1'}]}}, {SaveExpr: <slot=8, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='day'}, {Var(interval): kvec=0xb000-13800, expr='iv2'}]}}, {SaveExpr: <slot=9, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='month'}, {Var(interval): kvec=0x2800-b000, expr='iv1'}]}}, {SaveExpr: <slot=10, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='quarter'}, {Var(interval): kvec=0xb000-13800, expr='iv2'}]}}, {SaveExpr: <slot=11, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='year'}, {Var(interval): kvec=0x2800-b000, expr='iv1'}]}}, {SaveExpr: <slot=12, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='decade'}, {Var(interval): kvec=0xb000-13800, expr='iv2'}]}}, {SaveExpr: <slot=13, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='century'}, {Var(interval): kvec=0x2800-b000, expr='iv1'}]}}, {SaveExpr: <slot=14, type='numeric'> arg={Func(numeric)::extract args=[{Const(text): value='millennium'}, {Var(interval): kvec=0xb000-13800, expr='iv2'}]}}]}
(10 rows)

SELECT id, EXTRACT (microseconds FROM iv1) v1,
           EXTRACT (milliseconds FROM iv2) v2,
           EXTRACT (second       FROM iv1) v3,
           EXTRACT (minute       FROM iv2) v4,
           EXTRACT (hour         FROM iv1) v5,
           EXTRACT (day          FROM iv2) v6,
           EXTRACT (month        FROM iv1) v7,
           EXTRACT (quarter      FROM iv2) v8,
           EXTRACT (year         FROM iv1) v9,
           EXTRACT (decade       FROM iv2) v10,
           EXTRACT (century      FROM iv1) v11,
           EXTRACT (millennium   FROM iv2) v12
  INTO test45g
  FROM rt_datetime
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, EXTRACT (microseconds FROM iv1) v1,
           EXTRACT (milliseconds FROM iv2) v2,
           EXTRACT (second       FROM iv1) v3,
           EXTRACT (minute       FROM iv2) v4,
           EXTRACT (hour         FROM iv1) v5,
           EXTRACT (day          FROM iv2) v6,
           EXTRACT (month        FROM iv1) v7,
           EXTRACT (quarter      FROM iv2) v8,
           EXTRACT (year         FROM iv1) v9,
           EXTRACT (decade       FROM iv2) v10,
           EXTRACT (century      FROM iv1) v11,
           EXTRACT (millennium   FROM iv2) v12
  INTO test45p
  FROM rt_datetime
 WHERE id > 0;
SELECT * FROM test45g AS a, test45p AS b WHERE a.id=b.id AND
(
  ABS(a.v1 - b.v1) > 0.1
  OR ABS(a.v2 - b.v2) > 0.1
  OR ABS(a.v3 - b.v3) > 0.1
  OR ABS(a.v4 - b.v4) > 0.1
  OR ABS(a.v5 - b.v5) > 0.1
  OR ABS(a.v6 - b.v6) > 0.1
  OR ABS(a.v7 - b.v7) > 0.1
  OR ABS(a.v8 - b.v8) > 0.1
  OR ABS(a.v9 - b.v9) > 0.1
  OR ABS(a.v10 - b.v10) > 0.1
  OR ABS(a.v11 - b.v11) > 0.1
  OR ABS(a.v12 - b.v12) > 0.1
) LIMIT 5;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----+----+----+----+----+----+----+----+----+----+----+-----+-----+-----
(0 rows)

-- cleanup temporary resource
SET client_min_messages = error;
DROP SCHEMA regtest_dtype_time_temp CASCADE;
