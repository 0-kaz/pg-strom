--#
--#       Gpu Scan Explain TestCases. 
--#
set enable_seqscan to off;
set enable_bitmapscan to off;
set enable_indexscan to off;
set random_page_cost=1000000;   --# force off index_scan.
set enable_gpuhashjoin to off;
set enable_gpupreagg to off;
set enable_gpusort to off;
set client_min_messages to warning;
set pg_strom.enabled=off;
-- normal
explain (verbose, costs off, timing off) select  smlint_x    from strom_test order by id limit 100;
                QUERY PLAN                 
-------------------------------------------
 Limit
   Output: smlint_x, id
   ->  Sort
         Output: smlint_x, id
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: smlint_x, id
(7 rows)

explain (verbose, costs off, timing off) select  integer_x    from strom_test order by id limit 100;
                QUERY PLAN                 
-------------------------------------------
 Limit
   Output: integer_x, id
   ->  Sort
         Output: integer_x, id
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: integer_x, id
(7 rows)

explain (verbose, costs off, timing off) select  bigint_x    from strom_test order by id limit 100;
                QUERY PLAN                 
-------------------------------------------
 Limit
   Output: bigint_x, id
   ->  Sort
         Output: bigint_x, id
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: bigint_x, id
(7 rows)

explain (verbose, costs off, timing off) select  real_x    from strom_test order by id limit 100;
                QUERY PLAN                 
-------------------------------------------
 Limit
   Output: real_x, id
   ->  Sort
         Output: real_x, id
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: real_x, id
(7 rows)

explain (verbose, costs off, timing off) select  float_x    from strom_test order by id limit 100;
                QUERY PLAN                 
-------------------------------------------
 Limit
   Output: float_x, id
   ->  Sort
         Output: float_x, id
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: float_x, id
(7 rows)

explain (verbose, costs off, timing off) select  nume_x    from strom_test order by id limit 100;
                QUERY PLAN                 
-------------------------------------------
 Limit
   Output: nume_x, id
   ->  Sort
         Output: nume_x, id
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: nume_x, id
(7 rows)

explain (verbose, costs off, timing off) select  smlsrl_x    from strom_test order by id limit 100;
                QUERY PLAN                 
-------------------------------------------
 Limit
   Output: smlsrl_x, id
   ->  Sort
         Output: smlsrl_x, id
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: smlsrl_x, id
(7 rows)

explain (verbose, costs off, timing off) select  serial_x    from strom_test order by id limit 100;
                QUERY PLAN                 
-------------------------------------------
 Limit
   Output: serial_x, id
   ->  Sort
         Output: serial_x, id
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: serial_x, id
(7 rows)

explain (verbose, costs off, timing off) select  bigsrl_x    from strom_test order by id limit 100;
                QUERY PLAN                 
-------------------------------------------
 Limit
   Output: bigsrl_x, id
   ->  Sort
         Output: bigsrl_x, id
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: bigsrl_x, id
(7 rows)

-- where
explain (verbose, costs off, timing off) select  smlint_x    from strom_test where abs(smlint_x) between 1 and 1000 order by id limit 100;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit
   Output: smlint_x, id
   ->  Sort
         Output: smlint_x, id
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: smlint_x, id
               Filter: ((abs(strom_test.smlint_x) >= 1) AND (abs(strom_test.smlint_x) <= 1000))
(8 rows)

explain (verbose, costs off, timing off) select  integer_x    from strom_test where abs(integer_x) between 100000 and 1000000 order by id limit 100;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Limit
   Output: integer_x, id
   ->  Sort
         Output: integer_x, id
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: integer_x, id
               Filter: ((abs(strom_test.integer_x) >= 100000) AND (abs(strom_test.integer_x) <= 1000000))
(8 rows)

explain (verbose, costs off, timing off) select  bigint_x    from strom_test where abs(bigint_x) between 1000000000000 and 10000000000000 order by id limit 100;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: bigint_x, id
   ->  Sort
         Output: bigint_x, id
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: bigint_x, id
               Filter: ((abs(strom_test.bigint_x) >= 1000000000000::bigint) AND (abs(strom_test.bigint_x) <= 10000000000000::bigint))
(8 rows)

explain (verbose, costs off, timing off) select  real_x    from strom_test where abs(real_x) between 0.001 and 0.01 order by id limit 100;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: real_x, id
   ->  Sort
         Output: real_x, id
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: real_x, id
               Filter: ((abs(strom_test.real_x) >= 0.001::double precision) AND (abs(strom_test.real_x) <= 0.01::double precision))
(8 rows)

explain (verbose, costs off, timing off) select  float_x    from strom_test where abs(float_x) between 0.001 and 0.01 order by id limit 100;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: float_x, id
   ->  Sort
         Output: float_x, id
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: float_x, id
               Filter: ((abs(strom_test.float_x) >= 0.001::double precision) AND (abs(strom_test.float_x) <= 0.01::double precision))
(8 rows)

explain (verbose, costs off, timing off) select  nume_x    from strom_test where abs(nume_x) between 0.001 and 0.01 order by id limit 100;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit
   Output: nume_x, id
   ->  Sort
         Output: nume_x, id
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: nume_x, id
               Filter: ((abs(strom_test.nume_x) >= 0.001) AND (abs(strom_test.nume_x) <= 0.01))
(8 rows)

explain (verbose, costs off, timing off) select  smlsrl_x    from strom_test where abs(smlsrl_x) between 1 and 1000 order by id limit 100;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit
   Output: smlsrl_x, id
   ->  Sort
         Output: smlsrl_x, id
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: smlsrl_x, id
               Filter: ((abs(strom_test.smlsrl_x) >= 1) AND (abs(strom_test.smlsrl_x) <= 1000))
(8 rows)

explain (verbose, costs off, timing off) select  serial_x    from strom_test where abs(serial_x) between 100000 and 1000000 order by id limit 100;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit
   Output: serial_x, id
   ->  Sort
         Output: serial_x, id
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: serial_x, id
               Filter: ((abs(strom_test.serial_x) >= 100000) AND (abs(strom_test.serial_x) <= 1000000))
(8 rows)

explain (verbose, costs off, timing off) select  bigsrl_x    from strom_test where abs(bigsrl_x) between 1000000000000 and 10000000000000 order by id limit 100;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: bigsrl_x, id
   ->  Sort
         Output: bigsrl_x, id
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: bigsrl_x, id
               Filter: ((abs(strom_test.bigsrl_x) >= 1000000000000::bigint) AND (abs(strom_test.bigsrl_x) <= 10000000000000::bigint))
(8 rows)

-- NULL
explain (verbose, costs off, timing off) select  id,smlint_x    from strom_test where abs(smlint_x) IS NULL order by id limit 100;
                        QUERY PLAN                        
----------------------------------------------------------
 Limit
   Output: id, smlint_x
   ->  Sort
         Output: id, smlint_x
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: id, smlint_x
               Filter: (abs(strom_test.smlint_x) IS NULL)
(8 rows)

explain (verbose, costs off, timing off) select  id,integer_x    from strom_test where abs(integer_x) IS NULL order by id limit 100;
                        QUERY PLAN                         
-----------------------------------------------------------
 Limit
   Output: id, integer_x
   ->  Sort
         Output: id, integer_x
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: id, integer_x
               Filter: (abs(strom_test.integer_x) IS NULL)
(8 rows)

explain (verbose, costs off, timing off) select  id,bigint_x    from strom_test where abs(bigint_x) IS NULL order by id limit 100;
                        QUERY PLAN                        
----------------------------------------------------------
 Limit
   Output: id, bigint_x
   ->  Sort
         Output: id, bigint_x
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: id, bigint_x
               Filter: (abs(strom_test.bigint_x) IS NULL)
(8 rows)

explain (verbose, costs off, timing off) select  id,real_x    from strom_test where abs(real_x) IS NULL order by id limit 100;
                       QUERY PLAN                       
--------------------------------------------------------
 Limit
   Output: id, real_x
   ->  Sort
         Output: id, real_x
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: id, real_x
               Filter: (abs(strom_test.real_x) IS NULL)
(8 rows)

explain (verbose, costs off, timing off) select  id,float_x    from strom_test where abs(float_x) IS NULL order by id limit 100;
                       QUERY PLAN                        
---------------------------------------------------------
 Limit
   Output: id, float_x
   ->  Sort
         Output: id, float_x
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: id, float_x
               Filter: (abs(strom_test.float_x) IS NULL)
(8 rows)

explain (verbose, costs off, timing off) select  id,nume_x    from strom_test where abs(nume_x) IS NULL order by id limit 100;
                       QUERY PLAN                       
--------------------------------------------------------
 Limit
   Output: id, nume_x
   ->  Sort
         Output: id, nume_x
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: id, nume_x
               Filter: (abs(strom_test.nume_x) IS NULL)
(8 rows)

explain (verbose, costs off, timing off) select  id,smlsrl_x    from strom_test where abs(smlsrl_x) IS NULL order by id limit 100;
                        QUERY PLAN                        
----------------------------------------------------------
 Limit
   Output: id, smlsrl_x
   ->  Sort
         Output: id, smlsrl_x
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: id, smlsrl_x
               Filter: (abs(strom_test.smlsrl_x) IS NULL)
(8 rows)

explain (verbose, costs off, timing off) select  id,serial_x    from strom_test where abs(serial_x) IS NULL order by id limit 100;
                        QUERY PLAN                        
----------------------------------------------------------
 Limit
   Output: id, serial_x
   ->  Sort
         Output: id, serial_x
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: id, serial_x
               Filter: (abs(strom_test.serial_x) IS NULL)
(8 rows)

explain (verbose, costs off, timing off) select  id,bigsrl_x    from strom_test where abs(bigsrl_x) IS NULL order by id limit 100;
                        QUERY PLAN                        
----------------------------------------------------------
 Limit
   Output: id, bigsrl_x
   ->  Sort
         Output: id, bigsrl_x
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: id, bigsrl_x
               Filter: (abs(strom_test.bigsrl_x) IS NULL)
(8 rows)

-- NOT NULL
explain (verbose, costs off, timing off) select  id,smlint_x    from strom_test where abs(smlint_x) IS NOT NULL order by id limit 100;
                          QUERY PLAN                          
--------------------------------------------------------------
 Limit
   Output: id, smlint_x
   ->  Sort
         Output: id, smlint_x
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: id, smlint_x
               Filter: (abs(strom_test.smlint_x) IS NOT NULL)
(8 rows)

explain (verbose, costs off, timing off) select  id,integer_x    from strom_test where abs(integer_x) IS NOT NULL order by id limit 100;
                          QUERY PLAN                           
---------------------------------------------------------------
 Limit
   Output: id, integer_x
   ->  Sort
         Output: id, integer_x
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: id, integer_x
               Filter: (abs(strom_test.integer_x) IS NOT NULL)
(8 rows)

explain (verbose, costs off, timing off) select  id,bigint_x    from strom_test where abs(bigint_x) IS NOT NULL order by id limit 100;
                          QUERY PLAN                          
--------------------------------------------------------------
 Limit
   Output: id, bigint_x
   ->  Sort
         Output: id, bigint_x
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: id, bigint_x
               Filter: (abs(strom_test.bigint_x) IS NOT NULL)
(8 rows)

explain (verbose, costs off, timing off) select  id,real_x    from strom_test where abs(real_x) IS NOT NULL order by id limit 100;
                         QUERY PLAN                         
------------------------------------------------------------
 Limit
   Output: id, real_x
   ->  Sort
         Output: id, real_x
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: id, real_x
               Filter: (abs(strom_test.real_x) IS NOT NULL)
(8 rows)

explain (verbose, costs off, timing off) select  id,float_x    from strom_test where abs(float_x) IS NOT NULL order by id limit 100;
                         QUERY PLAN                          
-------------------------------------------------------------
 Limit
   Output: id, float_x
   ->  Sort
         Output: id, float_x
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: id, float_x
               Filter: (abs(strom_test.float_x) IS NOT NULL)
(8 rows)

explain (verbose, costs off, timing off) select  id,nume_x    from strom_test where abs(nume_x) IS NOT NULL order by id limit 100;
                         QUERY PLAN                         
------------------------------------------------------------
 Limit
   Output: id, nume_x
   ->  Sort
         Output: id, nume_x
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: id, nume_x
               Filter: (abs(strom_test.nume_x) IS NOT NULL)
(8 rows)

explain (verbose, costs off, timing off) select  id,smlsrl_x    from strom_test where abs(smlsrl_x) IS NOT NULL order by id limit 100;
                          QUERY PLAN                          
--------------------------------------------------------------
 Limit
   Output: id, smlsrl_x
   ->  Sort
         Output: id, smlsrl_x
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: id, smlsrl_x
               Filter: (abs(strom_test.smlsrl_x) IS NOT NULL)
(8 rows)

explain (verbose, costs off, timing off) select  id,serial_x    from strom_test where abs(serial_x) IS NOT NULL order by id limit 100;
                          QUERY PLAN                          
--------------------------------------------------------------
 Limit
   Output: id, serial_x
   ->  Sort
         Output: id, serial_x
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: id, serial_x
               Filter: (abs(strom_test.serial_x) IS NOT NULL)
(8 rows)

explain (verbose, costs off, timing off) select  id,bigsrl_x    from strom_test where abs(bigsrl_x) IS NOT NULL order by id limit 100;
                          QUERY PLAN                          
--------------------------------------------------------------
 Limit
   Output: id, bigsrl_x
   ->  Sort
         Output: id, bigsrl_x
         Sort Key: strom_test.id
         ->  Seq Scan on public.strom_test
               Output: id, bigsrl_x
               Filter: (abs(strom_test.bigsrl_x) IS NOT NULL)
(8 rows)

set pg_strom.enabled=on;
set enable_gpusort to off;
-- normal
explain (verbose, costs off, timing off) select  smlint_x    from strom_test order by id limit 100;
                       QUERY PLAN                       
--------------------------------------------------------
 Limit
   Output: smlint_x, id
   ->  Custom Scan (GpuSort)
         Output: smlint_x, id
         Sort Key: strom_test.id
         Features: likely-tuple-slot
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: smlint_x, id
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  integer_x    from strom_test order by id limit 100;
                       QUERY PLAN                       
--------------------------------------------------------
 Limit
   Output: integer_x, id
   ->  Custom Scan (GpuSort)
         Output: integer_x, id
         Sort Key: strom_test.id
         Features: likely-tuple-slot
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: integer_x, id
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  bigint_x    from strom_test order by id limit 100;
                       QUERY PLAN                       
--------------------------------------------------------
 Limit
   Output: bigint_x, id
   ->  Custom Scan (GpuSort)
         Output: bigint_x, id
         Sort Key: strom_test.id
         Features: likely-tuple-slot
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: bigint_x, id
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  real_x    from strom_test order by id limit 100;
                       QUERY PLAN                       
--------------------------------------------------------
 Limit
   Output: real_x, id
   ->  Custom Scan (GpuSort)
         Output: real_x, id
         Sort Key: strom_test.id
         Features: likely-tuple-slot
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: real_x, id
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  float_x    from strom_test order by id limit 100;
                       QUERY PLAN                       
--------------------------------------------------------
 Limit
   Output: float_x, id
   ->  Custom Scan (GpuSort)
         Output: float_x, id
         Sort Key: strom_test.id
         Features: likely-tuple-slot
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: float_x, id
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  nume_x    from strom_test order by id limit 100;
                       QUERY PLAN                       
--------------------------------------------------------
 Limit
   Output: nume_x, id
   ->  Custom Scan (GpuSort)
         Output: nume_x, id
         Sort Key: strom_test.id
         Features: likely-tuple-slot
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: nume_x, id
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  smlsrl_x    from strom_test order by id limit 100;
                       QUERY PLAN                       
--------------------------------------------------------
 Limit
   Output: smlsrl_x, id
   ->  Custom Scan (GpuSort)
         Output: smlsrl_x, id
         Sort Key: strom_test.id
         Features: likely-tuple-slot
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: smlsrl_x, id
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  serial_x    from strom_test order by id limit 100;
                       QUERY PLAN                       
--------------------------------------------------------
 Limit
   Output: serial_x, id
   ->  Custom Scan (GpuSort)
         Output: serial_x, id
         Sort Key: strom_test.id
         Features: likely-tuple-slot
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: serial_x, id
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  bigsrl_x    from strom_test order by id limit 100;
                       QUERY PLAN                       
--------------------------------------------------------
 Limit
   Output: bigsrl_x, id
   ->  Custom Scan (GpuSort)
         Output: bigsrl_x, id
         Sort Key: strom_test.id
         Features: likely-tuple-slot
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: bigsrl_x, id
               Features: likely-tuple-slot
(9 rows)

-- where
explain (verbose, costs off, timing off) select  smlint_x    from strom_test where abs(smlint_x) between 1 and 1000 order by id limit 100;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit
   Output: smlint_x, id
   ->  Sort
         Output: smlint_x, id
         Sort Key: strom_test.id
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: smlint_x, id
               Filter: ((abs(strom_test.smlint_x) >= 1) AND (abs(strom_test.smlint_x) <= 1000))
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  integer_x    from strom_test where abs(integer_x) between 100000 and 1000000 order by id limit 100;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Limit
   Output: integer_x, id
   ->  Sort
         Output: integer_x, id
         Sort Key: strom_test.id
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: integer_x, id
               Filter: ((abs(strom_test.integer_x) >= 100000) AND (abs(strom_test.integer_x) <= 1000000))
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  bigint_x    from strom_test where abs(bigint_x) between 1000000000000 and 10000000000000 order by id limit 100;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: bigint_x, id
   ->  Sort
         Output: bigint_x, id
         Sort Key: strom_test.id
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: bigint_x, id
               Filter: ((abs(strom_test.bigint_x) >= 1000000000000::bigint) AND (abs(strom_test.bigint_x) <= 10000000000000::bigint))
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  real_x    from strom_test where abs(real_x) between 0.001 and 0.01 order by id limit 100;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: real_x, id
   ->  Sort
         Output: real_x, id
         Sort Key: strom_test.id
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: real_x, id
               Filter: ((abs(strom_test.real_x) >= 0.001::double precision) AND (abs(strom_test.real_x) <= 0.01::double precision))
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  float_x    from strom_test where abs(float_x) between 0.001 and 0.01 order by id limit 100;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: float_x, id
   ->  Sort
         Output: float_x, id
         Sort Key: strom_test.id
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: float_x, id
               Filter: ((abs(strom_test.float_x) >= 0.001::double precision) AND (abs(strom_test.float_x) <= 0.01::double precision))
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  nume_x    from strom_test where abs(nume_x) between 0.001 and 0.01 order by id limit 100;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Limit
   Output: nume_x, id
   ->  Sort
         Output: nume_x, id
         Sort Key: strom_test.id
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: nume_x, id
               Device Filter: ((abs(strom_test.nume_x) >= 0.001) AND (abs(strom_test.nume_x) <= 0.01))
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  smlsrl_x    from strom_test where abs(smlsrl_x) between 1 and 1000 order by id limit 100;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit
   Output: smlsrl_x, id
   ->  Sort
         Output: smlsrl_x, id
         Sort Key: strom_test.id
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: smlsrl_x, id
               Filter: ((abs(strom_test.smlsrl_x) >= 1) AND (abs(strom_test.smlsrl_x) <= 1000))
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  serial_x    from strom_test where abs(serial_x) between 100000 and 1000000 order by id limit 100;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit
   Output: serial_x, id
   ->  Sort
         Output: serial_x, id
         Sort Key: strom_test.id
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: serial_x, id
               Filter: ((abs(strom_test.serial_x) >= 100000) AND (abs(strom_test.serial_x) <= 1000000))
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  bigsrl_x    from strom_test where abs(bigsrl_x) between 1000000000000 and 10000000000000 order by id limit 100;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: bigsrl_x, id
   ->  Sort
         Output: bigsrl_x, id
         Sort Key: strom_test.id
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: bigsrl_x, id
               Filter: ((abs(strom_test.bigsrl_x) >= 1000000000000::bigint) AND (abs(strom_test.bigsrl_x) <= 10000000000000::bigint))
               Features: likely-tuple-slot
(9 rows)

-- NULL
explain (verbose, costs off, timing off) select  id,smlint_x    from strom_test where abs(smlint_x) IS NULL order by id limit 100;
                        QUERY PLAN                        
----------------------------------------------------------
 Limit
   Output: id, smlint_x
   ->  Sort
         Output: id, smlint_x
         Sort Key: strom_test.id
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: id, smlint_x
               Filter: (abs(strom_test.smlint_x) IS NULL)
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  id,integer_x    from strom_test where abs(integer_x) IS NULL order by id limit 100;
                        QUERY PLAN                         
-----------------------------------------------------------
 Limit
   Output: id, integer_x
   ->  Sort
         Output: id, integer_x
         Sort Key: strom_test.id
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: id, integer_x
               Filter: (abs(strom_test.integer_x) IS NULL)
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  id,bigint_x    from strom_test where abs(bigint_x) IS NULL order by id limit 100;
                        QUERY PLAN                        
----------------------------------------------------------
 Limit
   Output: id, bigint_x
   ->  Sort
         Output: id, bigint_x
         Sort Key: strom_test.id
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: id, bigint_x
               Filter: (abs(strom_test.bigint_x) IS NULL)
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  id,real_x    from strom_test where abs(real_x) IS NULL order by id limit 100;
                       QUERY PLAN                       
--------------------------------------------------------
 Limit
   Output: id, real_x
   ->  Sort
         Output: id, real_x
         Sort Key: strom_test.id
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: id, real_x
               Filter: (abs(strom_test.real_x) IS NULL)
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  id,float_x    from strom_test where abs(float_x) IS NULL order by id limit 100;
                       QUERY PLAN                        
---------------------------------------------------------
 Limit
   Output: id, float_x
   ->  Sort
         Output: id, float_x
         Sort Key: strom_test.id
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: id, float_x
               Filter: (abs(strom_test.float_x) IS NULL)
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  id,nume_x    from strom_test where abs(nume_x) IS NULL order by id limit 100;
                          QUERY PLAN                           
---------------------------------------------------------------
 Limit
   Output: id, nume_x
   ->  Sort
         Output: id, nume_x
         Sort Key: strom_test.id
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: id, nume_x
               Device Filter: (abs(strom_test.nume_x) IS NULL)
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  id,smlsrl_x    from strom_test where abs(smlsrl_x) IS NULL order by id limit 100;
                        QUERY PLAN                        
----------------------------------------------------------
 Limit
   Output: id, smlsrl_x
   ->  Sort
         Output: id, smlsrl_x
         Sort Key: strom_test.id
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: id, smlsrl_x
               Filter: (abs(strom_test.smlsrl_x) IS NULL)
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  id,serial_x    from strom_test where abs(serial_x) IS NULL order by id limit 100;
                        QUERY PLAN                        
----------------------------------------------------------
 Limit
   Output: id, serial_x
   ->  Sort
         Output: id, serial_x
         Sort Key: strom_test.id
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: id, serial_x
               Filter: (abs(strom_test.serial_x) IS NULL)
               Features: likely-tuple-slot
(9 rows)

explain (verbose, costs off, timing off) select  id,bigsrl_x    from strom_test where abs(bigsrl_x) IS NULL order by id limit 100;
                        QUERY PLAN                        
----------------------------------------------------------
 Limit
   Output: id, bigsrl_x
   ->  Sort
         Output: id, bigsrl_x
         Sort Key: strom_test.id
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: id, bigsrl_x
               Filter: (abs(strom_test.bigsrl_x) IS NULL)
               Features: likely-tuple-slot
(9 rows)

-- NOT NULL
explain (verbose, costs off, timing off) select  id,smlint_x    from strom_test where abs(smlint_x) IS NOT NULL order by id limit 100;
                          QUERY PLAN                          
--------------------------------------------------------------
 Limit
   Output: id, smlint_x
   ->  Custom Scan (GpuSort)
         Output: id, smlint_x
         Sort Key: strom_test.id
         Features: likely-tuple-slot
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: id, smlint_x
               Filter: (abs(strom_test.smlint_x) IS NOT NULL)
               Features: likely-tuple-slot
(10 rows)

explain (verbose, costs off, timing off) select  id,integer_x    from strom_test where abs(integer_x) IS NOT NULL order by id limit 100;
                          QUERY PLAN                           
---------------------------------------------------------------
 Limit
   Output: id, integer_x
   ->  Custom Scan (GpuSort)
         Output: id, integer_x
         Sort Key: strom_test.id
         Features: likely-tuple-slot
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: id, integer_x
               Filter: (abs(strom_test.integer_x) IS NOT NULL)
               Features: likely-tuple-slot
(10 rows)

explain (verbose, costs off, timing off) select  id,bigint_x    from strom_test where abs(bigint_x) IS NOT NULL order by id limit 100;
                          QUERY PLAN                          
--------------------------------------------------------------
 Limit
   Output: id, bigint_x
   ->  Custom Scan (GpuSort)
         Output: id, bigint_x
         Sort Key: strom_test.id
         Features: likely-tuple-slot
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: id, bigint_x
               Filter: (abs(strom_test.bigint_x) IS NOT NULL)
               Features: likely-tuple-slot
(10 rows)

explain (verbose, costs off, timing off) select  id,real_x    from strom_test where abs(real_x) IS NOT NULL order by id limit 100;
                         QUERY PLAN                         
------------------------------------------------------------
 Limit
   Output: id, real_x
   ->  Custom Scan (GpuSort)
         Output: id, real_x
         Sort Key: strom_test.id
         Features: likely-tuple-slot
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: id, real_x
               Filter: (abs(strom_test.real_x) IS NOT NULL)
               Features: likely-tuple-slot
(10 rows)

explain (verbose, costs off, timing off) select  id,float_x    from strom_test where abs(float_x) IS NOT NULL order by id limit 100;
                         QUERY PLAN                          
-------------------------------------------------------------
 Limit
   Output: id, float_x
   ->  Custom Scan (GpuSort)
         Output: id, float_x
         Sort Key: strom_test.id
         Features: likely-tuple-slot
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: id, float_x
               Filter: (abs(strom_test.float_x) IS NOT NULL)
               Features: likely-tuple-slot
(10 rows)

explain (verbose, costs off, timing off) select  id,nume_x    from strom_test where abs(nume_x) IS NOT NULL order by id limit 100;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Limit
   Output: id, nume_x
   ->  Custom Scan (GpuSort)
         Output: id, nume_x
         Sort Key: strom_test.id
         Features: likely-tuple-slot
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: id, nume_x
               Device Filter: (abs(strom_test.nume_x) IS NOT NULL)
               Features: likely-tuple-slot
(10 rows)

explain (verbose, costs off, timing off) select  id,smlsrl_x    from strom_test where abs(smlsrl_x) IS NOT NULL order by id limit 100;
                          QUERY PLAN                          
--------------------------------------------------------------
 Limit
   Output: id, smlsrl_x
   ->  Custom Scan (GpuSort)
         Output: id, smlsrl_x
         Sort Key: strom_test.id
         Features: likely-tuple-slot
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: id, smlsrl_x
               Filter: (abs(strom_test.smlsrl_x) IS NOT NULL)
               Features: likely-tuple-slot
(10 rows)

explain (verbose, costs off, timing off) select  id,serial_x    from strom_test where abs(serial_x) IS NOT NULL order by id limit 100;
                          QUERY PLAN                          
--------------------------------------------------------------
 Limit
   Output: id, serial_x
   ->  Custom Scan (GpuSort)
         Output: id, serial_x
         Sort Key: strom_test.id
         Features: likely-tuple-slot
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: id, serial_x
               Filter: (abs(strom_test.serial_x) IS NOT NULL)
               Features: likely-tuple-slot
(10 rows)

explain (verbose, costs off, timing off) select  id,bigsrl_x    from strom_test where abs(bigsrl_x) IS NOT NULL order by id limit 100;
                          QUERY PLAN                          
--------------------------------------------------------------
 Limit
   Output: id, bigsrl_x
   ->  Custom Scan (GpuSort)
         Output: id, bigsrl_x
         Sort Key: strom_test.id
         Features: likely-tuple-slot
         ->  Custom Scan (GpuScan) on public.strom_test
               Output: id, bigsrl_x
               Filter: (abs(strom_test.bigsrl_x) IS NOT NULL)
               Features: likely-tuple-slot
(10 rows)

