---
--- Test for CPU fallback and GPU kernel suspend / resume on PostgreSQL table
---
SET client_min_messages = error;
DROP SCHEMA IF EXISTS regtest_fallback_pgsql_temp CASCADE;
CREATE SCHEMA regtest_fallback_pgsql_temp;
RESET client_min_messages;
SET search_path = regtest_fallback_pgsql_temp,public;
CREATE TABLE regtest_data (
  id    int,
  aid   int,
  cat   text,
  x     float,
  y     float,
  memo  text
);
SELECT setseed(0.20190714);
 setseed 
---------
 
(1 row)

INSERT INTO regtest_data (
  SELECT x, pgstrom.random_int(0.5, 1, 4000),
            CASE floor(random()*26)
            WHEN 0 THEN 'aaa'
            WHEN  1 THEN 'bbb'
            WHEN  2 THEN 'ccc'
            WHEN  3 THEN 'ddd'
            WHEN  4 THEN 'eee'
            WHEN  5 THEN 'fff'
            WHEN  6 THEN 'ggg'
            WHEN  7 THEN 'hhh'
            WHEN  8 THEN 'iii'
            WHEN  9 THEN 'jjj'
            WHEN 10 THEN 'kkk'
            WHEN 11 THEN 'lll'
            WHEN 12 THEN 'mmm'
            WHEN 13 THEN 'nnn'
            WHEN 14 THEN 'ooo'
            WHEN 15 THEN 'ppp'
            WHEN 16 THEN 'qqq'
            WHEN 17 THEN 'rrr'
            WHEN 18 THEN 'sss'
            WHEN 19 THEN 'ttt'
            WHEN 20 THEN 'uuu'
            WHEN 21 THEN 'vvv'
            WHEN 22 THEN 'www'
            WHEN 23 THEN 'xxx'
            WHEN 24 THEN 'yyy'
            ELSE 'zzz'
            END,
            pgstrom.random_float(2,-1000.0,1000.0),
            pgstrom.random_float(2,-1000.0,1000.0),
            pgstrom.random_text_len(2, 200)
    FROM generate_series(1,400001) x);
UPDATE regtest_data
   SET memo = md5(memo) || md5(memo)
 WHERE id = 400001;
UPDATE regtest_data
   SET memo = memo || '-' || memo || '-' || memo || '-' || memo
 WHERE id = 400001;
UPDATE regtest_data
   SET memo = memo || '-' || memo || '-' || memo || '-' || memo
 WHERE id = 400001;
UPDATE regtest_data
   SET memo = memo || '-' || memo || '-' || memo || '-' || memo
 WHERE id = 400001;
VACUUM ANALYZE regtest_data;
CREATE TABLE regtest_small (
  aid   int,
  z     float,
  md5   varchar(32)
);
INSERT INTO regtest_small (
  SELECT x, pgstrom.random_float(2,-1000.0,1000.0),
            md5(x::text)
    FROM generate_series(1,4000) x);
VACUUM ANALYZE regtest_small;
CREATE TABLE regtest_enlarge (
  aid   int,
  z     float,
  md5   char(200)
);
INSERT INTO regtest_enlarge (
  SELECT x / 5, pgstrom.random_float(2,-1000.0,1000.0),
            md5(x::text)
    FROM generate_series(1,20000) x);
-- disables SeqScan and kernel source
SET enable_seqscan = off;
SET max_parallel_workers_per_gather = 0;
SET pg_strom.debug_kernel_source = off;
-- GpuScan  with CPU fallback
SET pg_strom.enabled = on;
EXPLAIN (verbose, costs off)
SELECT id, x+y v1, substring(memo, 1, 20) v2
  INTO test01g
  FROM regtest_data
 WHERE memo LIKE '%abc%';
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_fallback_pgsql_temp.regtest_data
   Output: id, ((x + y)), ("substring"(memo, 1, 20))
   GPU Projection: regtest_data.id, (regtest_data.x + regtest_data.y), "substring"(regtest_data.memo, 1, 20)
   GPU Filter: (regtest_data.memo ~~ '%abc%'::text)
(4 rows)

SELECT id, x+y v1, substring(memo, 1, 20) v2
  INTO test01g
  FROM regtest_data
 WHERE memo LIKE '%abc%';	-- error
ERROR:  GPU kernel: compressed or external varlena on device
SET pg_strom.cpu_fallback = on;
SELECT id, x+y v1, substring(memo, 1, 20) v2
  INTO test01g
  FROM regtest_data
 WHERE memo LIKE '%abc%';
SET pg_strom.enabled = off;
SELECT id, x+y v1, substring(memo, 1, 20) v2
  INTO test01p
  FROM regtest_data
 WHERE memo LIKE '%abc%';
(SELECT * FROM test01g EXCEPT SELECT * FROM test01p) ORDER BY id;
 id | v1 | v2 
----+----+----
(0 rows)

(SELECT * FROM test01p EXCEPT SELECT * FROM test01g) ORDER BY id;
 id | v1 | v2 
----+----+----
(0 rows)

RESET pg_strom.cpu_fallback;
-- GpuScan with GPU kernel suspend/resume
SET pg_strom.enabled = on;
EXPLAIN (verbose, costs off)
SELECT id, x+y a, x-y b, x+1 c, y+1 d, x+2 e, y+2 f, x+3 g, y+4 h, memo
  INTO test02g
  FROM regtest_data
 WHERE id > 0;
                                                                                                                                                                                       QUERY PLAN                                                                                                                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_fallback_pgsql_temp.regtest_data
   Output: id, ((x + y)), ((x - y)), ((x + '1'::double precision)), ((y + '1'::double precision)), ((x + '2'::double precision)), ((y + '2'::double precision)), ((x + '3'::double precision)), ((y + '4'::double precision)), memo
   GPU Projection: regtest_data.id, (regtest_data.x + regtest_data.y), (regtest_data.x - regtest_data.y), (regtest_data.x + '1'::double precision), (regtest_data.y + '1'::double precision), (regtest_data.x + '2'::double precision), (regtest_data.y + '2'::double precision), (regtest_data.x + '3'::double precision), (regtest_data.y + '4'::double precision), regtest_data.memo
   GPU Filter: (regtest_data.id > 0)
(4 rows)

SELECT id, x+y a, x-y b, x+1 c, y+1 d, x+2 e, y+2 f, x+3 g, y+4 h, memo
  INTO test02g
  FROM regtest_data
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, x+y a, x-y b, x+1 c, y+1 d, x+2 e, y+2 f, x+3 g, y+4 h, memo
  INTO test02p
  FROM regtest_data
 WHERE id > 0;
(SELECT * FROM test02g EXCEPT SELECT * FROM test02p) ORDER BY id;
 id | a | b | c | d | e | f | g | h | memo 
----+---+---+---+---+---+---+---+---+------
(0 rows)

(SELECT * FROM test02p EXCEPT SELECT * FROM test02g) ORDER BY id;
 id | a | b | c | d | e | f | g | h | memo 
----+---+---+---+---+---+---+---+---+------
(0 rows)

-- GpuScan with GPU kernel suspend/resume and CPU fallback
SET pg_strom.enabled = on;
EXPLAIN (verbose, costs off)
SELECT id, x+y a, x-y b, x+1 c, y+1 d, x+2 e, y+2 f, x+3 g, y+4 h, memo
  INTO test03g
  FROM regtest_data
 WHERE memo LIKE '%abc%' OR id > 0;
                                                                                                                                                                                       QUERY PLAN                                                                                                                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_fallback_pgsql_temp.regtest_data
   Output: id, ((x + y)), ((x - y)), ((x + '1'::double precision)), ((y + '1'::double precision)), ((x + '2'::double precision)), ((y + '2'::double precision)), ((x + '3'::double precision)), ((y + '4'::double precision)), memo
   GPU Projection: regtest_data.id, (regtest_data.x + regtest_data.y), (regtest_data.x - regtest_data.y), (regtest_data.x + '1'::double precision), (regtest_data.y + '1'::double precision), (regtest_data.x + '2'::double precision), (regtest_data.y + '2'::double precision), (regtest_data.x + '3'::double precision), (regtest_data.y + '4'::double precision), regtest_data.memo
   GPU Filter: ((regtest_data.memo ~~ '%abc%'::text) OR (regtest_data.id > 0))
(4 rows)

SELECT id, x+y a, x-y b, x+1 c, y+1 d, x+2 e, y+2 f, x+3 g, y+4 h, memo
  INTO test03g
  FROM regtest_data
 WHERE memo LIKE '%abc%' OR id > 0;		-- Error
ERROR:  GPU kernel: compressed or external varlena on device
SET pg_strom.cpu_fallback = on;
SELECT id, x+y a, x-y b, x+1 c, y+1 d, x+2 e, y+2 f, x+3 g, y+4 h, memo
  INTO test03g
  FROM regtest_data
 WHERE memo LIKE '%abc%' OR id > 0;
SET pg_strom.enabled = off;
SELECT id, x+y a, x-y b, x+1 c, y+1 d, x+2 e, y+2 f, x+3 g, y+4 h, memo
  INTO test03p
  FROM regtest_data
 WHERE memo LIKE '%abc%' OR id > 0;
(SELECT * FROM test03g EXCEPT SELECT * FROM test03p) ORDER BY id;
 id | a | b | c | d | e | f | g | h | memo 
----+---+---+---+---+---+---+---+---+------
(0 rows)

(SELECT * FROM test03p EXCEPT SELECT * FROM test03g) ORDER BY id;
 id | a | b | c | d | e | f | g | h | memo 
----+---+---+---+---+---+---+---+---+------
(0 rows)

RESET pg_strom.cpu_fallback;
-- GpuJoin with CPU fallback
SET pg_strom.enabled = on;
EXPLAIN (verbose, costs off)
SELECT id, x+y+z v, memo
  INTO test10g
  FROM regtest_data d NATURAL JOIN regtest_small s
 WHERE memo LIKE '%abc%';
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuJoin) on regtest_fallback_pgsql_temp.regtest_small s
   Output: d.id, ((d.x + d.y) + s.z), d.memo
   GPU Projection: d.id::integer, d.x::double precision, d.y::double precision, d.memo::text, s.z::double precision
   Outer Scan: regtest_fallback_pgsql_temp.regtest_small s
   Depth 1: GpuHashJoin  (nrows 4000...39)
            HashKeys: s.aid
            JoinQuals: (d.aid = s.aid)
            KDS-Hash (size: 8.31KB)
   ->  Custom Scan (GpuScan) on regtest_fallback_pgsql_temp.regtest_data d
         Output: d.id, d.x, d.y, d.memo, d.aid
         GPU Filter: (d.memo ~~ '%abc%'::text)
(11 rows)

SELECT id, x+y+z v, memo
  INTO test10g
  FROM regtest_data d NATURAL JOIN regtest_small s
 WHERE memo LIKE '%abc%';		-- Error
ERROR:  GPU kernel: compressed or external varlena on device
SET pg_strom.cpu_fallback = on;
SELECT id, x+y+z v, memo
  INTO test10g
  FROM regtest_data d NATURAL JOIN regtest_small s
 WHERE memo LIKE '%abc%';
SET pg_strom.enabled = off;
SELECT id, x+y+z v, memo
  INTO test10p
  FROM regtest_data d NATURAL JOIN regtest_small s
 WHERE memo LIKE '%abc%';
(SELECT * FROM test10g EXCEPT SELECT * FROM test10p) ORDER BY id;
 id | v | memo 
----+---+------
(0 rows)

(SELECT * FROM test10p EXCEPT SELECT * FROM test10g) ORDER BY id;
 id | v | memo 
----+---+------
(0 rows)

RESET pg_strom.cpu_fallback;
-- GpuJoin with GPU kernel suspend / resume
SET pg_strom.enabled = on;
EXPLAIN (verbose, costs off)
SELECT * INTO pg_temp.test11g
  FROM regtest_data d NATURAL JOIN regtest_enlarge l
 WHERE l.aid < 1500;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuJoin) on regtest_fallback_pgsql_temp.regtest_data d
   Output: d.aid, d.id, d.cat, d.x, d.y, d.memo, l.z, l.md5
   GPU Projection: d.aid::integer, d.id::integer, d.cat::text, d.x::double precision, d.y::double precision, d.memo::text, l.z::double precision, l.md5::character(200)
   Outer Scan: regtest_fallback_pgsql_temp.regtest_data d
   Depth 1: GpuHashJoin  (nrows 400001...186416)
            HashKeys: d.aid
            JoinQuals: (d.aid = l.aid)
            KDS-Hash (size: 1715.94KB)
   ->  Custom Scan (GpuScan) on regtest_fallback_pgsql_temp.regtest_enlarge l
         Output: l.z, l.md5, l.aid
         GPU Filter: (l.aid < 1500)
(11 rows)

SELECT * INTO pg_temp.test11g
  FROM regtest_data d NATURAL JOIN regtest_enlarge l
 WHERE l.aid < 1500;
SET pg_strom.enabled = off;
SELECT * INTO pg_temp.test11p
  FROM regtest_data d NATURAL JOIN regtest_enlarge l
 WHERE l.aid < 1500;
(SELECT * FROM test11g EXCEPT SELECT * FROM test11p) ORDER BY id;
 aid | id | cat | x | y | memo | z | md5 
-----+----+-----+---+---+------+---+-----
(0 rows)

(SELECT * FROM test11p EXCEPT SELECT * FROM test11g) ORDER BY id;
 aid | id | cat | x | y | memo | z | md5 
-----+----+-----+---+---+------+---+-----
(0 rows)

-- GpuJoin with GPU kernel suspend / resume, and CPU fallback
SET pg_strom.enabled = on;
EXPLAIN (verbose, costs off)
SELECT *
  FROM regtest_data d NATURAL JOIN regtest_enlarge l
 WHERE l.aid < 2500 AND memo LIKE '%ab%';
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuJoin) on regtest_fallback_pgsql_temp.regtest_data d
   Output: d.aid, d.id, d.cat, d.x, d.y, d.memo, l.z, l.md5
   GPU Projection: d.aid::integer, d.id::integer, d.cat::text, d.x::double precision, d.y::double precision, d.memo::text, l.z::double precision, l.md5::character(200)
   Outer Scan: regtest_fallback_pgsql_temp.regtest_data d
   Outer Scan Filter: (d.memo ~~ '%ab%'::text)
   Depth 1: GpuHashJoin  (nrows 39...18)
            HashKeys: d.aid
            JoinQuals: (d.aid = l.aid)
            KDS-Hash (size: 1715.94KB)
   ->  Custom Scan (GpuScan) on regtest_fallback_pgsql_temp.regtest_enlarge l
         Output: l.z, l.md5, l.aid
         GPU Filter: (l.aid < 2500)
(12 rows)

SELECT *
  FROM regtest_data d NATURAL JOIN regtest_enlarge l
 WHERE l.aid < 2500 AND memo LIKE '%ab%';	-- Error
ERROR:  GPU kernel: compressed or external varlena on device
SET pg_strom.cpu_fallback = on;
SELECT * INTO pg_temp.test12g
  FROM regtest_data d NATURAL JOIN regtest_enlarge l
 WHERE l.aid < 2500 AND memo LIKE '%ab%';
SET pg_strom.enabled = off;
SELECT * INTO pg_temp.test12p
  FROM regtest_data d NATURAL JOIN regtest_enlarge l
 WHERE l.aid < 2500 AND memo LIKE '%ab%';
(SELECT * FROM test12g EXCEPT SELECT * FROM test12p) ORDER BY id;
 aid | id | cat | x | y | memo | z | md5 
-----+----+-----+---+---+------+---+-----
(0 rows)

(SELECT * FROM test12p EXCEPT SELECT * FROM test12g) ORDER BY id;
 aid | id | cat | x | y | memo | z | md5 
-----+----+-----+---+---+------+---+-----
(0 rows)

RESET pg_strom.cpu_fallback;
