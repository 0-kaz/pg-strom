SET search_path = pgstrom_regress,public;
SET pg_strom.debug_kernel_source = off;
--Q2_3
EXPLAIN(costs off, verbose)
select sum(lo_revenue), d_year, p_brand1
  from lineorder, date1, part, supplier
  where lo_orderdate = d_datekey
    and lo_partkey = p_partkey
    and lo_suppkey = s_suppkey
     and p_brand1 = 'MFGR#2221'
     and s_region = 'EUROPE'
  group by d_year, p_brand1
  order by d_year, p_brand1;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate
   Output: sum(lineorder.lo_revenue), date1.d_year, part.p_brand1
   Group Key: date1.d_year, part.p_brand1
   ->  Gather Merge
         Output: date1.d_year, part.p_brand1, (PARTIAL sum(lineorder.lo_revenue))
         Workers Planned: 2
         ->  Partial GroupAggregate
               Output: date1.d_year, part.p_brand1, PARTIAL sum(lineorder.lo_revenue)
               Group Key: date1.d_year, part.p_brand1
               ->  Sort
                     Output: date1.d_year, part.p_brand1, lineorder.lo_revenue
                     Sort Key: date1.d_year
                     ->  Hash Join
                           Output: date1.d_year, part.p_brand1, lineorder.lo_revenue
                           Inner Unique: true
                           Hash Cond: (lineorder.lo_orderdate = date1.d_datekey)
                           ->  Parallel Custom Scan (GpuJoin) on pgstrom_regress.part
                                 Output: lineorder.lo_revenue, lineorder.lo_orderdate, part.p_brand1
                                 GPU Projection: lineorder.lo_revenue::numeric, lineorder.lo_orderdate::integer, part.p_brand1::character(9)
                                 Outer Scan: pgstrom_regress.part
                                 Outer Scan Filter: (part.p_brand1 = 'MFGR#2221'::bpchar)
                                 Depth 1: GpuHashJoin
                                          HashKeys: part.p_partkey
                                          JoinQuals: (lineorder.lo_partkey = part.p_partkey)
                                 ->  Custom Scan (GpuJoin) on pgstrom_regress.lineorder
                                       Output: lineorder.lo_revenue, lineorder.lo_orderdate, lineorder.lo_partkey
                                       GPU Projection: lineorder.lo_revenue::numeric, lineorder.lo_orderdate::integer, lineorder.lo_partkey::integer
                                       Outer Scan: pgstrom_regress.lineorder
                                       Depth 1: GpuHashJoin
                                                HashKeys: lineorder.lo_suppkey
                                                JoinQuals: (lineorder.lo_suppkey = supplier.s_suppkey)
                                       ->  Seq Scan on pgstrom_regress.supplier
                                             Output: supplier.s_suppkey
                                             Filter: (supplier.s_region = 'EUROPE'::bpchar)
                           ->  Hash
                                 Output: date1.d_year, date1.d_datekey
                                 ->  Seq Scan on pgstrom_regress.date1
                                       Output: date1.d_year, date1.d_datekey
(38 rows)

select sum(lo_revenue), d_year, p_brand1
  from lineorder, date1, part, supplier
  where lo_orderdate = d_datekey
    and lo_partkey = p_partkey
    and lo_suppkey = s_suppkey
     and p_brand1 = 'MFGR#2221'
     and s_region = 'EUROPE'
  group by d_year, p_brand1
  order by d_year, p_brand1;
    sum     | d_year | p_brand1  
------------+--------+-----------
 1219996085 |   1992 | MFGR#2221
 1465590759 |   1993 | MFGR#2221
 1309641741 |   1994 | MFGR#2221
 1403311660 |   1995 | MFGR#2221
 1322286433 |   1996 | MFGR#2221
 1164456675 |   1997 | MFGR#2221
  852995469 |   1998 | MFGR#2221
(7 rows)

