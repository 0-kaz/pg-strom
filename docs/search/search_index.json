{
    "docs": [
        {
            "location": "/", 
            "text": "This chapter introduces the overview of PG-Strom, and developer's community.\n\n\nWhat is PG-Strom?\n\n\nPG-Strom is an extension module of PostgreSQL designed for version 9.6 or later. By utilization of GPU (Graphic Processor Unit) device which has thousands cores per chip, it enables to accelerate SQL workloads for data analytics or batch processing to big data set.\n\n\nIts core features are GPU code generator that automatically generates GPU program according to the SQL commands and asynchronous parallel execution engine to run SQL workloads on GPU device. The latest version supports SCAN (evaluation of WHERE-clause), JOIN and GROUP BY workloads. In the case when GPU-processing has advantage, PG-Strom replaces the vanilla implementation of PostgreSQL and transparentlly works from users and applications.\n\n\nUnlike some DWH systems, PG-Strom shares the storage system of PostgreSQL which saves data in row-format. It is not always best choice for summary or analytics workloads, however, it is also an advantage as well. Users don't need to export and transform the data from transactional database for processing.\n\n\nPG-Strom v2.0 enhanced the capability to read from the storage. SSD-to-GPU Direct SQL Execution and in-memory columnar cache make up for the slowness of storage devices, and enable to provide massive data blocks to GPU fast which runs SQL workloads.\n\n\nOn the other hands, the feature of PL/CUDA and gstore_fdw allows to run highly computing density problems, like advanced statistical analytics or machine learning, on the database management system, and to return only results to users.\n\n\nLicense and Copyright\n\n\nPG-Strom is an open source software distributed under the GPL(GNU Public License) v2.\nSee \nLICENSE\n for the license details.\n\n\nPG-Strom Development Team reserves the copyright of the software.\nPG-Strom Development Team is an international, unincorporated association of individuals and companies who have contributed to the PG-Strom project, but not a legal entity.\n\n\nCommunity\n\n\nWe have a community mailing-list at: \nPG-Strom community ML\n It is a right place to post questions, requests, troubles and etc, related to PG-Strom project.\n\n\nPlease pay attention it is a public list for world wide. So, it is your own responsibility not to disclose confidential information.\n\n\nThe primary language of the mailing-list is English. On the other hands, we know major portion of PG-Strom users are Japanese because of its development history, so we admit to have a discussion on the list in Japanese language. In this case, please don't forget to attach \n(JP)\n prefix on the subject like, for non-Japanese speakers to skip messages.\n\n\nBug or troubles report\n\n\nIf you got troubles like incorrect results, system crash / lockup, or something strange behavior, please open a new issue with \nbug\n tag at the \nPG-Strom Issue Tracker\n.\n\n\nPlease ensure the items below on bug reports.\n\n\n\n\nWhether you can reproduce the same problem on the latest revision?\n\n\nHopefully, we recommend to test on the latest OS, CUDA, PostgreSQL and related software.\n\n\n\n\n\n\nWhether you can reproduce the same problem if PG-Strom is disabled?\n\n\nGUC option pg_strom.enabled can turn on/off PG-Strom.\n\n\n\n\n\n\nIs there any known issues on the issue tracker of GitHub?\n\n\nPlease don't forget to search \nclosed\n issues\n\n\n\n\n\n\n\n\nThe information below are helpful for bug-reports.\n\n\n\n\nOutput of \nEXPLAIN VERBOSE\n for the queries in trouble.\n\n\nData structure of the tables involved with \n\\d+ \ntable name\n on psql command.\n\n\nLog messages (verbose messages are more helpful)\n\n\nStatus of GUC options you modified from the default configurations.\n\n\nHardware configuration - GPU model and host RAM size especially.\n\n\n\n\nIf you are not certain whether the strange behavior on your site is bug or not, please report it to the mailing-list prior to the open a new issue ticket. Developers may be able to suggest you next action - like a request for extra information.\n\n\nNew features proposition\n\n\nIf you have any ideas of new features, please open a new issue with \nfeature\n tag at the \nPG-Strom Issue Tracker\n, then have a discussion with other developers.\n\n\nA preferable design proposal will contain the items below.\n\n\n\n\nWhat is your problem to solve / improve?\n\n\nHow much serious is it on your workloads / user case?\n\n\nWay to implement your idea?\n\n\nExpected downside, if any.\n\n\n\n\nOnce we could make a consensus about its necessity, coordinator will attach accepted tag and the issue ticket is used to track rest of the development. Elsewhere, the issue ticket got rejected tag and closed.\n\n\nOnce a proposal got rejected, we may have different decision in the future. If comprehensive circumstance would be changed, you don't need to hesitate revised proposition again.\n\n\nOn the development stage, please attach patch file on the issue ticket. We don't use pull request.\n\n\nSupport Policy\n\n\nThe PG-Strom development team will support the latest release which are distributed from the HeteroDB Software Distribution Center only. So, people who met troubles needs to ensure the problems can be reproduced with the latest release.\n\n\nPlease note that it is volunteer based community support policy, so our support is best effort and no SLA definition.\n\n\nIf you need commercial support, contact to HeteroDB,Inc (contact@heterodbcom).\n\n\nVersioning Policy\n\n\nPG-Strom's version number is consists of two portion; major and minor version. \nmajor\n.\nminor\n\n\nIts minor version shall be incremented for each release; including bug fixes and new features.\nIts major version shall be incremented in the following situation.\n\n\n\n\nSome of supported PostgreSQL version gets deprecated.\n\n\nSome of supported GPU devices gets deprecated.\n\n\nNew version adds epoch making features.", 
            "title": "Home"
        }, 
        {
            "location": "/#what-is-pg-strom", 
            "text": "PG-Strom is an extension module of PostgreSQL designed for version 9.6 or later. By utilization of GPU (Graphic Processor Unit) device which has thousands cores per chip, it enables to accelerate SQL workloads for data analytics or batch processing to big data set.  Its core features are GPU code generator that automatically generates GPU program according to the SQL commands and asynchronous parallel execution engine to run SQL workloads on GPU device. The latest version supports SCAN (evaluation of WHERE-clause), JOIN and GROUP BY workloads. In the case when GPU-processing has advantage, PG-Strom replaces the vanilla implementation of PostgreSQL and transparentlly works from users and applications.  Unlike some DWH systems, PG-Strom shares the storage system of PostgreSQL which saves data in row-format. It is not always best choice for summary or analytics workloads, however, it is also an advantage as well. Users don't need to export and transform the data from transactional database for processing.  PG-Strom v2.0 enhanced the capability to read from the storage. SSD-to-GPU Direct SQL Execution and in-memory columnar cache make up for the slowness of storage devices, and enable to provide massive data blocks to GPU fast which runs SQL workloads.  On the other hands, the feature of PL/CUDA and gstore_fdw allows to run highly computing density problems, like advanced statistical analytics or machine learning, on the database management system, and to return only results to users.", 
            "title": "What is PG-Strom?"
        }, 
        {
            "location": "/#license-and-copyright", 
            "text": "PG-Strom is an open source software distributed under the GPL(GNU Public License) v2.\nSee  LICENSE  for the license details.  PG-Strom Development Team reserves the copyright of the software.\nPG-Strom Development Team is an international, unincorporated association of individuals and companies who have contributed to the PG-Strom project, but not a legal entity.", 
            "title": "License and Copyright"
        }, 
        {
            "location": "/#community", 
            "text": "We have a community mailing-list at:  PG-Strom community ML  It is a right place to post questions, requests, troubles and etc, related to PG-Strom project.  Please pay attention it is a public list for world wide. So, it is your own responsibility not to disclose confidential information.  The primary language of the mailing-list is English. On the other hands, we know major portion of PG-Strom users are Japanese because of its development history, so we admit to have a discussion on the list in Japanese language. In this case, please don't forget to attach  (JP)  prefix on the subject like, for non-Japanese speakers to skip messages.", 
            "title": "Community"
        }, 
        {
            "location": "/#bug-or-troubles-report", 
            "text": "If you got troubles like incorrect results, system crash / lockup, or something strange behavior, please open a new issue with  bug  tag at the  PG-Strom Issue Tracker .  Please ensure the items below on bug reports.   Whether you can reproduce the same problem on the latest revision?  Hopefully, we recommend to test on the latest OS, CUDA, PostgreSQL and related software.    Whether you can reproduce the same problem if PG-Strom is disabled?  GUC option pg_strom.enabled can turn on/off PG-Strom.    Is there any known issues on the issue tracker of GitHub?  Please don't forget to search  closed  issues     The information below are helpful for bug-reports.   Output of  EXPLAIN VERBOSE  for the queries in trouble.  Data structure of the tables involved with  \\d+  table name  on psql command.  Log messages (verbose messages are more helpful)  Status of GUC options you modified from the default configurations.  Hardware configuration - GPU model and host RAM size especially.   If you are not certain whether the strange behavior on your site is bug or not, please report it to the mailing-list prior to the open a new issue ticket. Developers may be able to suggest you next action - like a request for extra information.", 
            "title": "Bug or troubles report"
        }, 
        {
            "location": "/#new-features-proposition", 
            "text": "If you have any ideas of new features, please open a new issue with  feature  tag at the  PG-Strom Issue Tracker , then have a discussion with other developers.  A preferable design proposal will contain the items below.   What is your problem to solve / improve?  How much serious is it on your workloads / user case?  Way to implement your idea?  Expected downside, if any.   Once we could make a consensus about its necessity, coordinator will attach accepted tag and the issue ticket is used to track rest of the development. Elsewhere, the issue ticket got rejected tag and closed.  Once a proposal got rejected, we may have different decision in the future. If comprehensive circumstance would be changed, you don't need to hesitate revised proposition again.  On the development stage, please attach patch file on the issue ticket. We don't use pull request.", 
            "title": "New features proposition"
        }, 
        {
            "location": "/#support-policy", 
            "text": "The PG-Strom development team will support the latest release which are distributed from the HeteroDB Software Distribution Center only. So, people who met troubles needs to ensure the problems can be reproduced with the latest release.  Please note that it is volunteer based community support policy, so our support is best effort and no SLA definition.  If you need commercial support, contact to HeteroDB,Inc (contact@heterodbcom).", 
            "title": "Support Policy"
        }, 
        {
            "location": "/#versioning-policy", 
            "text": "PG-Strom's version number is consists of two portion; major and minor version.  major . minor  Its minor version shall be incremented for each release; including bug fixes and new features.\nIts major version shall be incremented in the following situation.   Some of supported PostgreSQL version gets deprecated.  Some of supported GPU devices gets deprecated.  New version adds epoch making features.", 
            "title": "Versioning Policy"
        }, 
        {
            "location": "/install/", 
            "text": "This chapter introduces the steps to install PG-Strom.\n\n\nChecklist\n\n\n\n\nServer Hardware\n\n\nIt requires generic x86_64 hardware that can run Linux operating system supported by CUDA Toolkit. We have no special requirement for CPU, storage and network devices.\n\n\nnote002:HW Validation List\n may help you to choose the hardware.\n\n\nSSD-to-GPU Direct SQL Execution needs SSD devices which support NVMe specification, and to be installed under the same PCIe Root Complex where GPU is located on.\n\n\n\n\n\n\nGPU Device\n\n\nPG-Strom requires at least one GPU device on the system, which is supported by CUDA Toolkit, has computing capability 6.0 (Pascal generation) or later;\n\n\nnote001:GPU Availability Matrix\n shows more detailed information. Check this list for the support status of SSD-to-GPU Direct SQL Execution.\n\n\n\n\n\n\nOperating System\n\n\nPG-Strom requires Linux operating system for x86_64 architecture, and its distribution supported by CUDA Toolkit. Our recommendation is Red Hat Enterprise Linux or CentOS version 7.x series.    - SSD-to-GPU Direct SQL Execution needs Red Hat Enterprise Linux or CentOS version 7.3 or later.\n\n\n\n\n\n\nPostgreSQL\n\n\nPG-Strom requires PostgreSQL version 9.6 or later. PostgreSQL v9.6 renew the custom-scan interface for CPU-parallel execution or \nGROUP BY\n planning, thus, it allows cooperation of custom-plans provides by extension modules.\n\n\n\n\n\n\nCUDA Toolkit\n\n\nPG-Strom requires CUDA Toolkit version 9.1 or later.\n\n\nPG-Strom provides half-precision floating point type (\nfloat2\n), and it internally use \nhalf_t\n type of CUDA C, so we cannot build it with older CUDA Toolkit.\n\n\n\n\n\n\n\n\nOS Installation\n\n\nChoose a Linux distribution which is supported by CUDA Toolkit, then install the system according to the installation process of the distribution. \nNVIDIA DEVELOPER ZONE\n introduces the list of Linux distributions which are supported by CUDA Toolkit.\n\n\nIn case of Red Hat Enterprise Linux 7.x or CentOS 7.x series, choose \"Minimal installation\" as base environment, and also check the following add-ons.\n\n\n\n\nDebugging Tools\n\n\nDevelopment Tools\n\n\n\n\nPost OS Installation Configuration\n\n\nNext to the OS installation, a few additionsl configurations are required to install GPU-drivers and NVMe-Strom driver on the later steps.\n\n\nSetup EPEL Repository\n\n\nSeveral software modules required by PG-Strom are distributed as a part of EPEL (Extra Packages for Enterprise Linux).\nYou need to add a repository definition of EPEL packages for yum system to obtain these software.\n\n\nOne of the package we will get from EPEL repository is DKMS (Dynamic Kernel Module Support). It is a framework to build Linux kernel module for the running Linux kernel on demand; used for NVIDIA's GPU driver or NVMe-Strom which is a kernel module to support SSD-to-GPU Direct SQL Execution.\n\n\nepel-release\n package provides the repository definition of EPEL.\nYou can obtain this package from the public FTP site of Fedora Project. Downloads the \nepel-release-\ndistribution version\n.noarch.rpm\n, and install the package.\nOnce \nepel-release\n package gets installed, yum system configuration is updated to get software from the EPEL repository.\n\n\n\n\nFedora Project Public FTP Site\n\n\nhttps://dl.fedoraproject.org/pub/epel/7/x86_64/\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nWalk down the directory: \nPackages\n --\n \ne\n, from the above URL.\n\n\n\n\nInstall the \nepel-release\n package as follows.\n\n\n$ sudo yum install https://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-7-11.noarch.rpm\n          :\n================================================================================\n Package           Arch        Version     Repository                      Size\n================================================================================\nInstalling:\n epel-release      noarch      7-11        /epel-release-7-11.noarch       24 k\n\nTransaction Summary\n================================================================================\nInstall  1 Package\n          :\nInstalled:\n  epel-release.noarch 0:7-11\n\nComplete!\n\n\n\n\nHeteroDB-SWDC Installation\n\n\nPG-Strom and related packages are distributed from \nHeteroDB Software Distribution Center\n.\nYou need to add a repository definition of HeteroDB-SWDC for you system to obtain these software.\n\n\nheterodb-swdc\n package provides the repository definition of HeteroDB-SWDC.\nAccess to the \nHeteroDB Software Distribution Center\n using Web browser, download the \nheterodb-swdc-1.0-1.el7.noarch.rpm\n on top of the file list, then install this package.\nOnce heterodb-swdc package gets installed, yum system configuration is updated to get software from the HeteroDB-SWDC repository.\n\n\nInstall the \nheterodb-swdc\n package as follows.\n\n\n$ sudo yum install https://heterodb.github.io/swdc/yum/rhel7-x86_64/heterodb-swdc-1.0-1.el7.noarch.rpm\n          :\n================================================================================\n Package         Arch     Version       Repository                         Size\n================================================================================\nInstalling:\n heterodb-swdc   noarch   1.0-1.el7     /heterodb-swdc-1.0-1.el7.noarch   2.4 k\n\nTransaction Summary\n================================================================================\nInstall  1 Package\n          :\nInstalled:\n  heterodb-swdc.noarch 0:1.0-1.el7\n\nComplete!\n\n\n\n\nCUDA Toolkit Installation\n\n\nThis section introduces the installation of CUDA Toolkit. If you already installed the latest CUDA Toolkit, you can skip this section.\n\n\nNVIDIA offers two approach to install CUDA Toolkit; one is by self-extracting archive (called runfile), and the other is by RPM packages.\nWe recommend RPM installation because it allows simple software updates.\n\n\nYou can download the installation package for CUDA Toolkit from NVIDIA DEVELOPER ZONE. Choose your OS, architecture, distribution and version, then choose \"rpm(network)\" edition.\n\n\n\n\nThe \"rpm(network)\" edition contains only yum repositoty definition to distribute CUDA Toolkit. It is similar to the EPEL repository definition at the OS installation.\nSo, you needs to installa the related RPM packages over network after the resistoration of CUDA repository. Run the following command.\n\n\n$ sudo rpm -i cuda-repo-\ndistribution\n-\nversion\n.x86_64.rpm\n$ sudo yum clean all\n$ sudo yum install cuda\n\n\n\n\nOnce installation completed successfully, CUDA Toolkit is deployed at \n/usr/local/cuda\n.\n\n\n$ ls /usr/local/cuda\nbin     include  libnsight         nvml       samples  tools\ndoc     jre      libnvvp           nvvm       share    version.txt\nextras  lib64    nsightee_plugins  pkgconfig  src\n\n\n\n\nOnce installation gets completed, ensure the system recognizes the GPU devices correctly.\n\nnvidia-smi\n command shows GPU information installed on your system, as follows.\n\n\n$ nvidia-smi\nWed Feb 14 09:43:48 2018\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 387.26                 Driver Version: 387.26                    |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|===============================+======================+======================|\n|   0  Tesla V100-PCIE...  Off  | 00000000:02:00.0 Off |                    0 |\n| N/A   41C    P0    37W / 250W |      0MiB / 16152MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                       GPU Memory |\n|  GPU       PID   Type   Process name                             Usage      |\n|=============================================================================|\n|  No running processes found                                                 |\n+-----------------------------------------------------------------------------+\n\n\n\n\n\n\nTip\n\n\nIf nouveau driver which conflicts to nvidia driver is loaded, system cannot load the nvidia driver immediately.\nIn this case, reboot the operating system once, then confirm whether you can run nvidia-smi command successfully, or not. CUDA installer also disables nouveau driver, nouveau driver will not be loaded on the next boot.\n\n\n\n\nPostgreSQL Installation\n\n\nThis section introduces PostgreSQL installation with RPM.\nWe don't introduce the installation steps from the source because there are many documents for this approach, and there are also various options for the \n./configure\n script.\n\n\nPostgreSQL is also distributed in the packages of Linux distributions, however, it is not the latest one, and often older than the version which supports PG-Strom. For example, Red Hat Enterprise Linux 7.x or CentOS 7.x distributes PostgreSQL v9.2.x series. This version had been EOL by the PostgreSQL community.\n\n\nPostgreSQL Global Development Group provides yum repository to distribute the latest PostgreSQL and related packages.\nLike the configuration of EPEL, you can install a small package to set up yum repository, then install PostgreSQL and related software.\n\n\nHere is the list of yum repository definition: \nhttp://yum.postgresql.org/repopackages.php\n.\n\n\nRepository definitions are per PostgreSQL major version and Linux distribution. You need to choose the one for your Linux distribution, and for PostgreSQL v9.6 or later.\n\n\nAll you need to install are yum repository definition, and PostgreSQL packages. If you choose PostgreSQL v10, the pakages below are required to install PG-Strom.\n\n\n\n\npostgresql10-devel\n\n\npostgresql10-server\n\n\n\n\n$ sudo yum install -y https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-redhat10-10-2.noarch.rpm\n$ sudo yum install -y postgresql10-server postgresql10-devel\n          :\n================================================================================\n Package                  Arch        Version                 Repository   Size\n================================================================================\nInstalling:\n postgresql10-devel       x86_64      10.2-1PGDG.rhel7        pgdg10      2.0 M\n postgresql10-server      x86_64      10.2-1PGDG.rhel7        pgdg10      4.4 M\nInstalling for dependencies:\n postgresql10             x86_64      10.2-1PGDG.rhel7        pgdg10      1.5 M\n postgresql10-libs        x86_64      10.2-1PGDG.rhel7        pgdg10      354 k\n\nTransaction Summary\n================================================================================\nInstall  2 Packages (+2 Dependent packages)\n          :\nInstalled:\n  postgresql10-devel.x86_64 0:10.2-1PGDG.rhel7\n  postgresql10-server.x86_64 0:10.2-1PGDG.rhel7\n\nDependency Installed:\n  postgresql10.x86_64 0:10.2-1PGDG.rhel7\n  postgresql10-libs.x86_64 0:10.2-1PGDG.rhel7\n\nComplete!\n\n\n\n\nThe RPM packages provided by PostgreSQL Global Development Group installs software under the \n/usr/pgsql-\nversion\n directory, so you may pay attention whether the PATH environment variable is configured appropriately.\n\n\npostgresql-alternative\n package set up symbolic links to the related commands under \n/usr/local/bin\n, so allows to simplify the operations. Also, it enables to switch target version using \nalternatives\n command even if multiple version of PostgreSQL.\n\n\n$ sudo yum install postgresql-alternatives\n          :\nResolving Dependencies\n--\n Running transaction check\n---\n Package postgresql-alternatives.noarch 0:1.0-1.el7 will be installed\n--\n Finished Dependency Resolution\n\nDependencies Resolved\n          :\n================================================================================\n Package                      Arch        Version           Repository     Size\n================================================================================\nInstalling:\n postgresql-alternatives      noarch      1.0-1.el7         heterodb      9.2 k\n\nTransaction Summary\n================================================================================\n          :\nInstalled:\n  postgresql-alternatives.noarch 0:1.0-1.el7\n\nComplete!\n\n\n\n\nPG-Strom Installation\n\n\nRPM Installation\n\n\nPG-Strom and related packages are distributed from \nHeteroDB Software Distribution Center\n.\nIf you repository definition has been added, not many tasks are needed.\n\n\nWe provide individual RPM packages of PG-Strom for each base PostgreSQL version. \npg_strom-PG96\n package is built for PostgreSQL 9.6, and \npg_strom-PG10\n is also built for PostgreSQL v10.\n\n\n$ sudo yum install pg_strom-PG10\n          :\n================================================================================\n Package              Arch          Version               Repository       Size\n================================================================================\nInstalling:\n pg_strom-PG10        x86_64        1.9-180301.el7        heterodb        320 k\n\nTransaction Summary\n================================================================================\n          :\nInstalled:\n  pg_strom-PG10.x86_64 0:1.9-180301.el7\n\nComplete!\n\n\n\n\nThat's all for package installation.\n\n\nInstallation from the source\n\n\nFor developers, we also introduces the steps to build and install PG-Strom from the source code.\n\n\nGetting the source code\n\n\nLike RPM packages, you can download tarball of the source code from \nHeteroDB Software Distribution Center\n.\nOn the other hands, here is a certain time-lags to release the tarball, it may be preferable to checkout the master branch of \nPG-Strom on GitHub\n to use the latest development branch.\n\n\n$ git clone https://github.com/heterodb/pg-strom.git\nCloning into 'pg-strom'...\nremote: Counting objects: 13797, done.\nremote: Compressing objects: 100% (215/215), done.\nremote: Total 13797 (delta 208), reused 339 (delta 167), pack-reused 13400\nReceiving objects: 100% (13797/13797), 11.81 MiB | 1.76 MiB/s, done.\nResolving deltas: 100% (10504/10504), done.\n\n\n\n\nBuilding the PG-Strom\n\n\nConfiguration to build PG-Strom must match to the target PostgreSQL strictly. For example, if a particular \nstrcut\n has inconsistent layout by the configuration at build, it may lead problematic bugs; not easy to find out.\nThus, not to have inconsistency, PG-Strom does not have own configure script, but references the build configuration of PostgreSQL using \npg_config\n command.\n\n\nIf PATH environment variable is set to the \npg_config\n command of the target PostgreSQL, run \nmake\n and \nmake install\n.\nElsewhere, give \nPG_CONFIG=...\n parameter on \nmake\n command to tell the full path of the \npg_config\n command.\n\n\n$ cd pg-strom\n$ make PG_CONFIG=/usr/pgsql-10/bin/pg_config\n$ sudo make install PG_CONFIG=/usr/pgsql-10/bin/pg_config\n\n\n\n\nPost Installation Setup\n\n\nCreation of database cluster\n\n\nDatabase cluster is not constructed yet, run \ninitdb\n command to set up initial database of PostgreSQL.\n\n\nThe default path of the database cluster on RPM installation is \n/var/lib/pgsql/\nversion number\n/data\n.\nIf you install \npostgresql-alternatives\n package, this default path can be referenced by \n/var/lib/pgdata\n regardless of the PostgreSQL version.\n\n\n$ sudo su - postgres\n$ initdb -D /var/lib/pgdata/\nThe files belonging to this database system will be owned by user \npostgres\n.\nThis user must also own the server process.\n\nThe database cluster will be initialized with locale \nen_US.UTF-8\n.\nThe default database encoding has accordingly been set to \nUTF8\n.\nThe default text search configuration will be set to \nenglish\n.\n\nData page checksums are disabled.\n\nfixing permissions on existing directory /var/lib/pgdata ... ok\ncreating subdirectories ... ok\nselecting default max_connections ... 100\nselecting default shared_buffers ... 128MB\nselecting dynamic shared memory implementation ... posix\ncreating configuration files ... ok\nrunning bootstrap script ... ok\nperforming post-bootstrap initialization ... ok\nsyncing data to disk ... ok\n\nWARNING: enabling \ntrust\n authentication for local connections\nYou can change this by editing pg_hba.conf or using the option -A, or\n--auth-local and --auth-host, the next time you run initdb.\n\nSuccess. You can now start the database server using:\n\n    pg_ctl -D /var/lib/pgdata/ -l logfile start\n\n\n\n\nSetup postgresql.conf\n\n\nNext, edit \npostgresql.conf\n which is a configuration file of PostgreSQL.\nThe parameters below should be edited at least to work PG-Strom.\nInvestigate other parameters according to usage of the system and expected workloads.\n\n\n\n\nshared_preload_libraries\n\n\nPG-Strom module must be loaded on startup of the postmaster process by the \nshared_preload_libraries\n. Unable to load it on demand. Therefore, you must add the configuration below.\n\n\nshared_preload_libraries = '$libdir/pg_strom'\n\n\n\n\n\n\nmax_worker_processes\n\n\nPG-Strom internally uses several background workers, so the default configuration (= 8) is too small for other usage. So, we recommand to expand the variable for a certain margin.\n\n\nmax_worker_processes = 100\n\n\n\n\n\n\nshared_buffers\n\n\nAlthough it depends on the workloads, the initial configuration of \nshared_buffers\n is too small for the data size where PG-Strom tries to work, thus storage workloads restricts the entire performance, and may be unable to work GPU efficiently.\n\n\nSo, we recommend to expand the variable for a certain margin.\n\n\nshared_buffers = 10GB\n\n\nPlease consider to apply \nSSD-to-GPU Direct SQL Execution\n to process larger than system's physical RAM size.\n\n\nPlease consider to apply \nColumnar Cache\n if you want to cache particular tables.\n\n\n\n\n\n\nwork_mem\n\n\nAlthough it depends on the workloads, the initial configuration of \nwork_mem\n is too small to choose the optimal query execution plan on analytic queries.\n\n\nAn typical example is, disk-based merge sort may be chosen instead of the in-memory quick-sorting.\n\n\nSo, we recommend to expand the variable for a certain margin.\n\n\nwork_mem = 1GB\n\n\n\n\n\n\n\n\nStart PostgreSQL\n\n\nStart PostgreSQL service.\n\n\nIf PG-Strom is set up appropriately, it writes out log message which shows PG-Strom recognized GPU devices.\nThe example below recognized the Tesla V100(PCIe; 16GB edition) device.\n\n\n# systemctl start postgresql-10\n# systemctl status -l postgresql-10\n* postgresql-10.service - PostgreSQL 10 database server\n   Loaded: loaded (/usr/lib/systemd/system/postgresql-10.service; disabled; vendor preset: disabled)\n   Active: active (running) since Sat 2018-03-03 15:45:23 JST; 2min 21s ago\n     Docs: https://www.postgresql.org/docs/10/static/\n  Process: 24851 ExecStartPre=/usr/pgsql-10/bin/postgresql-10-check-db-dir ${PGDATA} (code=exited, status=0/SUCCESS)\n Main PID: 24858 (postmaster)\n   CGroup: /system.slice/postgresql-10.service\n           |-24858 /usr/pgsql-10/bin/postmaster -D /var/lib/pgsql/10/data/\n           |-24890 postgres: logger process\n           |-24892 postgres: bgworker: PG-Strom GPU memory keeper\n           |-24896 postgres: checkpointer process\n           |-24897 postgres: writer process\n           |-24898 postgres: wal writer process\n           |-24899 postgres: autovacuum launcher process\n           |-24900 postgres: stats collector process\n           |-24901 postgres: bgworker: PG-Strom ccache-builder2\n           |-24902 postgres: bgworker: PG-Strom ccache-builder1\n           `-24903 postgres: bgworker: logical replication launcher\n\nMar 03 15:45:19 saba.heterodb.com postmaster[24858]: 2018-03-03 15:45:19.195 JST [24858] HINT:  Run 'nvidia-cuda-mps-control -d', then start server process. Check 'man nvidia-cuda-mps-control' for more details.\nMar 03 15:45:20 saba.heterodb.com postmaster[24858]: 2018-03-03 15:45:20.509 JST [24858] LOG:  PG-Strom: GPU0 Tesla V100-PCIE-16GB (5120 CUDA cores; 1380MHz, L2 6144kB), RAM 15.78GB (4096bits, 856MHz), CC 7.0\nMar 03 15:45:20 saba.heterodb.com postmaster[24858]: 2018-03-03 15:45:20.510 JST [24858] LOG:  NVRTC - CUDA Runtime Compilation vertion 9.1\nMar 03 15:45:23 saba.heterodb.com postmaster[24858]: 2018-03-03 15:45:23.378 JST [24858] LOG:  listening on IPv6 address \n::1\n, port 5432\nMar 03 15:45:23 saba.heterodb.com postmaster[24858]: 2018-03-03 15:45:23.378 JST [24858] LOG:  listening on IPv4 address \n127.0.0.1\n, port 5432\nMar 03 15:45:23 saba.heterodb.com postmaster[24858]: 2018-03-03 15:45:23.442 JST [24858] LOG:  listening on Unix socket \n/var/run/postgresql/.s.PGSQL.5432\n\nMar 03 15:45:23 saba.heterodb.com postmaster[24858]: 2018-03-03 15:45:23.492 JST [24858] LOG:  listening on Unix socket \n/tmp/.s.PGSQL.5432\n\nMar 03 15:45:23 saba.heterodb.com postmaster[24858]: 2018-03-03 15:45:23.527 JST [24858] LOG:  redirecting log output to logging collector process\nMar 03 15:45:23 saba.heterodb.com postmaster[24858]: 2018-03-03 15:45:23.527 JST [24858] HINT:  Future log output will appear in directory \nlog\n.\nMar 03 15:45:23 saba.heterodb.com systemd[1]: Started PostgreSQL 10 database server.\n\n\n\n\nCreation of PG-Strom related objects\n\n\nAt the last, create database objects related to PG-Strom, like SQL functions.\nThis steps are packaged using EXTENSION feature of PostgreSQL. So, all you needs to run is \nCREATE EXTENSION\n on the SQL command line.\n\n\nPlease note that this step is needed for each new database.\nIf you want PG-Strom is pre-configured on new database creation, you can create PG-Strom extension on the \ntemplate1\n database, its configuration will be copied to the new database on \nCREATE DATABASE\n command.\n\n\n$ psql postgres -U postgres\npsql (10.2)\nType \nhelp\n for help.\n\npostgres=# CREATE EXTENSION pg_strom ;\nCREATE EXTENSION\n\n\n\n\nThat's all for the installation.", 
            "title": "Install"
        }, 
        {
            "location": "/install/#checklist", 
            "text": "Server Hardware  It requires generic x86_64 hardware that can run Linux operating system supported by CUDA Toolkit. We have no special requirement for CPU, storage and network devices.  note002:HW Validation List  may help you to choose the hardware.  SSD-to-GPU Direct SQL Execution needs SSD devices which support NVMe specification, and to be installed under the same PCIe Root Complex where GPU is located on.    GPU Device  PG-Strom requires at least one GPU device on the system, which is supported by CUDA Toolkit, has computing capability 6.0 (Pascal generation) or later;  note001:GPU Availability Matrix  shows more detailed information. Check this list for the support status of SSD-to-GPU Direct SQL Execution.    Operating System  PG-Strom requires Linux operating system for x86_64 architecture, and its distribution supported by CUDA Toolkit. Our recommendation is Red Hat Enterprise Linux or CentOS version 7.x series.    - SSD-to-GPU Direct SQL Execution needs Red Hat Enterprise Linux or CentOS version 7.3 or later.    PostgreSQL  PG-Strom requires PostgreSQL version 9.6 or later. PostgreSQL v9.6 renew the custom-scan interface for CPU-parallel execution or  GROUP BY  planning, thus, it allows cooperation of custom-plans provides by extension modules.    CUDA Toolkit  PG-Strom requires CUDA Toolkit version 9.1 or later.  PG-Strom provides half-precision floating point type ( float2 ), and it internally use  half_t  type of CUDA C, so we cannot build it with older CUDA Toolkit.", 
            "title": "Checklist"
        }, 
        {
            "location": "/install/#os-installation", 
            "text": "Choose a Linux distribution which is supported by CUDA Toolkit, then install the system according to the installation process of the distribution.  NVIDIA DEVELOPER ZONE  introduces the list of Linux distributions which are supported by CUDA Toolkit.  In case of Red Hat Enterprise Linux 7.x or CentOS 7.x series, choose \"Minimal installation\" as base environment, and also check the following add-ons.   Debugging Tools  Development Tools", 
            "title": "OS Installation"
        }, 
        {
            "location": "/install/#post-os-installation-configuration", 
            "text": "Next to the OS installation, a few additionsl configurations are required to install GPU-drivers and NVMe-Strom driver on the later steps.", 
            "title": "Post OS Installation Configuration"
        }, 
        {
            "location": "/install/#setup-epel-repository", 
            "text": "Several software modules required by PG-Strom are distributed as a part of EPEL (Extra Packages for Enterprise Linux).\nYou need to add a repository definition of EPEL packages for yum system to obtain these software.  One of the package we will get from EPEL repository is DKMS (Dynamic Kernel Module Support). It is a framework to build Linux kernel module for the running Linux kernel on demand; used for NVIDIA's GPU driver or NVMe-Strom which is a kernel module to support SSD-to-GPU Direct SQL Execution.  epel-release  package provides the repository definition of EPEL.\nYou can obtain this package from the public FTP site of Fedora Project. Downloads the  epel-release- distribution version .noarch.rpm , and install the package.\nOnce  epel-release  package gets installed, yum system configuration is updated to get software from the EPEL repository.   Fedora Project Public FTP Site  https://dl.fedoraproject.org/pub/epel/7/x86_64/      Tip  Walk down the directory:  Packages  --   e , from the above URL.   Install the  epel-release  package as follows.  $ sudo yum install https://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-7-11.noarch.rpm\n          :\n================================================================================\n Package           Arch        Version     Repository                      Size\n================================================================================\nInstalling:\n epel-release      noarch      7-11        /epel-release-7-11.noarch       24 k\n\nTransaction Summary\n================================================================================\nInstall  1 Package\n          :\nInstalled:\n  epel-release.noarch 0:7-11\n\nComplete!", 
            "title": "Setup EPEL Repository"
        }, 
        {
            "location": "/install/#heterodb-swdc-installation", 
            "text": "PG-Strom and related packages are distributed from  HeteroDB Software Distribution Center .\nYou need to add a repository definition of HeteroDB-SWDC for you system to obtain these software.  heterodb-swdc  package provides the repository definition of HeteroDB-SWDC.\nAccess to the  HeteroDB Software Distribution Center  using Web browser, download the  heterodb-swdc-1.0-1.el7.noarch.rpm  on top of the file list, then install this package.\nOnce heterodb-swdc package gets installed, yum system configuration is updated to get software from the HeteroDB-SWDC repository.  Install the  heterodb-swdc  package as follows.  $ sudo yum install https://heterodb.github.io/swdc/yum/rhel7-x86_64/heterodb-swdc-1.0-1.el7.noarch.rpm\n          :\n================================================================================\n Package         Arch     Version       Repository                         Size\n================================================================================\nInstalling:\n heterodb-swdc   noarch   1.0-1.el7     /heterodb-swdc-1.0-1.el7.noarch   2.4 k\n\nTransaction Summary\n================================================================================\nInstall  1 Package\n          :\nInstalled:\n  heterodb-swdc.noarch 0:1.0-1.el7\n\nComplete!", 
            "title": "HeteroDB-SWDC Installation"
        }, 
        {
            "location": "/install/#cuda-toolkit-installation", 
            "text": "This section introduces the installation of CUDA Toolkit. If you already installed the latest CUDA Toolkit, you can skip this section.  NVIDIA offers two approach to install CUDA Toolkit; one is by self-extracting archive (called runfile), and the other is by RPM packages.\nWe recommend RPM installation because it allows simple software updates.  You can download the installation package for CUDA Toolkit from NVIDIA DEVELOPER ZONE. Choose your OS, architecture, distribution and version, then choose \"rpm(network)\" edition.   The \"rpm(network)\" edition contains only yum repositoty definition to distribute CUDA Toolkit. It is similar to the EPEL repository definition at the OS installation.\nSo, you needs to installa the related RPM packages over network after the resistoration of CUDA repository. Run the following command.  $ sudo rpm -i cuda-repo- distribution - version .x86_64.rpm\n$ sudo yum clean all\n$ sudo yum install cuda  Once installation completed successfully, CUDA Toolkit is deployed at  /usr/local/cuda .  $ ls /usr/local/cuda\nbin     include  libnsight         nvml       samples  tools\ndoc     jre      libnvvp           nvvm       share    version.txt\nextras  lib64    nsightee_plugins  pkgconfig  src  Once installation gets completed, ensure the system recognizes the GPU devices correctly. nvidia-smi  command shows GPU information installed on your system, as follows.  $ nvidia-smi\nWed Feb 14 09:43:48 2018\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 387.26                 Driver Version: 387.26                    |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|===============================+======================+======================|\n|   0  Tesla V100-PCIE...  Off  | 00000000:02:00.0 Off |                    0 |\n| N/A   41C    P0    37W / 250W |      0MiB / 16152MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                       GPU Memory |\n|  GPU       PID   Type   Process name                             Usage      |\n|=============================================================================|\n|  No running processes found                                                 |\n+-----------------------------------------------------------------------------+   Tip  If nouveau driver which conflicts to nvidia driver is loaded, system cannot load the nvidia driver immediately.\nIn this case, reboot the operating system once, then confirm whether you can run nvidia-smi command successfully, or not. CUDA installer also disables nouveau driver, nouveau driver will not be loaded on the next boot.", 
            "title": "CUDA Toolkit Installation"
        }, 
        {
            "location": "/install/#postgresql-installation", 
            "text": "This section introduces PostgreSQL installation with RPM.\nWe don't introduce the installation steps from the source because there are many documents for this approach, and there are also various options for the  ./configure  script.  PostgreSQL is also distributed in the packages of Linux distributions, however, it is not the latest one, and often older than the version which supports PG-Strom. For example, Red Hat Enterprise Linux 7.x or CentOS 7.x distributes PostgreSQL v9.2.x series. This version had been EOL by the PostgreSQL community.  PostgreSQL Global Development Group provides yum repository to distribute the latest PostgreSQL and related packages.\nLike the configuration of EPEL, you can install a small package to set up yum repository, then install PostgreSQL and related software.  Here is the list of yum repository definition:  http://yum.postgresql.org/repopackages.php .  Repository definitions are per PostgreSQL major version and Linux distribution. You need to choose the one for your Linux distribution, and for PostgreSQL v9.6 or later.  All you need to install are yum repository definition, and PostgreSQL packages. If you choose PostgreSQL v10, the pakages below are required to install PG-Strom.   postgresql10-devel  postgresql10-server   $ sudo yum install -y https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-redhat10-10-2.noarch.rpm\n$ sudo yum install -y postgresql10-server postgresql10-devel\n          :\n================================================================================\n Package                  Arch        Version                 Repository   Size\n================================================================================\nInstalling:\n postgresql10-devel       x86_64      10.2-1PGDG.rhel7        pgdg10      2.0 M\n postgresql10-server      x86_64      10.2-1PGDG.rhel7        pgdg10      4.4 M\nInstalling for dependencies:\n postgresql10             x86_64      10.2-1PGDG.rhel7        pgdg10      1.5 M\n postgresql10-libs        x86_64      10.2-1PGDG.rhel7        pgdg10      354 k\n\nTransaction Summary\n================================================================================\nInstall  2 Packages (+2 Dependent packages)\n          :\nInstalled:\n  postgresql10-devel.x86_64 0:10.2-1PGDG.rhel7\n  postgresql10-server.x86_64 0:10.2-1PGDG.rhel7\n\nDependency Installed:\n  postgresql10.x86_64 0:10.2-1PGDG.rhel7\n  postgresql10-libs.x86_64 0:10.2-1PGDG.rhel7\n\nComplete!  The RPM packages provided by PostgreSQL Global Development Group installs software under the  /usr/pgsql- version  directory, so you may pay attention whether the PATH environment variable is configured appropriately.  postgresql-alternative  package set up symbolic links to the related commands under  /usr/local/bin , so allows to simplify the operations. Also, it enables to switch target version using  alternatives  command even if multiple version of PostgreSQL.  $ sudo yum install postgresql-alternatives\n          :\nResolving Dependencies\n--  Running transaction check\n---  Package postgresql-alternatives.noarch 0:1.0-1.el7 will be installed\n--  Finished Dependency Resolution\n\nDependencies Resolved\n          :\n================================================================================\n Package                      Arch        Version           Repository     Size\n================================================================================\nInstalling:\n postgresql-alternatives      noarch      1.0-1.el7         heterodb      9.2 k\n\nTransaction Summary\n================================================================================\n          :\nInstalled:\n  postgresql-alternatives.noarch 0:1.0-1.el7\n\nComplete!", 
            "title": "PostgreSQL Installation"
        }, 
        {
            "location": "/install/#pg-strom-installation", 
            "text": "", 
            "title": "PG-Strom Installation"
        }, 
        {
            "location": "/install/#rpm-installation", 
            "text": "PG-Strom and related packages are distributed from  HeteroDB Software Distribution Center .\nIf you repository definition has been added, not many tasks are needed.  We provide individual RPM packages of PG-Strom for each base PostgreSQL version.  pg_strom-PG96  package is built for PostgreSQL 9.6, and  pg_strom-PG10  is also built for PostgreSQL v10.  $ sudo yum install pg_strom-PG10\n          :\n================================================================================\n Package              Arch          Version               Repository       Size\n================================================================================\nInstalling:\n pg_strom-PG10        x86_64        1.9-180301.el7        heterodb        320 k\n\nTransaction Summary\n================================================================================\n          :\nInstalled:\n  pg_strom-PG10.x86_64 0:1.9-180301.el7\n\nComplete!  That's all for package installation.", 
            "title": "RPM Installation"
        }, 
        {
            "location": "/install/#installation-from-the-source", 
            "text": "For developers, we also introduces the steps to build and install PG-Strom from the source code.", 
            "title": "Installation from the source"
        }, 
        {
            "location": "/install/#getting-the-source-code", 
            "text": "Like RPM packages, you can download tarball of the source code from  HeteroDB Software Distribution Center .\nOn the other hands, here is a certain time-lags to release the tarball, it may be preferable to checkout the master branch of  PG-Strom on GitHub  to use the latest development branch.  $ git clone https://github.com/heterodb/pg-strom.git\nCloning into 'pg-strom'...\nremote: Counting objects: 13797, done.\nremote: Compressing objects: 100% (215/215), done.\nremote: Total 13797 (delta 208), reused 339 (delta 167), pack-reused 13400\nReceiving objects: 100% (13797/13797), 11.81 MiB | 1.76 MiB/s, done.\nResolving deltas: 100% (10504/10504), done.", 
            "title": "Getting the source code"
        }, 
        {
            "location": "/install/#building-the-pg-strom", 
            "text": "Configuration to build PG-Strom must match to the target PostgreSQL strictly. For example, if a particular  strcut  has inconsistent layout by the configuration at build, it may lead problematic bugs; not easy to find out.\nThus, not to have inconsistency, PG-Strom does not have own configure script, but references the build configuration of PostgreSQL using  pg_config  command.  If PATH environment variable is set to the  pg_config  command of the target PostgreSQL, run  make  and  make install .\nElsewhere, give  PG_CONFIG=...  parameter on  make  command to tell the full path of the  pg_config  command.  $ cd pg-strom\n$ make PG_CONFIG=/usr/pgsql-10/bin/pg_config\n$ sudo make install PG_CONFIG=/usr/pgsql-10/bin/pg_config", 
            "title": "Building the PG-Strom"
        }, 
        {
            "location": "/install/#post-installation-setup", 
            "text": "", 
            "title": "Post Installation Setup"
        }, 
        {
            "location": "/install/#creation-of-database-cluster", 
            "text": "Database cluster is not constructed yet, run  initdb  command to set up initial database of PostgreSQL.  The default path of the database cluster on RPM installation is  /var/lib/pgsql/ version number /data .\nIf you install  postgresql-alternatives  package, this default path can be referenced by  /var/lib/pgdata  regardless of the PostgreSQL version.  $ sudo su - postgres\n$ initdb -D /var/lib/pgdata/\nThe files belonging to this database system will be owned by user  postgres .\nThis user must also own the server process.\n\nThe database cluster will be initialized with locale  en_US.UTF-8 .\nThe default database encoding has accordingly been set to  UTF8 .\nThe default text search configuration will be set to  english .\n\nData page checksums are disabled.\n\nfixing permissions on existing directory /var/lib/pgdata ... ok\ncreating subdirectories ... ok\nselecting default max_connections ... 100\nselecting default shared_buffers ... 128MB\nselecting dynamic shared memory implementation ... posix\ncreating configuration files ... ok\nrunning bootstrap script ... ok\nperforming post-bootstrap initialization ... ok\nsyncing data to disk ... ok\n\nWARNING: enabling  trust  authentication for local connections\nYou can change this by editing pg_hba.conf or using the option -A, or\n--auth-local and --auth-host, the next time you run initdb.\n\nSuccess. You can now start the database server using:\n\n    pg_ctl -D /var/lib/pgdata/ -l logfile start", 
            "title": "Creation of database cluster"
        }, 
        {
            "location": "/install/#setup-postgresqlconf", 
            "text": "Next, edit  postgresql.conf  which is a configuration file of PostgreSQL.\nThe parameters below should be edited at least to work PG-Strom.\nInvestigate other parameters according to usage of the system and expected workloads.   shared_preload_libraries  PG-Strom module must be loaded on startup of the postmaster process by the  shared_preload_libraries . Unable to load it on demand. Therefore, you must add the configuration below.  shared_preload_libraries = '$libdir/pg_strom'    max_worker_processes  PG-Strom internally uses several background workers, so the default configuration (= 8) is too small for other usage. So, we recommand to expand the variable for a certain margin.  max_worker_processes = 100    shared_buffers  Although it depends on the workloads, the initial configuration of  shared_buffers  is too small for the data size where PG-Strom tries to work, thus storage workloads restricts the entire performance, and may be unable to work GPU efficiently.  So, we recommend to expand the variable for a certain margin.  shared_buffers = 10GB  Please consider to apply  SSD-to-GPU Direct SQL Execution  to process larger than system's physical RAM size.  Please consider to apply  Columnar Cache  if you want to cache particular tables.    work_mem  Although it depends on the workloads, the initial configuration of  work_mem  is too small to choose the optimal query execution plan on analytic queries.  An typical example is, disk-based merge sort may be chosen instead of the in-memory quick-sorting.  So, we recommend to expand the variable for a certain margin.  work_mem = 1GB", 
            "title": "Setup postgresql.conf"
        }, 
        {
            "location": "/install/#start-postgresql", 
            "text": "Start PostgreSQL service.  If PG-Strom is set up appropriately, it writes out log message which shows PG-Strom recognized GPU devices.\nThe example below recognized the Tesla V100(PCIe; 16GB edition) device.  # systemctl start postgresql-10\n# systemctl status -l postgresql-10\n* postgresql-10.service - PostgreSQL 10 database server\n   Loaded: loaded (/usr/lib/systemd/system/postgresql-10.service; disabled; vendor preset: disabled)\n   Active: active (running) since Sat 2018-03-03 15:45:23 JST; 2min 21s ago\n     Docs: https://www.postgresql.org/docs/10/static/\n  Process: 24851 ExecStartPre=/usr/pgsql-10/bin/postgresql-10-check-db-dir ${PGDATA} (code=exited, status=0/SUCCESS)\n Main PID: 24858 (postmaster)\n   CGroup: /system.slice/postgresql-10.service\n           |-24858 /usr/pgsql-10/bin/postmaster -D /var/lib/pgsql/10/data/\n           |-24890 postgres: logger process\n           |-24892 postgres: bgworker: PG-Strom GPU memory keeper\n           |-24896 postgres: checkpointer process\n           |-24897 postgres: writer process\n           |-24898 postgres: wal writer process\n           |-24899 postgres: autovacuum launcher process\n           |-24900 postgres: stats collector process\n           |-24901 postgres: bgworker: PG-Strom ccache-builder2\n           |-24902 postgres: bgworker: PG-Strom ccache-builder1\n           `-24903 postgres: bgworker: logical replication launcher\n\nMar 03 15:45:19 saba.heterodb.com postmaster[24858]: 2018-03-03 15:45:19.195 JST [24858] HINT:  Run 'nvidia-cuda-mps-control -d', then start server process. Check 'man nvidia-cuda-mps-control' for more details.\nMar 03 15:45:20 saba.heterodb.com postmaster[24858]: 2018-03-03 15:45:20.509 JST [24858] LOG:  PG-Strom: GPU0 Tesla V100-PCIE-16GB (5120 CUDA cores; 1380MHz, L2 6144kB), RAM 15.78GB (4096bits, 856MHz), CC 7.0\nMar 03 15:45:20 saba.heterodb.com postmaster[24858]: 2018-03-03 15:45:20.510 JST [24858] LOG:  NVRTC - CUDA Runtime Compilation vertion 9.1\nMar 03 15:45:23 saba.heterodb.com postmaster[24858]: 2018-03-03 15:45:23.378 JST [24858] LOG:  listening on IPv6 address  ::1 , port 5432\nMar 03 15:45:23 saba.heterodb.com postmaster[24858]: 2018-03-03 15:45:23.378 JST [24858] LOG:  listening on IPv4 address  127.0.0.1 , port 5432\nMar 03 15:45:23 saba.heterodb.com postmaster[24858]: 2018-03-03 15:45:23.442 JST [24858] LOG:  listening on Unix socket  /var/run/postgresql/.s.PGSQL.5432 \nMar 03 15:45:23 saba.heterodb.com postmaster[24858]: 2018-03-03 15:45:23.492 JST [24858] LOG:  listening on Unix socket  /tmp/.s.PGSQL.5432 \nMar 03 15:45:23 saba.heterodb.com postmaster[24858]: 2018-03-03 15:45:23.527 JST [24858] LOG:  redirecting log output to logging collector process\nMar 03 15:45:23 saba.heterodb.com postmaster[24858]: 2018-03-03 15:45:23.527 JST [24858] HINT:  Future log output will appear in directory  log .\nMar 03 15:45:23 saba.heterodb.com systemd[1]: Started PostgreSQL 10 database server.", 
            "title": "Start PostgreSQL"
        }, 
        {
            "location": "/install/#creation-of-pg-strom-related-objects", 
            "text": "At the last, create database objects related to PG-Strom, like SQL functions.\nThis steps are packaged using EXTENSION feature of PostgreSQL. So, all you needs to run is  CREATE EXTENSION  on the SQL command line.  Please note that this step is needed for each new database.\nIf you want PG-Strom is pre-configured on new database creation, you can create PG-Strom extension on the  template1  database, its configuration will be copied to the new database on  CREATE DATABASE  command.  $ psql postgres -U postgres\npsql (10.2)\nType  help  for help.\n\npostgres=# CREATE EXTENSION pg_strom ;\nCREATE EXTENSION  That's all for the installation.", 
            "title": "Creation of PG-Strom related objects"
        }, 
        {
            "location": "/tutorial/", 
            "text": "Basic operations\n\n\nConfirmation of GPU off-loading\n\n\nYou can use \nEXPLAIN\n command to check whether query is executed on GPU device or not.\nA query is internally split into multiple elements and executed, and PG-Strom is capable to run SCAN, JOIN and GROUP BY in parallel on GPU device. If you can find out GpuScan, GpuJoin or GpuPreAgg was displayed instead of the standard operations by PostgreSQL, it means the query is partially executed on GPU device.\n\n\nBelow is an example of \nEXPLAIN\n command output.\n\n\npostgres=# EXPLAIN SELECT cat,count(*),avg(ax)\n                     FROM t0 NATURAL JOIN t1 NATURAL JOIN t2\n                    GROUP BY cat;\n                                  QUERY PLAN\n--------------------------------------------------------------------------------\n GroupAggregate  (cost=989186.82..989190.94 rows=27 width=20)\n   Group Key: t0.cat\n   -\n  Sort  (cost=989186.82..989187.29 rows=189 width=44)\n         Sort Key: t0.cat\n         -\n  Custom Scan (GpuPreAgg)  (cost=989175.89..989179.67 rows=189 width=44)\n               Reduction: Local\n               GPU Projection: cat, pgstrom.nrows(), pgstrom.nrows((ax IS NOT NULL)), pgstrom.psum(ax)\n               Combined GpuJoin: enabled\n               -\n  Custom Scan (GpuJoin) on t0  (cost=14744.40..875804.46 rows=99996736 width=12)\n                     GPU Projection: t0.cat, t1.ax\n                     Outer Scan: t0  (cost=0.00..1833360.36 rows=99996736 width=12)\n                     Depth 1: GpuHashJoin  (nrows 99996736...99996736)\n                              HashKeys: t0.aid\n                              JoinQuals: (t0.aid = t1.aid)\n                              KDS-Hash (size: 10.39MB)\n                     Depth 2: GpuHashJoin  (nrows 99996736...99996736)\n                              HashKeys: t0.bid\n                              JoinQuals: (t0.bid = t2.bid)\n                              KDS-Hash (size: 10.78MB)\n                     -\n  Seq Scan on t1  (cost=0.00..1972.85 rows=103785 width=12)\n                     -\n  Seq Scan on t2  (cost=0.00..1935.00 rows=100000 width=4)\n(21 rows)\n\n\n\n\nYou can notice some unusual query execution plans.\nGpuJoin and GpuPreAgg are implemented on the CustomScan mechanism. In this example, GpuJoin runs JOIN operation on \nt0\n, \nt1\n and \nt1\n, then GpuPreAgg which receives the result of GpuJoin runs GROUP BY operation by the \ncat\n column on GPU device.\n\n\nPG-Strom interacts with the query optimizer during PostgreSQL is building a query execution plan, and it offers alternative query execution plan with estimated cost for PostgreSQL's optimizer, if any of SCAN, JOIN, or GROUP BY are executable on GPU device.\nThis estimated cost is better than other query execution plans that run on CPU, it chooses the alternative execution plan that shall run on GPU device.\n\n\nFor GPU execution, it requires operators, functions and data types in use must be supported by PG-Strom.\nIt supports numeric types like \nint\n or \nfloat\n, date and time types like \ndate\n or \ntimestamp\n, variable length string like \ntext\n and so on. It also supports arithmetic operations, comparison operators and many built-in operators.\nSee \nReferences\n for the detailed list.\n\n\nCPU+GPU Hybrid Parallel\n\n\nPG-Strom also supports PostgreSQL's CPU parallel execution.\n\n\nIn the CPU parallel execution mode, Gather node launches several background worker processes, then it gathers the result of \"partial\" execution by individual background workers.\nCustomScan execution plan provided by PG-Strom, like GpuJoin or GpuPreAgg, support execution at the background workers. They process their partial task using GPU individually. A CPU core usually needs much more time to set up buffer to supply data for GPU than execution of SQL workloads on GPU, so hybrid usage of CPU and GPU parallel can expect higher performance.\nOn the other hands, each process creates CUDA context that is required to communicate GPU and consumes a certain amount of GPU resources, so higher parallelism on CPU-side is not always better.\n\n\nLook at the query execution plan below.\nExecution plan tree under the Gather is executable on background worker process. It scans \nt0\n table which has 100million rows using four background worker processes and the coordinator process, in other words, 20million rows are handled per process by GpuJoin and GpuPreAgg, then its results are merged at Gather node.\n\n\n# EXPLAIN SELECT cat,count(*),avg(ax)\n            FROM t0 NATURAL JOIN t1\n           GROUP by cat;\n                                   QUERY PLAN\n--------------------------------------------------------------------------------\n GroupAggregate  (cost=955705.47..955720.93 rows=27 width=20)\n   Group Key: t0.cat\n   -\n  Sort  (cost=955705.47..955707.36 rows=756 width=44)\n         Sort Key: t0.cat\n         -\n  Gather  (cost=955589.95..955669.33 rows=756 width=44)\n               Workers Planned: 4\n               -\n  Parallel Custom Scan (GpuPreAgg)  (cost=954589.95..954593.73 rows=189 width=44)\n                     Reduction: Local\n                     GPU Projection: cat, pgstrom.nrows(), pgstrom.nrows((ax IS NOT NULL)), pgstrom.psum(ax)\n                     Combined GpuJoin: enabled\n                     -\n  Parallel Custom Scan (GpuJoin) on t0  (cost=27682.82..841218.52 rows=99996736 width=12)\n                           GPU Projection: t0.cat, t1.ax\n                           Outer Scan: t0  (cost=0.00..1083384.84 rows=24999184 width=8)\n                           Depth 1: GpuHashJoin  (nrows 24999184...99996736)\n                                    HashKeys: t0.aid\n                                    JoinQuals: (t0.aid = t1.aid)\n                                    KDS-Hash (size: 10.39MB)\n                           -\n  Seq Scan on t1  (cost=0.00..1972.85 rows=103785 width=12)\n(18 rows)\n\n\n\n\nPullup underlying plans\n\n\nPG-Strom can run SCAN, JOIN and GROUP BY workloads on GPU, however, it does not work with best performance if these custom execution plan simply replace the standard operations at PostgreSQL.\nAn example of problematic scenario is that SCAN once writes back its result data set to the host buffer then send the same data into GPU again to execute JOIN. Once again, JOIN results are written back and send to GPU to execute GROUP BY. It causes data ping-pong between CPU and GPU.\n\n\nTo avoid such inefficient jobs, PG-Strom has a special mode which pulls up its sub-plan to execute a bunch of jobs in a single GPU kernel invocation. Combination of the operations blow can cause pull-up of sub-plans.\n\n\n\n\nSCAN + JOIN\n\n\nSCAN + GROUP BY\n\n\nSCAN + JOIN + GROUP BY\n\n\n\n\n\n\nThe execution plan example below never pulls up the sub-plans.\n\n\nGpuJoin receives the result of GpuScan, then its results are passed to GpuPreAgg to generate the final results.\n\n\n# EXPLAIN SELECT cat,count(*),avg(ax)\n            FROM t0 NATURAL JOIN t1\n           WHERE aid \n bid\n           GROUP BY cat;\n                              QUERY PLAN\n\n--------------------------------------------------------------------------------\n GroupAggregate  (cost=1239991.03..1239995.15 rows=27 width=20)\n   Group Key: t0.cat\n   -\n  Sort  (cost=1239991.03..1239991.50 rows=189 width=44)\n         Sort Key: t0.cat\n         -\n  Custom Scan (GpuPreAgg)  (cost=1239980.10..1239983.88 rows=189 width=44)\n               Reduction: Local\n               GPU Projection: cat, pgstrom.nrows(), pgstrom.nrows((ax IS NOT NULL)), pgstrom.psum(ax)\n               -\n  Custom Scan (GpuJoin)  (cost=50776.43..1199522.96 rows=33332245 width=12)\n                     GPU Projection: t0.cat, t1.ax\n                     Depth 1: GpuHashJoin  (nrows 33332245...33332245)\n                              HashKeys: t0.aid\n                              JoinQuals: (t0.aid = t1.aid)\n                              KDS-Hash (size: 10.39MB)\n                     -\n  Custom Scan (GpuScan) on t0  (cost=12634.49..1187710.85 rows=33332245 width=8)\n                           GPU Projection: cat, aid\n                           GPU Filter: (aid \n bid)\n                     -\n  Seq Scan on t1  (cost=0.00..1972.85 rows=103785 width=12)\n(18 rows)\n\n\n\n\nThis example causes data ping-pong between GPU and host buffers for each execution stage, so not efficient and less performance.\n\n\nOn the other hands, the query execution plan below pulls up sub-plans.\n\n\n# EXPLAIN ANALYZE SELECT cat,count(*),avg(ax)\n                    FROM t0 NATURAL JOIN t1\n                   WHERE aid \n bid\n                   GROUP BY cat;\n                              QUERY PLAN\n--------------------------------------------------------------------------------\n GroupAggregate  (cost=903669.50..903673.62 rows=27 width=20)\n                 (actual time=7761.630..7761.644 rows=27 loops=1)\n   Group Key: t0.cat\n   -\n  Sort  (cost=903669.50..903669.97 rows=189 width=44)\n             (actual time=7761.621..7761.626 rows=27 loops=1)\n         Sort Key: t0.cat\n         Sort Method: quicksort  Memory: 28kB\n         -\n  Custom Scan (GpuPreAgg)  (cost=903658.57..903662.35 rows=189 width=44)\n                                      (actual time=7761.531..7761.540 rows=27 loops=1)\n               Reduction: Local\n               GPU Projection: cat, pgstrom.nrows(), pgstrom.nrows((ax IS NOT NULL)), pgstrom.psum(ax)\n               Combined GpuJoin: enabled\n               -\n  Custom Scan (GpuJoin) on t0  (cost=12483.41..863201.43 rows=33332245 width=12)\n                                                (never executed)\n                     GPU Projection: t0.cat, t1.ax\n                     Outer Scan: t0  (cost=12634.49..1187710.85 rows=33332245 width=8)\n                                     (actual time=59.623..5557.052 rows=100000000 loops=1)\n                     Outer Scan Filter: (aid \n bid)\n                     Rows Removed by Outer Scan Filter: 50002874\n                     Depth 1: GpuHashJoin  (plan nrows: 33332245...33332245, actual nrows: 49997126...49997126)\n                              HashKeys: t0.aid\n                              JoinQuals: (t0.aid = t1.aid)\n                              KDS-Hash (size plan: 10.39MB, exec: 64.00MB)\n                     -\n  Seq Scan on t1  (cost=0.00..1972.85 rows=103785 width=12)\n                                         (actual time=0.013..15.303 rows=100000 loops=1)\n Planning time: 0.506 ms\n Execution time: 8495.391 ms\n(21 rows)\n\n\n\n\nYou may notice that SCAN on the table \nt0\n is embedded into GpuJoin, and GpuScan gets vanished.\nIt means GpuJoin pulls up the underlying GpuScan, then combined GPU kernel function is also responsible for evaluation of the supplied WHERE-clause.\n\n\nIn addition, here is a strange output in \nEXPLAIN ANALYZE\n result - it displays \n(never executed)\n for GpuJoin.\nIt means GpuJoin is never executed during the query execution, and it is right. GpuPreAgg pulls up the underlying GpuJoin, then its combined GPU kernel function runs JOIN and GROUP BY.\n\n\nThe \npg_strom.pullup_outer_scan\n parameter controls whether SCAN is pulled up, and the \npg_strom.pullup_outer_join\n parameter also controls whether JOIN is pulled up.\nBoth parameters are configured to \non\n. Usually, no need to disable them, however, you can use the parameters to identify the problems on system troubles.\n\n\nNotes for system administration\n\n\nKnowledge base\n\n\nWe publish several articles, just called \"notes\", on the project wiki-site of PG-Strom.\n\n\nhttps://github.com/heterodb/pg-strom/wiki\n\n\nUsage of MPS daemon\n\n\nIn case when multi-process application like PostgreSQL uses GPU device, it is a well known solution to use MPS (Multi-Process Service) to reduce context switch on GPU side and resource consumption for device management.\n\n\nhttps://docs.nvidia.com/deploy/mps/index.html\n\n\nHowever, here is a known issue; some APIs don't work correctly user the use case of PG-Strom due to the problem of MPS daemon. So, we don't recomment to use MPS daemon except for the situation below:\n\n\n\n\nNumber of PostgreSQL processes which use GPU device (including the background workers launched by CPU parallel execution) is always less than 16. If Volta generation, it is less than 48.\n\n\ngstore_fdw shall not be used.\n\n\n\n\nThis known problem is, when we share GPU device memory inter processes using \nCUipcMemHandle\n, a device memory region acquired by the process under MPS service cannot be opened by the process which does not use MPS. This problem prevents to share the inner hash-table of GpuJoin with background workers on CPU parallel execution.\n\n\nThis problem is already reported to NVIDIA, then we got a consensu to fix it at the next version of CUDA Toolkit.\n\n\nTrouble Shooting\n\n\nIdentify the problem\n\n\nIn case when a particular workloads produce problems, it is the first step to identify which stuff may cause the problem.\n\n\nUnfortunately, much smaller number of developer supports the PG-Strom development community than PostgreSQL developer's community, thus, due to the standpoint of software quality and history, it is a reasonable estimation to suspect PG-Strom first.\n\n\nThe \npg_strom.enabled\n parameter allows to turn on/off all the functionality of PG-Strom at once.\nThe configuration below disables PG-Strom, thus identically performs with the standard PostgreSQL.\n\n\n# SET pg_strom.enabled = off;\n\n\n\n\nIn addition, we provide parameters to disable particular execution plan like GpuScan, GpuJoin and GpuPreAgg.\n\n\nSee \nreferences\n for more details.\n\n\nCollecting crash dump\n\n\nCrash dump is very helpful for analysis of serious problems which lead system crash for example.\nThis session introduces the way to collect crash dump of the PostgreSQL and PG-Strom process (CPU side) and PG-Strom's GPU kernel, and show the back trace on the serious problems.\n\n\nAdd configuration on PostgreSQL startup\n\n\nFor generation of crash dump (CPU-side) on process crash, you need to change the resource limitation of the operating system for size of core file  PostgreSQL server process can generate.\n\n\nFor generation of crash dump (GPU-size) on errors of GPU kernel, PostgreSQL server process has \nCUDA_ENABLE_COREDUMP_ON_EXCEPTION\nenvironment variable, and its value has \n1\n.\n\n\nYou can put a configuration file at \n/etc/systemd/system/postgresql-\nversion\n.service.d/\n when PostgreSQL is kicked by systemd.\n\n\nIn case of RPM installation, a configuration file \npg_strom.conf\n is also installed on the directory, and contains the following initial configuration.\n\n\n[Service]\nLimitNOFILE=65536\nLimitCORE=infinity\n#Environment=CUDA_ENABLE_COREDUMP_ON_EXCEPTION=1\n\n\n\n\nIn CUDA 9.1, it usually takes more than several minutes to generate crash dump of GPU kernel, and it entirely stops response of the PostgreSQL session which causes an error.\nSo, we recommend to set \nCUDA_ENABLE_COREDUMP_ON_EXCEPTION\n environment variable only if you investigate errors of GPU kernels which happen on a certain query.\nThe default configuration on RPM installation comments out the line of \nCUDA_ENABLE_COREDUMP_ON_EXCEPTION\n environment variable.\n\n\nPostgreSQL server process should have unlimited \nMax core file size\n configuration, after the next restart.\n\n\nYou can check it as follows.\n\n\n# cat /proc/\nPID of postmaster\n/limits\nLimit                     Soft Limit           Hard Limit           Units\n    :                         :                    :                  :\nMax core file size        unlimited            unlimited            bytes\n    :                         :                    :                  :\n\n\n\n\nInstallation of debuginfo package\n\n\n# yum install postgresql10-debuginfo pg_strom-PG10-debuginfo\n            :\n================================================================================\n Package                  Arch    Version             Repository           Size\n================================================================================\nInstalling:\n pg_strom-PG10-debuginfo  x86_64  1.9-180301.el7      heterodb-debuginfo  766 k\n postgresql10-debuginfo   x86_64  10.3-1PGDG.rhel7    pgdg10              9.7 M\n\nTransaction Summary\n================================================================================\nInstall  2 Packages\n            :\nInstalled:\n  pg_strom-PG10-debuginfo.x86_64 0:1.9-180301.el7\n  postgresql10-debuginfo.x86_64 0:10.3-1PGDG.rhel7\n\nComplete!\n\n\n\n\nChecking the back-trace on CPU side\n\n\nThe kernel parameter \nkernel.core_pattern\n and \nkernel.core_uses_pid\n determine the path where crash dump is written out.\nIt is usually created on the current working directory of the process, check \n/var/lib/pgdata\n where the database cluster is deployed, if you start PostgreSQL server using systemd.\n\n\nOnce \ncore.\nPID\n file gets generated, you can check its back-trace to reach system crash using \ngdb\n.\n\n\ngdb\n speficies the core file by \n-c\n option, and the crashed program by \n-f\n option.\n\n\n# gdb -c /var/lib/pgdata/core.134680 -f /usr/pgsql-10/bin/postgres\nGNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-100.el7_4.1\n       :\n(gdb) bt\n#0  0x00007fb942af3903 in __epoll_wait_nocancel () from /lib64/libc.so.6\n#1  0x00000000006f71ae in WaitEventSetWaitBlock (nevents=1,\n    occurred_events=0x7ffee51e1d70, cur_timeout=-1, set=0x2833298)\n    at latch.c:1048\n#2  WaitEventSetWait (set=0x2833298, timeout=timeout@entry-1,\n    occurred_events=occurred_events@entry0x7ffee51e1d70,\n    nevents=nevents@entry1, wait_event_info=wait_event_info@entry100663296)\n    at latch.c:1000\n#3  0x00000000006210fb in secure_read (port=0x2876120,\n    ptr=0xcaa7e0 \nPqRecvBuffer\n, len=8192) at be-secure.c:166\n#4  0x000000000062b6e8 in pq_recvbuf () at pqcomm.c:963\n#5  0x000000000062c345 in pq_getbyte () at pqcomm.c:1006\n#6  0x0000000000718682 in SocketBackend (inBuf=0x7ffee51e1ef0)\n    at postgres.c:328\n#7  ReadCommand (inBuf=0x7ffee51e1ef0) at postgres.c:501\n#8  PostgresMain (argc=\noptimized out\n, argv=argv@entry0x287bb68,\n    dbname=0x28333f8 \npostgres\n, username=\noptimized out\n) at postgres.c:4030\n#9  0x000000000047adbc in BackendRun (port=0x2876120) at postmaster.c:4405\n#10 BackendStartup (port=0x2876120) at postmaster.c:4077\n#11 ServerLoop () at postmaster.c:1755\n#12 0x00000000006afb7f in PostmasterMain (argc=argc@entry3,\n    argv=argv@entry0x2831280) at postmaster.c:1363\n#13 0x000000000047bbef in main (argc=3, argv=0x2831280) at main.c:228\n\n\n\n\nbt\n command of \ngdb\n displays the backtrace.\nIn this case, I sent \nSIGSEGV\n signal to the PostgreSQL backend which is waiting for queries from the client for intentional crash, the process got crashed at \n__epoll_wait_nocancel\n invoked by \nWaitEventSetWait\n.\n\n\nChecking the backtrace on GPU\n\n\nCrash dump of GPU kernel is generated on the current working directory of PostgreSQL server process, unless you don't specify the path using \nCUDA_COREDUMP_FILE\n environment variable explicitly.\nCheck \n/var/lib/pgdata\n where the database cluster is deployed, if systemd started PostgreSQL. Dump file will have the following naming convension.\n\n\ncore_\ntimestamp\n_\nhostname\n_\nPID\n.nvcudmp\n\n\nNote that the dump-file of GPU kernel contains no debug information like symbol information in the default configuration.\nIt is nearly impossible to investigate the problem, so enable inclusion of debug information for the GPU programs generated by PG-Strom, as follows.\n\n\nAlso note than we don't recommend to turn on the configuration for daily usage, because it makes query execution performan slow down.\nTurn on only when you investigate the troubles.\n\n\nnvme=# set pg_strom.debug_jit_compile_options = on;\nSET\n\n\n\n\nYou can check crash dump of the GPU kernel using \ncuda-gdb\n command.\n\n\n# /usr/local/cuda/bin/cuda-gdb\nNVIDIA (R) CUDA Debugger\n9.1 release\nPortions Copyright (C) 2007-2017 NVIDIA Corporation\n        :\nFor help, type \nhelp\n.\nType \napropos word\n to search for commands related to \nword\n.\n(cuda-gdb)\n\n\n\n\nRun \ncuda-gdb\n command, then load the crash dump file above using \ntarget\n command on the prompt.\n\n\n(cuda-gdb) target cudacore /var/lib/pgdata/core_1521131828_magro.heterodb.com_216238.nvcudmp\nOpening GPU coredump: /var/lib/pgdata/core_1521131828_magro.heterodb.com_216238.nvcudmp\n[New Thread 216240]\n\nCUDA Exception: Warp Illegal Address\nThe exception was triggered at PC 0x7ff4dc82f930 (cuda_gpujoin.h:1159)\n[Current focus set to CUDA kernel 0, grid 1, block (0,0,0), thread (0,0,0), device 0, sm 0, warp 0, lane 0]\n#0  0x00007ff4dc82f938 in _INTERNAL_8_pg_strom_0124cb94::gpujoin_exec_hashjoin (kcxt=0x7ff4f7fffbf8, kgjoin=0x7fe9f4800078,\n    kmrels=0x7fe9f8800000, kds_src=0x7fe9f0800030, depth=3, rd_stack=0x7fe9f4806118, wr_stack=0x7fe9f480c118, l_state=0x7ff4f7fffc48,\n    matched=0x7ff4f7fffc7c \n) at /usr/pgsql-10/share/extension/cuda_gpujoin.h:1159\n1159            while (khitem \n khitem-\nhash != hash_value)\n\n\n\n\nYou can check backtrace where the error happened on GPU kernel using \nbt\n command.\n\n\n(cuda-gdb) bt\n#0  0x00007ff4dc82f938 in _INTERNAL_8_pg_strom_0124cb94::gpujoin_exec_hashjoin (kcxt=0x7ff4f7fffbf8, kgjoin=0x7fe9f4800078,\n    kmrels=0x7fe9f8800000, kds_src=0x7fe9f0800030, depth=3, rd_stack=0x7fe9f4806118, wr_stack=0x7fe9f480c118, l_state=0x7ff4f7fffc48,\n    matched=0x7ff4f7fffc7c \n) at /usr/pgsql-10/share/extension/cuda_gpujoin.h:1159\n#1  0x00007ff4dc9428f0 in gpujoin_main\n(30,1,1),(256,1,1)\n (kgjoin=0x7fe9f4800078, kmrels=0x7fe9f8800000, kds_src=0x7fe9f0800030,\n    kds_dst=0x7fe9e8800030, kparams_gpreagg=0x0) at /usr/pgsql-10/share/extension/cuda_gpujoin.h:1347\n\n\n\n\nPlease check \nCUDA Toolkit Documentation - CUDA-GDB\n for more detailed usage of \ncuda-gdb\n command.", 
            "title": "Tutorial"
        }, 
        {
            "location": "/tutorial/#basic-operations", 
            "text": "", 
            "title": "Basic operations"
        }, 
        {
            "location": "/tutorial/#confirmation-of-gpu-off-loading", 
            "text": "You can use  EXPLAIN  command to check whether query is executed on GPU device or not.\nA query is internally split into multiple elements and executed, and PG-Strom is capable to run SCAN, JOIN and GROUP BY in parallel on GPU device. If you can find out GpuScan, GpuJoin or GpuPreAgg was displayed instead of the standard operations by PostgreSQL, it means the query is partially executed on GPU device.  Below is an example of  EXPLAIN  command output.  postgres=# EXPLAIN SELECT cat,count(*),avg(ax)\n                     FROM t0 NATURAL JOIN t1 NATURAL JOIN t2\n                    GROUP BY cat;\n                                  QUERY PLAN\n--------------------------------------------------------------------------------\n GroupAggregate  (cost=989186.82..989190.94 rows=27 width=20)\n   Group Key: t0.cat\n   -   Sort  (cost=989186.82..989187.29 rows=189 width=44)\n         Sort Key: t0.cat\n         -   Custom Scan (GpuPreAgg)  (cost=989175.89..989179.67 rows=189 width=44)\n               Reduction: Local\n               GPU Projection: cat, pgstrom.nrows(), pgstrom.nrows((ax IS NOT NULL)), pgstrom.psum(ax)\n               Combined GpuJoin: enabled\n               -   Custom Scan (GpuJoin) on t0  (cost=14744.40..875804.46 rows=99996736 width=12)\n                     GPU Projection: t0.cat, t1.ax\n                     Outer Scan: t0  (cost=0.00..1833360.36 rows=99996736 width=12)\n                     Depth 1: GpuHashJoin  (nrows 99996736...99996736)\n                              HashKeys: t0.aid\n                              JoinQuals: (t0.aid = t1.aid)\n                              KDS-Hash (size: 10.39MB)\n                     Depth 2: GpuHashJoin  (nrows 99996736...99996736)\n                              HashKeys: t0.bid\n                              JoinQuals: (t0.bid = t2.bid)\n                              KDS-Hash (size: 10.78MB)\n                     -   Seq Scan on t1  (cost=0.00..1972.85 rows=103785 width=12)\n                     -   Seq Scan on t2  (cost=0.00..1935.00 rows=100000 width=4)\n(21 rows)  You can notice some unusual query execution plans.\nGpuJoin and GpuPreAgg are implemented on the CustomScan mechanism. In this example, GpuJoin runs JOIN operation on  t0 ,  t1  and  t1 , then GpuPreAgg which receives the result of GpuJoin runs GROUP BY operation by the  cat  column on GPU device.  PG-Strom interacts with the query optimizer during PostgreSQL is building a query execution plan, and it offers alternative query execution plan with estimated cost for PostgreSQL's optimizer, if any of SCAN, JOIN, or GROUP BY are executable on GPU device.\nThis estimated cost is better than other query execution plans that run on CPU, it chooses the alternative execution plan that shall run on GPU device.  For GPU execution, it requires operators, functions and data types in use must be supported by PG-Strom.\nIt supports numeric types like  int  or  float , date and time types like  date  or  timestamp , variable length string like  text  and so on. It also supports arithmetic operations, comparison operators and many built-in operators.\nSee  References  for the detailed list.", 
            "title": "Confirmation of GPU off-loading"
        }, 
        {
            "location": "/tutorial/#cpugpu-hybrid-parallel", 
            "text": "PG-Strom also supports PostgreSQL's CPU parallel execution.  In the CPU parallel execution mode, Gather node launches several background worker processes, then it gathers the result of \"partial\" execution by individual background workers.\nCustomScan execution plan provided by PG-Strom, like GpuJoin or GpuPreAgg, support execution at the background workers. They process their partial task using GPU individually. A CPU core usually needs much more time to set up buffer to supply data for GPU than execution of SQL workloads on GPU, so hybrid usage of CPU and GPU parallel can expect higher performance.\nOn the other hands, each process creates CUDA context that is required to communicate GPU and consumes a certain amount of GPU resources, so higher parallelism on CPU-side is not always better.  Look at the query execution plan below.\nExecution plan tree under the Gather is executable on background worker process. It scans  t0  table which has 100million rows using four background worker processes and the coordinator process, in other words, 20million rows are handled per process by GpuJoin and GpuPreAgg, then its results are merged at Gather node.  # EXPLAIN SELECT cat,count(*),avg(ax)\n            FROM t0 NATURAL JOIN t1\n           GROUP by cat;\n                                   QUERY PLAN\n--------------------------------------------------------------------------------\n GroupAggregate  (cost=955705.47..955720.93 rows=27 width=20)\n   Group Key: t0.cat\n   -   Sort  (cost=955705.47..955707.36 rows=756 width=44)\n         Sort Key: t0.cat\n         -   Gather  (cost=955589.95..955669.33 rows=756 width=44)\n               Workers Planned: 4\n               -   Parallel Custom Scan (GpuPreAgg)  (cost=954589.95..954593.73 rows=189 width=44)\n                     Reduction: Local\n                     GPU Projection: cat, pgstrom.nrows(), pgstrom.nrows((ax IS NOT NULL)), pgstrom.psum(ax)\n                     Combined GpuJoin: enabled\n                     -   Parallel Custom Scan (GpuJoin) on t0  (cost=27682.82..841218.52 rows=99996736 width=12)\n                           GPU Projection: t0.cat, t1.ax\n                           Outer Scan: t0  (cost=0.00..1083384.84 rows=24999184 width=8)\n                           Depth 1: GpuHashJoin  (nrows 24999184...99996736)\n                                    HashKeys: t0.aid\n                                    JoinQuals: (t0.aid = t1.aid)\n                                    KDS-Hash (size: 10.39MB)\n                           -   Seq Scan on t1  (cost=0.00..1972.85 rows=103785 width=12)\n(18 rows)", 
            "title": "CPU+GPU Hybrid Parallel"
        }, 
        {
            "location": "/tutorial/#pullup-underlying-plans", 
            "text": "PG-Strom can run SCAN, JOIN and GROUP BY workloads on GPU, however, it does not work with best performance if these custom execution plan simply replace the standard operations at PostgreSQL.\nAn example of problematic scenario is that SCAN once writes back its result data set to the host buffer then send the same data into GPU again to execute JOIN. Once again, JOIN results are written back and send to GPU to execute GROUP BY. It causes data ping-pong between CPU and GPU.  To avoid such inefficient jobs, PG-Strom has a special mode which pulls up its sub-plan to execute a bunch of jobs in a single GPU kernel invocation. Combination of the operations blow can cause pull-up of sub-plans.   SCAN + JOIN  SCAN + GROUP BY  SCAN + JOIN + GROUP BY    The execution plan example below never pulls up the sub-plans.  GpuJoin receives the result of GpuScan, then its results are passed to GpuPreAgg to generate the final results.  # EXPLAIN SELECT cat,count(*),avg(ax)\n            FROM t0 NATURAL JOIN t1\n           WHERE aid   bid\n           GROUP BY cat;\n                              QUERY PLAN\n\n--------------------------------------------------------------------------------\n GroupAggregate  (cost=1239991.03..1239995.15 rows=27 width=20)\n   Group Key: t0.cat\n   -   Sort  (cost=1239991.03..1239991.50 rows=189 width=44)\n         Sort Key: t0.cat\n         -   Custom Scan (GpuPreAgg)  (cost=1239980.10..1239983.88 rows=189 width=44)\n               Reduction: Local\n               GPU Projection: cat, pgstrom.nrows(), pgstrom.nrows((ax IS NOT NULL)), pgstrom.psum(ax)\n               -   Custom Scan (GpuJoin)  (cost=50776.43..1199522.96 rows=33332245 width=12)\n                     GPU Projection: t0.cat, t1.ax\n                     Depth 1: GpuHashJoin  (nrows 33332245...33332245)\n                              HashKeys: t0.aid\n                              JoinQuals: (t0.aid = t1.aid)\n                              KDS-Hash (size: 10.39MB)\n                     -   Custom Scan (GpuScan) on t0  (cost=12634.49..1187710.85 rows=33332245 width=8)\n                           GPU Projection: cat, aid\n                           GPU Filter: (aid   bid)\n                     -   Seq Scan on t1  (cost=0.00..1972.85 rows=103785 width=12)\n(18 rows)  This example causes data ping-pong between GPU and host buffers for each execution stage, so not efficient and less performance.  On the other hands, the query execution plan below pulls up sub-plans.  # EXPLAIN ANALYZE SELECT cat,count(*),avg(ax)\n                    FROM t0 NATURAL JOIN t1\n                   WHERE aid   bid\n                   GROUP BY cat;\n                              QUERY PLAN\n--------------------------------------------------------------------------------\n GroupAggregate  (cost=903669.50..903673.62 rows=27 width=20)\n                 (actual time=7761.630..7761.644 rows=27 loops=1)\n   Group Key: t0.cat\n   -   Sort  (cost=903669.50..903669.97 rows=189 width=44)\n             (actual time=7761.621..7761.626 rows=27 loops=1)\n         Sort Key: t0.cat\n         Sort Method: quicksort  Memory: 28kB\n         -   Custom Scan (GpuPreAgg)  (cost=903658.57..903662.35 rows=189 width=44)\n                                      (actual time=7761.531..7761.540 rows=27 loops=1)\n               Reduction: Local\n               GPU Projection: cat, pgstrom.nrows(), pgstrom.nrows((ax IS NOT NULL)), pgstrom.psum(ax)\n               Combined GpuJoin: enabled\n               -   Custom Scan (GpuJoin) on t0  (cost=12483.41..863201.43 rows=33332245 width=12)\n                                                (never executed)\n                     GPU Projection: t0.cat, t1.ax\n                     Outer Scan: t0  (cost=12634.49..1187710.85 rows=33332245 width=8)\n                                     (actual time=59.623..5557.052 rows=100000000 loops=1)\n                     Outer Scan Filter: (aid   bid)\n                     Rows Removed by Outer Scan Filter: 50002874\n                     Depth 1: GpuHashJoin  (plan nrows: 33332245...33332245, actual nrows: 49997126...49997126)\n                              HashKeys: t0.aid\n                              JoinQuals: (t0.aid = t1.aid)\n                              KDS-Hash (size plan: 10.39MB, exec: 64.00MB)\n                     -   Seq Scan on t1  (cost=0.00..1972.85 rows=103785 width=12)\n                                         (actual time=0.013..15.303 rows=100000 loops=1)\n Planning time: 0.506 ms\n Execution time: 8495.391 ms\n(21 rows)  You may notice that SCAN on the table  t0  is embedded into GpuJoin, and GpuScan gets vanished.\nIt means GpuJoin pulls up the underlying GpuScan, then combined GPU kernel function is also responsible for evaluation of the supplied WHERE-clause.  In addition, here is a strange output in  EXPLAIN ANALYZE  result - it displays  (never executed)  for GpuJoin.\nIt means GpuJoin is never executed during the query execution, and it is right. GpuPreAgg pulls up the underlying GpuJoin, then its combined GPU kernel function runs JOIN and GROUP BY.  The  pg_strom.pullup_outer_scan  parameter controls whether SCAN is pulled up, and the  pg_strom.pullup_outer_join  parameter also controls whether JOIN is pulled up.\nBoth parameters are configured to  on . Usually, no need to disable them, however, you can use the parameters to identify the problems on system troubles.", 
            "title": "Pullup underlying plans"
        }, 
        {
            "location": "/tutorial/#notes-for-system-administration", 
            "text": "", 
            "title": "Notes for system administration"
        }, 
        {
            "location": "/tutorial/#knowledge-base", 
            "text": "We publish several articles, just called \"notes\", on the project wiki-site of PG-Strom.  https://github.com/heterodb/pg-strom/wiki", 
            "title": "Knowledge base"
        }, 
        {
            "location": "/tutorial/#usage-of-mps-daemon", 
            "text": "In case when multi-process application like PostgreSQL uses GPU device, it is a well known solution to use MPS (Multi-Process Service) to reduce context switch on GPU side and resource consumption for device management.  https://docs.nvidia.com/deploy/mps/index.html  However, here is a known issue; some APIs don't work correctly user the use case of PG-Strom due to the problem of MPS daemon. So, we don't recomment to use MPS daemon except for the situation below:   Number of PostgreSQL processes which use GPU device (including the background workers launched by CPU parallel execution) is always less than 16. If Volta generation, it is less than 48.  gstore_fdw shall not be used.   This known problem is, when we share GPU device memory inter processes using  CUipcMemHandle , a device memory region acquired by the process under MPS service cannot be opened by the process which does not use MPS. This problem prevents to share the inner hash-table of GpuJoin with background workers on CPU parallel execution.  This problem is already reported to NVIDIA, then we got a consensu to fix it at the next version of CUDA Toolkit.", 
            "title": "Usage of MPS daemon"
        }, 
        {
            "location": "/tutorial/#trouble-shooting", 
            "text": "", 
            "title": "Trouble Shooting"
        }, 
        {
            "location": "/tutorial/#identify-the-problem", 
            "text": "In case when a particular workloads produce problems, it is the first step to identify which stuff may cause the problem.  Unfortunately, much smaller number of developer supports the PG-Strom development community than PostgreSQL developer's community, thus, due to the standpoint of software quality and history, it is a reasonable estimation to suspect PG-Strom first.  The  pg_strom.enabled  parameter allows to turn on/off all the functionality of PG-Strom at once.\nThe configuration below disables PG-Strom, thus identically performs with the standard PostgreSQL.  # SET pg_strom.enabled = off;  In addition, we provide parameters to disable particular execution plan like GpuScan, GpuJoin and GpuPreAgg.  See  references  for more details.", 
            "title": "Identify the problem"
        }, 
        {
            "location": "/tutorial/#collecting-crash-dump", 
            "text": "Crash dump is very helpful for analysis of serious problems which lead system crash for example.\nThis session introduces the way to collect crash dump of the PostgreSQL and PG-Strom process (CPU side) and PG-Strom's GPU kernel, and show the back trace on the serious problems.", 
            "title": "Collecting crash dump"
        }, 
        {
            "location": "/tutorial/#add-configuration-on-postgresql-startup", 
            "text": "For generation of crash dump (CPU-side) on process crash, you need to change the resource limitation of the operating system for size of core file  PostgreSQL server process can generate.  For generation of crash dump (GPU-size) on errors of GPU kernel, PostgreSQL server process has  CUDA_ENABLE_COREDUMP_ON_EXCEPTION environment variable, and its value has  1 .  You can put a configuration file at  /etc/systemd/system/postgresql- version .service.d/  when PostgreSQL is kicked by systemd.  In case of RPM installation, a configuration file  pg_strom.conf  is also installed on the directory, and contains the following initial configuration.  [Service]\nLimitNOFILE=65536\nLimitCORE=infinity\n#Environment=CUDA_ENABLE_COREDUMP_ON_EXCEPTION=1  In CUDA 9.1, it usually takes more than several minutes to generate crash dump of GPU kernel, and it entirely stops response of the PostgreSQL session which causes an error.\nSo, we recommend to set  CUDA_ENABLE_COREDUMP_ON_EXCEPTION  environment variable only if you investigate errors of GPU kernels which happen on a certain query.\nThe default configuration on RPM installation comments out the line of  CUDA_ENABLE_COREDUMP_ON_EXCEPTION  environment variable.  PostgreSQL server process should have unlimited  Max core file size  configuration, after the next restart.  You can check it as follows.  # cat /proc/ PID of postmaster /limits\nLimit                     Soft Limit           Hard Limit           Units\n    :                         :                    :                  :\nMax core file size        unlimited            unlimited            bytes\n    :                         :                    :                  :", 
            "title": "Add configuration on PostgreSQL startup"
        }, 
        {
            "location": "/tutorial/#installation-of-debuginfo-package", 
            "text": "# yum install postgresql10-debuginfo pg_strom-PG10-debuginfo\n            :\n================================================================================\n Package                  Arch    Version             Repository           Size\n================================================================================\nInstalling:\n pg_strom-PG10-debuginfo  x86_64  1.9-180301.el7      heterodb-debuginfo  766 k\n postgresql10-debuginfo   x86_64  10.3-1PGDG.rhel7    pgdg10              9.7 M\n\nTransaction Summary\n================================================================================\nInstall  2 Packages\n            :\nInstalled:\n  pg_strom-PG10-debuginfo.x86_64 0:1.9-180301.el7\n  postgresql10-debuginfo.x86_64 0:10.3-1PGDG.rhel7\n\nComplete!", 
            "title": "Installation of debuginfo package"
        }, 
        {
            "location": "/tutorial/#checking-the-back-trace-on-cpu-side", 
            "text": "The kernel parameter  kernel.core_pattern  and  kernel.core_uses_pid  determine the path where crash dump is written out.\nIt is usually created on the current working directory of the process, check  /var/lib/pgdata  where the database cluster is deployed, if you start PostgreSQL server using systemd.  Once  core. PID  file gets generated, you can check its back-trace to reach system crash using  gdb .  gdb  speficies the core file by  -c  option, and the crashed program by  -f  option.  # gdb -c /var/lib/pgdata/core.134680 -f /usr/pgsql-10/bin/postgres\nGNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-100.el7_4.1\n       :\n(gdb) bt\n#0  0x00007fb942af3903 in __epoll_wait_nocancel () from /lib64/libc.so.6\n#1  0x00000000006f71ae in WaitEventSetWaitBlock (nevents=1,\n    occurred_events=0x7ffee51e1d70, cur_timeout=-1, set=0x2833298)\n    at latch.c:1048\n#2  WaitEventSetWait (set=0x2833298, timeout=timeout@entry-1,\n    occurred_events=occurred_events@entry0x7ffee51e1d70,\n    nevents=nevents@entry1, wait_event_info=wait_event_info@entry100663296)\n    at latch.c:1000\n#3  0x00000000006210fb in secure_read (port=0x2876120,\n    ptr=0xcaa7e0  PqRecvBuffer , len=8192) at be-secure.c:166\n#4  0x000000000062b6e8 in pq_recvbuf () at pqcomm.c:963\n#5  0x000000000062c345 in pq_getbyte () at pqcomm.c:1006\n#6  0x0000000000718682 in SocketBackend (inBuf=0x7ffee51e1ef0)\n    at postgres.c:328\n#7  ReadCommand (inBuf=0x7ffee51e1ef0) at postgres.c:501\n#8  PostgresMain (argc= optimized out , argv=argv@entry0x287bb68,\n    dbname=0x28333f8  postgres , username= optimized out ) at postgres.c:4030\n#9  0x000000000047adbc in BackendRun (port=0x2876120) at postmaster.c:4405\n#10 BackendStartup (port=0x2876120) at postmaster.c:4077\n#11 ServerLoop () at postmaster.c:1755\n#12 0x00000000006afb7f in PostmasterMain (argc=argc@entry3,\n    argv=argv@entry0x2831280) at postmaster.c:1363\n#13 0x000000000047bbef in main (argc=3, argv=0x2831280) at main.c:228  bt  command of  gdb  displays the backtrace.\nIn this case, I sent  SIGSEGV  signal to the PostgreSQL backend which is waiting for queries from the client for intentional crash, the process got crashed at  __epoll_wait_nocancel  invoked by  WaitEventSetWait .", 
            "title": "Checking the back-trace on CPU side"
        }, 
        {
            "location": "/tutorial/#checking-the-backtrace-on-gpu", 
            "text": "Crash dump of GPU kernel is generated on the current working directory of PostgreSQL server process, unless you don't specify the path using  CUDA_COREDUMP_FILE  environment variable explicitly.\nCheck  /var/lib/pgdata  where the database cluster is deployed, if systemd started PostgreSQL. Dump file will have the following naming convension.  core_ timestamp _ hostname _ PID .nvcudmp  Note that the dump-file of GPU kernel contains no debug information like symbol information in the default configuration.\nIt is nearly impossible to investigate the problem, so enable inclusion of debug information for the GPU programs generated by PG-Strom, as follows.  Also note than we don't recommend to turn on the configuration for daily usage, because it makes query execution performan slow down.\nTurn on only when you investigate the troubles.  nvme=# set pg_strom.debug_jit_compile_options = on;\nSET  You can check crash dump of the GPU kernel using  cuda-gdb  command.  # /usr/local/cuda/bin/cuda-gdb\nNVIDIA (R) CUDA Debugger\n9.1 release\nPortions Copyright (C) 2007-2017 NVIDIA Corporation\n        :\nFor help, type  help .\nType  apropos word  to search for commands related to  word .\n(cuda-gdb)  Run  cuda-gdb  command, then load the crash dump file above using  target  command on the prompt.  (cuda-gdb) target cudacore /var/lib/pgdata/core_1521131828_magro.heterodb.com_216238.nvcudmp\nOpening GPU coredump: /var/lib/pgdata/core_1521131828_magro.heterodb.com_216238.nvcudmp\n[New Thread 216240]\n\nCUDA Exception: Warp Illegal Address\nThe exception was triggered at PC 0x7ff4dc82f930 (cuda_gpujoin.h:1159)\n[Current focus set to CUDA kernel 0, grid 1, block (0,0,0), thread (0,0,0), device 0, sm 0, warp 0, lane 0]\n#0  0x00007ff4dc82f938 in _INTERNAL_8_pg_strom_0124cb94::gpujoin_exec_hashjoin (kcxt=0x7ff4f7fffbf8, kgjoin=0x7fe9f4800078,\n    kmrels=0x7fe9f8800000, kds_src=0x7fe9f0800030, depth=3, rd_stack=0x7fe9f4806118, wr_stack=0x7fe9f480c118, l_state=0x7ff4f7fffc48,\n    matched=0x7ff4f7fffc7c  ) at /usr/pgsql-10/share/extension/cuda_gpujoin.h:1159\n1159            while (khitem   khitem- hash != hash_value)  You can check backtrace where the error happened on GPU kernel using  bt  command.  (cuda-gdb) bt\n#0  0x00007ff4dc82f938 in _INTERNAL_8_pg_strom_0124cb94::gpujoin_exec_hashjoin (kcxt=0x7ff4f7fffbf8, kgjoin=0x7fe9f4800078,\n    kmrels=0x7fe9f8800000, kds_src=0x7fe9f0800030, depth=3, rd_stack=0x7fe9f4806118, wr_stack=0x7fe9f480c118, l_state=0x7ff4f7fffc48,\n    matched=0x7ff4f7fffc7c  ) at /usr/pgsql-10/share/extension/cuda_gpujoin.h:1159\n#1  0x00007ff4dc9428f0 in gpujoin_main (30,1,1),(256,1,1)  (kgjoin=0x7fe9f4800078, kmrels=0x7fe9f8800000, kds_src=0x7fe9f0800030,\n    kds_dst=0x7fe9e8800030, kparams_gpreagg=0x0) at /usr/pgsql-10/share/extension/cuda_gpujoin.h:1347  Please check  CUDA Toolkit Documentation - CUDA-GDB  for more detailed usage of  cuda-gdb  command.", 
            "title": "Checking the backtrace on GPU"
        }, 
        {
            "location": "/features/", 
            "text": "This chapter introduces advanced features of PG-Strom.\n\n\nSSD-to-GPU Direct SQL Execution\n\n\nOverview\n\n\nFor the fast execution of SQL workloads, it needs to provide processors rapid data stream from storage or memory, in addition to processor's execution efficiency. Processor will run idle if data stream would not be delivered.\n\n\nSSD-to-GPU Direct SQL Execution directly connects NVMe-SSD which enables high-speed I/O processing by direct attach to the PCIe bus and GPU device that is also attached on the same PCIe bus, and runs SQL workloads very high speed by supplying data stream close to the wired speed of the hardware.\n\n\nUsually, PostgreSQL data blocks on the storage shall be once loaded to CPU/RAM through the PCIe bus, then, PostgreSQL runs WHERE-clause for filtering or JOIN/GROUP BY according to the query execution plan. Due to the characteristics of analytic workloads, the amount of result data set is much smaller than the source data set. For example, it is not rare case to read billions rows but output just hundreds rows after the aggregation operations with GROUP BY.\n\n\nIn the other words, we consume bandwidth of the PCIe bus to move junk data, however, we cannot determine whether rows are necessary or not prior to the evaluation by SQL workloads on CPU. So, it is not avoidable restriction in usual implementation.\n\n\n\n\nSSD-to-GPU Direct SQL Execution changes the flow to read blocks from the storage sequentially. It directly loads data blocks to GPU using peer-to-peer DMA over PCIe bus, then runs SQL workloads on GPU device to reduce number of rows to be processed by CPU. In other words, it utilizes GPU as a pre-processor of SQL which locates in the middle of the storage and CPU/RAM for reduction of CPU's load, then tries to accelerate I/O processing in the results.\n\n\nThis feature internally uses NVIDIA GPUDirect RDMA. It allows peer-to-peer data transfer over PCIe bus between GPU device memory and third parth device by coordination using a custom Linux kernel module.\nSo, this feature requires NVMe-Strom driver which is a Linux kernel module in addition to PG-Strom which is a PostgreSQL extension module.\n\n\nAlso note that this feature supports only NVMe-SSD. It does not support SAS or SATA SSD.\nWe have tested several NVMe-SSD models. You can refer \n002: HW Validation List\n for your information.\n\n\nSystem Setup\n\n\nDriver Installation\n\n\nnvme_strom\n package is required to activate SSD-to-GPU Direct SQL Execution. This package contains a custom Linux kernel module which intermediates P2P DMA from NVME-SSD to GPU. You can obtain the package from the \nHeteroDB Software Distribution Center\n.\n\n\nIf \nheterodb-swdc\n package is already installed, you can install the package by \nyum\n command.\n\n\n$ sudo yum install nvme_strom\n            :\n================================================================================\n Package             Arch            Version            Repository         Size\n================================================================================\nInstalling:\n nvme_strom          x86_64          0.8-1.el7          heterodb          178 k\n\nTransaction Summary\n================================================================================\nInstall  1 Package\n            :\nDKMS: install completed.\n  Verifying  : nvme_strom-0.8-1.el7.x86_64                                  1/1\n\nInstalled:\n  nvme_strom.x86_64 0:0.8-1.el7\n\nComplete!\n\n\n\n\nOnce \nnvme_strom\n package gets installed, you can see \nnvme_strom\n module using \nlsmod\n command below.\n\n\n$ lsmod | grep nvme\nnvme_strom             12625  0\nnvme                   27722  4\nnvme_core              52964  9 nvme\n\n\n\n\nDesigning Tablespace\n\n\nSSD-to-GPU Direct SQL Execution shall be invoked in the following case.\n\n\n\n\nThe target table to be scanned locates on the partition being consist of NVMe-SSD.\n\n\n/dev/nvmeXXXX\n block device, or md-raid0 volume which consists of NVMe-SSDs only.\n\n\n\n\n\n\nThe target table size is larger than \npg_strom.nvme_strom_threshold\n.\n\n\nYou can adjust this configuration. Its default is physical RAM size of the system plus 1/3 of \nshared_buffers\n configuration.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nStriped read from multiple NVMe-SSD using md-raid0 requires the enterprise subscription provided by HeteroDB,Inc.\n\n\n\n\nIn order to deploy the tables on the partition consists of NVMe-SSD, you can use the tablespace function of PostgreSQL to specify particular tables or databases to place them on NVMe-SSD volume, in addition to construction of the entire database cluster on the NVMe-SSD volume.\n\n\nFor example, you can create a new tablespace below, if NVMe-SSD is mounted at \n/opt/nvme\n.\n\n\nCREATE TABLESPACE my_nvme LOCATION '/opt/nvme';\n\n\n\n\nIn order to create a new table on the tablespace, specify the \nTABLESPACE\n option at the \nCREATE TABLE\n command below.\n\n\nCREATE TABLE my_table (...) TABLESPACE my_nvme;\n\n\n\n\nOr, use \nALTER DATABASE\n command as follows, to change the default tablespace of the database.\nNote that tablespace of the existing tables are not changed in thie case.\n\n\nALTER DATABASE my_database SET TABLESPACE my_nvme;\n\n\n\n\nOperations\n\n\nControls using GUC parameters\n\n\nThere are two GPU parameters related to SSD-to-GPU Direct SQL Execution.\n\n\nThe first is \npg_strom.nvme_strom_enabled\n that simply turn on/off the function of SSD-to-GPU Direct SQL Execution.\nIf \noff\n, SSD-to-GPU Direct SQL Execution should not be used regardless of the table size or physical location. Default is \non\n.\n\n\nThe other one is \npg_strom.nvme_strom_threshold\n which specifies the least table size to invoke SSD-to-GPU Direct SQL Execution.\n\n\nPG-Strom will choose SSD-to-GPU Direct SQL Execution when target table is located on NVMe-SSD volume (or md-raid0 volume which consists of NVMe-SSD only), and the table size is larger than this parameter.\nIts default is sum of the physical memory size and 1/3 of the \nshared_buffers\n. It means default configuration invokes SSD-to-GPU Direct SQL Execution only for the tables where we certainly cannot process them on memory.\n\n\nEven if SSD-to-GPU Direct SQL Execution has advantages on a single table scan workload, usage of disk cache may work better on the second or later trial for the tables which are available to load onto the main memory.\n\n\nOn course, this assumption is not always right depending on the workload charasteristics.\n\n\nEnsure usage of SSD-to-GPU Direct SQL Execution\n\n\nEXPLAIN\n command allows to ensure whether SSD-to-GPU Direct SQL Execution shall be used in the target query, or not.\n\n\nIn the example below, a scan on the \nlineorder\n table by \nCustom Scan (GpuJoin)\n shows \nNVMe-Strom: enabled\n. In this case, SSD-to-GPU Direct SQL Execution shall be used to read from the \nlineorder\n table.\n\n\n# explain (costs off)\nselect sum(lo_revenue), d_year, p_brand1\nfrom lineorder, date1, part, supplier\nwhere lo_orderdate = d_datekey\nand lo_partkey = p_partkey\nand lo_suppkey = s_suppkey\nand p_category = 'MFGR#12'\nand s_region = 'AMERICA'\n  group by d_year, p_brand1\n  order by d_year, p_brand1;\n                                          QUERY PLAN\n----------------------------------------------------------------------------------------------\n GroupAggregate\n   Group Key: date1.d_year, part.p_brand1\n   -\n  Sort\n         Sort Key: date1.d_year, part.p_brand1\n         -\n  Custom Scan (GpuPreAgg)\n               Reduction: Local\n               GPU Projection: pgstrom.psum((lo_revenue)::double precision), d_year, p_brand1\n               Combined GpuJoin: enabled\n               -\n  Custom Scan (GpuJoin) on lineorder\n                     GPU Projection: date1.d_year, part.p_brand1, lineorder.lo_revenue\n                     Outer Scan: lineorder\n                     Depth 1: GpuHashJoin  (nrows 2406009600...97764190)\n                              HashKeys: lineorder.lo_partkey\n                              JoinQuals: (lineorder.lo_partkey = part.p_partkey)\n                              KDS-Hash (size: 10.67MB)\n                     Depth 2: GpuHashJoin  (nrows 97764190...18544060)\n                              HashKeys: lineorder.lo_suppkey\n                              JoinQuals: (lineorder.lo_suppkey = supplier.s_suppkey)\n                              KDS-Hash (size: 131.59MB)\n                     Depth 3: GpuHashJoin  (nrows 18544060...18544060)\n                              HashKeys: lineorder.lo_orderdate\n                              JoinQuals: (lineorder.lo_orderdate = date1.d_datekey)\n                              KDS-Hash (size: 461.89KB)\n                     NVMe-Strom: enabled\n                     -\n  Custom Scan (GpuScan) on part\n                           GPU Projection: p_brand1, p_partkey\n                           GPU Filter: (p_category = 'MFGR#12'::bpchar)\n                     -\n  Custom Scan (GpuScan) on supplier\n                           GPU Projection: s_suppkey\n                           GPU Filter: (s_region = 'AMERICA'::bpchar)\n                     -\n  Seq Scan on date1\n(31 rows)\n\n\n\n\nAttension for visibility map\n\n\nRight now, GPU routines of PG-Strom cannot run MVCC visibility checks per row, because only host code has a special data structure for visibility checks. It also leads a problem.\n\n\nWe cannot know which row is visible, or invisible at the time when PG-Strom requires P2P DMA for NVMe-SSD, because contents of the storage blocks are not yet loaded to CPU/RAM, and MVCC related attributes are written with individual records. PostgreSQL had similar problem when it supports IndexOnlyScan.\n\n\nTo address the problem, PostgreSQL has an infrastructure of visibility map which is a bunch of flags to indicate whether any records in a particular data block are visible from all the transactions. If associated bit is set, we can know the associated block has no invisible records without reading the block itself.\n\n\nSSD-to-GPU Direct SQL Execution utilizes this infrastructure. It checks the visibility map first, then only \"all-visible\" blocks are required to read with SSD-to-GPU P2P DMA.\n\n\nVACUUM constructs visibility map, so you can enforce PostgreSQL to construct visibility map by explicit launch of VACUUM command.\n\n\nVACUUM ANALYZE linerorder;\n\n\n\n\nIn-memory Columnar Cache\n\n\nOverview\n\n\nPG-Strom has one another feature related to storage to supply processors data stream.\n\n\nIn-memory columnar cache reads data blocks of the target table, convert the row-format of PostgreSQL to columnar format which is suitable for summary and analytics, and cache them on memory.\n\n\nThis feature requires no special hardware like SSD-to-GPU Direct SQL Execution, on the other hands, RAM capacity is still smaller than SSD, so this feature is suitable to handle \"not a large scale data set\" up to 60%-75% of the system RAM size.\n\n\nThis feature is not \"a columnar store\". It means cached and converted data blocks are flashed once PostgreSQL server process has restarted for example. When any cached rows get updated, PG-Strom invalidates the columnar cache block which contains the updated rows.\nThis design on the basis that columnar format is vulnerable to updating workloads. If we try to update columnar-store with keeping consistency towards update of row-store, huge degradation of write performance is not avoidable. On the other hands, it is lightweight operation to invalidate the columnar cache block which contains the updated row.\nPG-Strom can switch GPU kernels to be invoked for row- or columnar-format according to format of the loading data blocks. So, it works flexibly, even if a columnar cache block gets invalidated thus PG-Strom has to load data blocks from the shared buffer of PostgreSQL.\n\n\n\n\nSystem Setup\n\n\nLocation of the columnar cache\n\n\nThe \npg_strom.ccache_base_dir\n parameter allows to specify the path to store the columnar cache. The default is \n/dev/shm\n where general Linux distribution mounts \ntmpfs\n filesystem, so files under the directory are \"volatile\", with no backing store.\n\n\nCustom configuration of the parameter enables to construct columnar cache on larger and reasonably fast storage, like NVMe-SSD, as backing store. However, note that update of the cached rows invalidates whole of the chunk (128MB) which contains the updated rows. It may lead unexpected performance degradation, if workloads have frequent read / write involving I/O operations.\n\n\nColumnar Cache Builder Configuration\n\n\nPG-Strom can build in-memory columnar cache automatically and asynchronously using one or multiple background workers. These background workers are called columnar cache builder.\n\n\nColumnar cache builder scans the target tables to construct columnar cache in the specified database, by round-robin, then converts to columnar format and keep it on the cache. It is an asynchronous job from the backend process which handles user's SQL.\n\n\nOnce a columnar cache is built, any other backend process can reference them. PG-Strom never construct columnar cache on demand, unlike usual disk cache mechanism, even if it is access to the area where columnar cache is not built yet. In this case, PG-Strom loads row-data through the normal storage system of PostgreSQL.\n\n\nThe number of columnar cache builders are fixed on the startup, so you need to setup \npg_strom.ccache_num_builders\n parameters then restart PostgreSQL to increase the number of workers.\n\n\nThe \npg_strom.ccache_databases\n parameter configures the databases associated with columnar cache builders.\nIt requires superuser privilege to setup, and is updatable on PostgreSQL running. (Of course, it is possible to assign by \npostgresql.conf\n configuration on startup.)\n\n\nOnce a comma separated list of database names are assigned, columnar cache builders are associated to the specified databases in rotation. For example, if 5 columnar cache builders are running then 3 databases (\npostgres,my_test,benchmark\n) are assigned on the \npg_strom.ccache_databases\n, 2 columnar cache builders are assigned on the \npostgres\n and \nmy_test\n database for each, and 1 columnar cache builder is assigned on the \nbenchmark\n database.\n\n\nSource Table Configuration\n\n\nDBA needs to specify the target tables to build columnar cache.\n\n\nA SQL function \npgstrom_ccache_enabled(regclass)\n adds the supplied table as target to build columnar cache.\nOther way round, a SQL function \npgstrom_ccache_disabled(regclass)\n drops the supplied table from the target to build.\n\n\nInternally, it is implemented as a special trigger function which invalidate columnar cache on write to the target tables.\nIt means we don't build columnar cache on the tables which have no way to invalidate columnar cache.\n\n\npostgres=# select pgstrom_ccache_enabled('t0');\n pgstrom_ccache_enabled\n------------------------\n enabled\n(1 row)\n\n\n\n\nOperations\n\n\nCheck status of columnar cache\n\n\npgstrom.ccache_info\n provides the status of the current columnar cache.\n\n\nYou can check the table, block number, cache creation time and last access time per chunk.\n\n\ncontrib_regression_pg_strom=# SELECT * FROM pgstrom.ccache_info ;\n database_id | table_id | block_nr | nitems  |  length   |             ctime             |             atime\n-------------+----------+----------+---------+-----------+-------------------------------+-------------------------------\n       13323 | 25887    |   622592 | 1966080 | 121897472 | 2018-02-18 14:31:30.898389+09 | 2018-02-18 14:38:43.711287+09\n       13323 | 25887    |   425984 | 1966080 | 121897472 | 2018-02-18 14:28:39.356952+09 | 2018-02-18 14:38:43.514788+09\n       13323 | 25887    |    98304 | 1966080 | 121897472 | 2018-02-18 14:28:01.542261+09 | 2018-02-18 14:38:42.930281+09\n         :       :             :         :          :                :                               :\n       13323 | 25887    |    16384 | 1963079 | 121711472 | 2018-02-18 14:28:00.647021+09 | 2018-02-18 14:38:42.909112+09\n       13323 | 25887    |   737280 | 1966080 | 121897472 | 2018-02-18 14:34:32.249899+09 | 2018-02-18 14:38:43.882029+09\n       13323 | 25887    |   770048 | 1966080 | 121897472 | 2018-02-18 14:28:57.321121+09 | 2018-02-18 14:38:43.90157+09\n(50 rows)\n\n\n\n\nCheck usage of columnar cache\n\n\nYou can check whether a particular query may reference columnar cache, or not, using \nEXPLAIN\n command.\n\n\nThe query below joins the table \nt0\n and \nt1\n, and the \nCustom Scan (GpuJoin)\n which contains scan on the \nt0\n shows \nCCache: enabled\n.\nIt means columnar cache may be referenced at the scan on \nt0\n, however, it is not certain whether it is actually referenced until query execution. Columnar cache may be invalidated by the concurrent updates.\n\n\npostgres=# EXPLAIN SELECT id,ax FROM t0 NATURAL JOIN t1 WHERE aid \n 1000;\n\n                                  QUERY PLAN\n-------------------------------------------------------------------------------\n Custom Scan (GpuJoin) on t0  (cost=12398.65..858048.45 rows=1029348 width=12)\n   GPU Projection: t0.id, t1.ax\n   Outer Scan: t0  (cost=10277.55..864623.44 rows=1029348 width=8)\n   Outer Scan Filter: (aid \n 1000)\n   Depth 1: GpuHashJoin  (nrows 1029348...1029348)\n            HashKeys: t0.aid\n            JoinQuals: (t0.aid = t1.aid)\n            KDS-Hash (size: 10.78MB)\n   CCache: enabled\n   -\n  Seq Scan on t1  (cost=0.00..1935.00 rows=100000 width=12)\n(10 rows)\n\n\n\n\nEXPLAIN ANALYZE\n command tells how many times columnar cache is referenced during the query execution.\n\n\nAfter the execution of this query, \nCustom Scan (GpuJoin)\n which contains scan on \nt0\n shows \nCCache Hits: 50\n.\nIt means that columnar cache is referenced 50 times. Because the chunk size of columnar cache is 128MB, storage access is replaced to the columnar cache by 6.4GB.\n\n\npostgres=# EXPLAIN ANALYZE SELECT id,ax FROM t0 NATURAL JOIN t1 WHERE aid \n 1000;\n\n                                    QUERY PLAN\n\n-------------------------------------------------------------------------------------------\n Custom Scan (GpuJoin) on t0  (cost=12398.65..858048.45 rows=1029348 width=12)\n                              (actual time=91.766..723.549 rows=1000224 loops=1)\n   GPU Projection: t0.id, t1.ax\n   Outer Scan: t0  (cost=10277.55..864623.44 rows=1029348 width=8)\n                   (actual time=7.129..398.270 rows=100000000 loops=1)\n   Outer Scan Filter: (aid \n 1000)\n   Rows Removed by Outer Scan Filter: 98999776\n   Depth 1: GpuHashJoin  (plan nrows: 1029348...1029348, actual nrows: 1000224...1000224)\n            HashKeys: t0.aid\n            JoinQuals: (t0.aid = t1.aid)\n            KDS-Hash (size plan: 10.78MB, exec: 64.00MB)\n   CCache Hits: 50\n   -\n  Seq Scan on t1  (cost=0.00..1935.00 rows=100000 width=12)\n                       (actual time=0.011..13.542 rows=100000 loops=1)\n Planning time: 23.390 ms\n Execution time: 1409.073 ms\n(13 rows)\n\n\n\n\nAttension for \nDROP DATABASE\n command\n\n\nWhen columnar cache builder constructs columnar cache asynchronously, background worker process has internally connected to the specified database.\nWhen \nDROP DATABASE\n command tries to drop a database, PostgreSQL checks whether any session connects to the database. At that time, even if no user session connects to the database, \nDROP DATABASE\n will fail by columnar cache builder which keeps connection to the database.\n\n\nPlease remove the database name from the \npg_strom.ccache_databases\n parameter prior to execution of \nDROP DATABASE\n command.\nColumnar cache builder will restart soon, then tries to connect databases according to the new configuration.\n\n\nGPU Memory Store(gstore_fdw)\n\n\nOverview\n\n\nUsually, PG-Strom uses GPU device memory for temporary purpose only. It allocates a certain amount of device memory needed for query execution, then transfers data blocks and launch GPU kernel to process SQL workloads. Once GPU kernel gets finished, these device memory regison shall be released soon, to re-allocate unused device memory for other workloads.\n\n\nThis design allows concurrent multiple session or scan workloads on the tables larger than GPU device memory. It may not be optimal depending on circumstances.\n\n\nA typical example is, repeated calculation under various conditions for data with a scale large enough to fit in the GPU device memory, not so large. This applies to workloads such as machine-learning, pattern matching or similarity search.\n\n\nFor modern GPUs, it is not so difficult to process a few gigabytes data on memory at most, but it is a costly process to setup data to be loaded onto GPU device memory and transfer them.\n\n\nIn addition, since variable length data in PostgreSQL has size limitation up to 1GB, it restricts the data format when it is givrn as an argument of PL/CUDA function, even if the data size itself is sufficient in the GPU device memory.\n\n\nGPU memory store (gstore_fdw) is a feature to preserve GPU device memory and to load data to the memory preliminary.\nIt makes unnecessary to setup arguments and load for each invocation of PL/CUDA function, and eliminates 1GB limitation of variable length data because it allows GPU device memory allocation up to the capacity.\n\n\nAs literal, gstore_fdw is implemented using foreign-data-wrapper of PostgreSQL.\nYou can modify the data structure on GPU device memory using \nINSERT\n, \nUPDATE\n or \nDELETE\n commands on the foreign table managed by gstore_fdw. In the similar way, you can also read the data using \nSELECT\n command.\n\n\nPL/CUDA function can reference the data stored onto GPU device memory through the foreign table.\nRight now, GPU programs which is transparently generated from SQL statement cannot reference this device memory region, however, we plan to enhance the feature in the future release.\n\n\n\n\nSetup\n\n\nUsually it takes the 3 steps below to create a foreign table.\n\n\n\n\nDefine a foreign-data-wrapper using \nCREATE FOREIGN DATA WRAPPER\n command\n\n\nDefine a foreign server using \nCREATE SERVER\n command\n\n\nDefine a foreign table using \nCREATE FOREIGN TABLE\n command\n\n\n\n\nThe first 2 steps above are included in the \nCREATE EXTENSION pg_strom\n command. All you need to run individually is \nCREATE FOREIGN TABLE\n command last.\n\n\nCREATE FOREIGN TABLE ft (\n    id int,\n    signature smallint[] OPTIONS (compression 'pglz')\n)\nSERVER gstore_fdw OPTIONS(pinning '0', format 'pgstrom');\n\n\n\n\nYou can specify some options on creation of foreign table using \nCREATE FOREIGN TABLE\n command.\n\n\nSERVER gstore_fdw\n is a mandatory option. It indicates the new foreign table is managed by gstore_fdw.\n\n\nThe options below are supported in the \nOPTIONS\n clause.\n\n\n\n\n\n\n\n\nname\n\n\ntarget\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\npinning\n\n\ntable\n\n\nSpecifies device number of the GPU where device memory is preserved.\n\n\n\n\n\n\nformat\n\n\ntable\n\n\nSpecifies the internal data format on GPU device memory. Default is \npgstrom\n\n\n\n\n\n\ncompression\n\n\ncolumn\n\n\nSpecifies whether variable length data is compressed, or not. Default is uncompressed.\n\n\n\n\n\n\n\n\nRight now, only \npgstrom\n is supported for \nformat\n option. It is identical data format with what PG-Strom uses for in-memory columnar cache.\nIn most cases, no need to pay attention to internal data format on writing / reading GPU data store using SQL. On the other hands, you need to consider when you program PL/CUDA function or share the GPU device memory with external applications using IPC handle.\n\n\nRight now, only \npglz\n is supported for \ncompression\n option. This compression logic adopts an identical data format and algorithm used by PostgreSQL to compress variable length data larger than its threshold.\nIt can be decompressed by GPU internal function \npglz_decompress()\n from PL/CUDA function. Due to the characteristics of the compression algorithm, it is valuable to represent sparse matrix that is mostly zero.\n\n\nOperations\n\n\nLoading data\n\n\nLike normal tables, you can write GPU device memory on behalf of the foreign table using \nINSERT\n, \nUPDATE\n and \nDELETE\n command.\n\n\nNote that gstore_fdw acquires \nSHARE UPDATE EXCLUSIVE\n lock on the beginning of these commands. It means only single transaction can update the gstore_fdw foreign table at a certain point.\nIt is a trade-off. We don't need to check visibility per record when PL/CUDA function references gstore_fdw foreign table.\n\n\nAny contents written to the gstore_fdw foreign table is not visible to other sessions until transaction getting committed, like regular tables.\nThis is a significant feature to ensure atomicity of transaction, however, it also means the older revision of gstore_fdw foreign table contents must be kept on the GPU device memory until any concurrent transaction which may reference the older revision gets committed or aborted.\n\n\nSo, even though you can run \nINSERT\n, \nUPDATE\n or \nDELETE\n commands as if it is regular tables, you should avoidto update several rows then commit transaction many times. Basically, \nINSERT\n of massive rows at once (bulk loading) is recommended.\n\n\nUnlike regular tables, contents of the gstore_fdw foreign table is vollatile. So, it is very easy to loose contents of the gstore_fdw foreign table by power-down or PostgreSQL restart. So, what we load onto gstore_fdw foreign table should be reconstructable by other data source.\n\n\nChecking the memory consumption\n\n\npostgres=# select * from pgstrom.gstore_fdw_chunk_info ;\n database_oid | table_oid | revision | xmin | xmax | pinning | format  |  rawsize  |  nitems\n--------------+-----------+----------+------+------+---------+---------+-----------+----------\n        13806 |     26800 |        3 |    2 |    0 |       0 | pgstrom | 660000496 | 15000000\n        13806 |     26797 |        2 |    2 |    0 |       0 | pgstrom | 440000496 | 10000000\n(2 rows)\n\n\n\n\n$ nvidia-smi\nWed Apr  4 15:11:50 2018\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 390.30                 Driver Version: 390.30                    |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|===============================+======================+======================|\n|   0  Tesla P40           Off  | 00000000:02:00.0 Off |                    0 |\n| N/A   39C    P0    52W / 250W |   1221MiB / 22919MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                       GPU Memory |\n|  GPU       PID   Type   Process name                             Usage      |\n|=============================================================================|\n|    0      6885      C   ...bgworker: PG-Strom GPU memory keeper     1211MiB |\n+-----------------------------------------------------------------------------+\n\n\n\n\nInternal Data Format\n\n\nSee the notes for details of the internal data format when gstore_fdw write on GPU device memory.\n\n\n\n\nDetail of the \npgstrom\n format\n\n\nHere is a link to the note\n\n\n\n\n\n\n\n\nRelated Features\n\n\nCUDA provides special APIs \ncuIpcGetMemHandle()\n and \ncuIpcOpenMemHandle()\n.\nThe first allows to get a unique identifier of GPU device memory allocated by applications. The other one allows to reference a shared GPU device memory region from other applications. In the other words, it supports something like a shared memory on the host system.\n\n\nThis unique identifier is \nCUipcMemHandle\n object; which is simple binary data in 64bytes.\nThis session introduces SQL functions which exchange GPU device memory with other applications using \nCUipcMemHandle\n identifier.\n\n\ngstore_export_ipchandle(reggstore)\n\n\nThis function gets \nCUipcMemHandle\n identifier of the GPU device memory which is preserved by gstore_fdw foreign table, then returns as a binary data in \nbytea\n type.\nIf foreign table is empty and has no GPU device memory, it returns NULL.\n\n\n\n\n1st arg(\nftable_oid\n): OID of the foreign table. Because it is \nreggstore\n type, you can specify the foreign table by name string.\n\n\nresult: \nCUipcMemHandle\n identifier in the bytea type.\n\n\n\n\n# select gstore_export_ipchandle('ft');\n                                                      gstore_export_ipchandle\n\n------------------------------------------------------------------------------------------------------------------------------------\n \\xe057880100000000de3a000000000000904e7909000000000000800900000000000000000000000000020000000000005c000000000000001200d0c10101005c\n(1 row)\n\n\n\n\nlo_import_gpu(int, bytea, bigint, bigint, oid=0)\n\n\nThis function temporary opens the GPU device memory region acquired by external applications, then read this region and writes out as a largeobject of PostgreSQL.\nIf largeobject already exists, its contents is replaced by the data read from the GPU device memory. It keeps owner and permission configuration. Elsewhere, it creates a new largeobject, then write out the data which is read from GPU device memory.\n\n\n\n\n1st arg(\ndevice_nr\n): GPU device number where device memory is acquired\n\n\n2nd arg(\nipc_mhandle\n): \nCUipcMemHandle\n identifier in bytea type\n\n\n3rd(\noffset\n): offset of the head position to read, from the GPU device memory region.\n\n\n4th(\nlength\n): size to read in bytes\n\n\n5th(\nloid\n): OID of the largeobject to be written. 0 is assumed, if no valid value is supplied.\n\n\nresult: OID of the written largeobject\n\n\n\n\nlo_export_gpu(oid, int, bytea, bigint, bigint)\n\n\n\n\n1st arg(\nloid\n): OID of the largeobject to be read\n\n\n2nd arg(\ndevice_nr\n): GPU device number where device memory is acquired\n\n\n3rd arg(\nipc_mhandle\n): \nCUipcMemHandle\n identifier in bytea type\n\n\n4th arg(\noffset\n): offset of the head position to write, from the GPU device memory region.\n\n\n5th arg(\nlength\n): size to write in bytes\n\n\nresult: Length of bytes actually written. If length of the largeobject is less then \nlength\n, it may return the value less than \nlength\n.", 
            "title": "Advanced Features"
        }, 
        {
            "location": "/features/#ssd-to-gpu-direct-sql-execution", 
            "text": "", 
            "title": "SSD-to-GPU Direct SQL Execution"
        }, 
        {
            "location": "/features/#overview", 
            "text": "For the fast execution of SQL workloads, it needs to provide processors rapid data stream from storage or memory, in addition to processor's execution efficiency. Processor will run idle if data stream would not be delivered.  SSD-to-GPU Direct SQL Execution directly connects NVMe-SSD which enables high-speed I/O processing by direct attach to the PCIe bus and GPU device that is also attached on the same PCIe bus, and runs SQL workloads very high speed by supplying data stream close to the wired speed of the hardware.  Usually, PostgreSQL data blocks on the storage shall be once loaded to CPU/RAM through the PCIe bus, then, PostgreSQL runs WHERE-clause for filtering or JOIN/GROUP BY according to the query execution plan. Due to the characteristics of analytic workloads, the amount of result data set is much smaller than the source data set. For example, it is not rare case to read billions rows but output just hundreds rows after the aggregation operations with GROUP BY.  In the other words, we consume bandwidth of the PCIe bus to move junk data, however, we cannot determine whether rows are necessary or not prior to the evaluation by SQL workloads on CPU. So, it is not avoidable restriction in usual implementation.   SSD-to-GPU Direct SQL Execution changes the flow to read blocks from the storage sequentially. It directly loads data blocks to GPU using peer-to-peer DMA over PCIe bus, then runs SQL workloads on GPU device to reduce number of rows to be processed by CPU. In other words, it utilizes GPU as a pre-processor of SQL which locates in the middle of the storage and CPU/RAM for reduction of CPU's load, then tries to accelerate I/O processing in the results.  This feature internally uses NVIDIA GPUDirect RDMA. It allows peer-to-peer data transfer over PCIe bus between GPU device memory and third parth device by coordination using a custom Linux kernel module.\nSo, this feature requires NVMe-Strom driver which is a Linux kernel module in addition to PG-Strom which is a PostgreSQL extension module.  Also note that this feature supports only NVMe-SSD. It does not support SAS or SATA SSD.\nWe have tested several NVMe-SSD models. You can refer  002: HW Validation List  for your information.", 
            "title": "Overview"
        }, 
        {
            "location": "/features/#system-setup", 
            "text": "", 
            "title": "System Setup"
        }, 
        {
            "location": "/features/#driver-installation", 
            "text": "nvme_strom  package is required to activate SSD-to-GPU Direct SQL Execution. This package contains a custom Linux kernel module which intermediates P2P DMA from NVME-SSD to GPU. You can obtain the package from the  HeteroDB Software Distribution Center .  If  heterodb-swdc  package is already installed, you can install the package by  yum  command.  $ sudo yum install nvme_strom\n            :\n================================================================================\n Package             Arch            Version            Repository         Size\n================================================================================\nInstalling:\n nvme_strom          x86_64          0.8-1.el7          heterodb          178 k\n\nTransaction Summary\n================================================================================\nInstall  1 Package\n            :\nDKMS: install completed.\n  Verifying  : nvme_strom-0.8-1.el7.x86_64                                  1/1\n\nInstalled:\n  nvme_strom.x86_64 0:0.8-1.el7\n\nComplete!  Once  nvme_strom  package gets installed, you can see  nvme_strom  module using  lsmod  command below.  $ lsmod | grep nvme\nnvme_strom             12625  0\nnvme                   27722  4\nnvme_core              52964  9 nvme", 
            "title": "Driver Installation"
        }, 
        {
            "location": "/features/#designing-tablespace", 
            "text": "SSD-to-GPU Direct SQL Execution shall be invoked in the following case.   The target table to be scanned locates on the partition being consist of NVMe-SSD.  /dev/nvmeXXXX  block device, or md-raid0 volume which consists of NVMe-SSDs only.    The target table size is larger than  pg_strom.nvme_strom_threshold .  You can adjust this configuration. Its default is physical RAM size of the system plus 1/3 of  shared_buffers  configuration.      Note  Striped read from multiple NVMe-SSD using md-raid0 requires the enterprise subscription provided by HeteroDB,Inc.   In order to deploy the tables on the partition consists of NVMe-SSD, you can use the tablespace function of PostgreSQL to specify particular tables or databases to place them on NVMe-SSD volume, in addition to construction of the entire database cluster on the NVMe-SSD volume.  For example, you can create a new tablespace below, if NVMe-SSD is mounted at  /opt/nvme .  CREATE TABLESPACE my_nvme LOCATION '/opt/nvme';  In order to create a new table on the tablespace, specify the  TABLESPACE  option at the  CREATE TABLE  command below.  CREATE TABLE my_table (...) TABLESPACE my_nvme;  Or, use  ALTER DATABASE  command as follows, to change the default tablespace of the database.\nNote that tablespace of the existing tables are not changed in thie case.  ALTER DATABASE my_database SET TABLESPACE my_nvme;", 
            "title": "Designing Tablespace"
        }, 
        {
            "location": "/features/#operations", 
            "text": "", 
            "title": "Operations"
        }, 
        {
            "location": "/features/#controls-using-guc-parameters", 
            "text": "There are two GPU parameters related to SSD-to-GPU Direct SQL Execution.  The first is  pg_strom.nvme_strom_enabled  that simply turn on/off the function of SSD-to-GPU Direct SQL Execution.\nIf  off , SSD-to-GPU Direct SQL Execution should not be used regardless of the table size or physical location. Default is  on .  The other one is  pg_strom.nvme_strom_threshold  which specifies the least table size to invoke SSD-to-GPU Direct SQL Execution.  PG-Strom will choose SSD-to-GPU Direct SQL Execution when target table is located on NVMe-SSD volume (or md-raid0 volume which consists of NVMe-SSD only), and the table size is larger than this parameter.\nIts default is sum of the physical memory size and 1/3 of the  shared_buffers . It means default configuration invokes SSD-to-GPU Direct SQL Execution only for the tables where we certainly cannot process them on memory.  Even if SSD-to-GPU Direct SQL Execution has advantages on a single table scan workload, usage of disk cache may work better on the second or later trial for the tables which are available to load onto the main memory.  On course, this assumption is not always right depending on the workload charasteristics.", 
            "title": "Controls using GUC parameters"
        }, 
        {
            "location": "/features/#ensure-usage-of-ssd-to-gpu-direct-sql-execution", 
            "text": "EXPLAIN  command allows to ensure whether SSD-to-GPU Direct SQL Execution shall be used in the target query, or not.  In the example below, a scan on the  lineorder  table by  Custom Scan (GpuJoin)  shows  NVMe-Strom: enabled . In this case, SSD-to-GPU Direct SQL Execution shall be used to read from the  lineorder  table.  # explain (costs off)\nselect sum(lo_revenue), d_year, p_brand1\nfrom lineorder, date1, part, supplier\nwhere lo_orderdate = d_datekey\nand lo_partkey = p_partkey\nand lo_suppkey = s_suppkey\nand p_category = 'MFGR#12'\nand s_region = 'AMERICA'\n  group by d_year, p_brand1\n  order by d_year, p_brand1;\n                                          QUERY PLAN\n----------------------------------------------------------------------------------------------\n GroupAggregate\n   Group Key: date1.d_year, part.p_brand1\n   -   Sort\n         Sort Key: date1.d_year, part.p_brand1\n         -   Custom Scan (GpuPreAgg)\n               Reduction: Local\n               GPU Projection: pgstrom.psum((lo_revenue)::double precision), d_year, p_brand1\n               Combined GpuJoin: enabled\n               -   Custom Scan (GpuJoin) on lineorder\n                     GPU Projection: date1.d_year, part.p_brand1, lineorder.lo_revenue\n                     Outer Scan: lineorder\n                     Depth 1: GpuHashJoin  (nrows 2406009600...97764190)\n                              HashKeys: lineorder.lo_partkey\n                              JoinQuals: (lineorder.lo_partkey = part.p_partkey)\n                              KDS-Hash (size: 10.67MB)\n                     Depth 2: GpuHashJoin  (nrows 97764190...18544060)\n                              HashKeys: lineorder.lo_suppkey\n                              JoinQuals: (lineorder.lo_suppkey = supplier.s_suppkey)\n                              KDS-Hash (size: 131.59MB)\n                     Depth 3: GpuHashJoin  (nrows 18544060...18544060)\n                              HashKeys: lineorder.lo_orderdate\n                              JoinQuals: (lineorder.lo_orderdate = date1.d_datekey)\n                              KDS-Hash (size: 461.89KB)\n                     NVMe-Strom: enabled\n                     -   Custom Scan (GpuScan) on part\n                           GPU Projection: p_brand1, p_partkey\n                           GPU Filter: (p_category = 'MFGR#12'::bpchar)\n                     -   Custom Scan (GpuScan) on supplier\n                           GPU Projection: s_suppkey\n                           GPU Filter: (s_region = 'AMERICA'::bpchar)\n                     -   Seq Scan on date1\n(31 rows)", 
            "title": "Ensure usage of SSD-to-GPU Direct SQL Execution"
        }, 
        {
            "location": "/features/#attension-for-visibility-map", 
            "text": "Right now, GPU routines of PG-Strom cannot run MVCC visibility checks per row, because only host code has a special data structure for visibility checks. It also leads a problem.  We cannot know which row is visible, or invisible at the time when PG-Strom requires P2P DMA for NVMe-SSD, because contents of the storage blocks are not yet loaded to CPU/RAM, and MVCC related attributes are written with individual records. PostgreSQL had similar problem when it supports IndexOnlyScan.  To address the problem, PostgreSQL has an infrastructure of visibility map which is a bunch of flags to indicate whether any records in a particular data block are visible from all the transactions. If associated bit is set, we can know the associated block has no invisible records without reading the block itself.  SSD-to-GPU Direct SQL Execution utilizes this infrastructure. It checks the visibility map first, then only \"all-visible\" blocks are required to read with SSD-to-GPU P2P DMA.  VACUUM constructs visibility map, so you can enforce PostgreSQL to construct visibility map by explicit launch of VACUUM command.  VACUUM ANALYZE linerorder;", 
            "title": "Attension for visibility map"
        }, 
        {
            "location": "/features/#in-memory-columnar-cache", 
            "text": "", 
            "title": "In-memory Columnar Cache"
        }, 
        {
            "location": "/features/#overview_1", 
            "text": "PG-Strom has one another feature related to storage to supply processors data stream.  In-memory columnar cache reads data blocks of the target table, convert the row-format of PostgreSQL to columnar format which is suitable for summary and analytics, and cache them on memory.  This feature requires no special hardware like SSD-to-GPU Direct SQL Execution, on the other hands, RAM capacity is still smaller than SSD, so this feature is suitable to handle \"not a large scale data set\" up to 60%-75% of the system RAM size.  This feature is not \"a columnar store\". It means cached and converted data blocks are flashed once PostgreSQL server process has restarted for example. When any cached rows get updated, PG-Strom invalidates the columnar cache block which contains the updated rows.\nThis design on the basis that columnar format is vulnerable to updating workloads. If we try to update columnar-store with keeping consistency towards update of row-store, huge degradation of write performance is not avoidable. On the other hands, it is lightweight operation to invalidate the columnar cache block which contains the updated row.\nPG-Strom can switch GPU kernels to be invoked for row- or columnar-format according to format of the loading data blocks. So, it works flexibly, even if a columnar cache block gets invalidated thus PG-Strom has to load data blocks from the shared buffer of PostgreSQL.", 
            "title": "Overview"
        }, 
        {
            "location": "/features/#system-setup_1", 
            "text": "", 
            "title": "System Setup"
        }, 
        {
            "location": "/features/#location-of-the-columnar-cache", 
            "text": "The  pg_strom.ccache_base_dir  parameter allows to specify the path to store the columnar cache. The default is  /dev/shm  where general Linux distribution mounts  tmpfs  filesystem, so files under the directory are \"volatile\", with no backing store.  Custom configuration of the parameter enables to construct columnar cache on larger and reasonably fast storage, like NVMe-SSD, as backing store. However, note that update of the cached rows invalidates whole of the chunk (128MB) which contains the updated rows. It may lead unexpected performance degradation, if workloads have frequent read / write involving I/O operations.", 
            "title": "Location of the columnar cache"
        }, 
        {
            "location": "/features/#columnar-cache-builder-configuration", 
            "text": "PG-Strom can build in-memory columnar cache automatically and asynchronously using one or multiple background workers. These background workers are called columnar cache builder.  Columnar cache builder scans the target tables to construct columnar cache in the specified database, by round-robin, then converts to columnar format and keep it on the cache. It is an asynchronous job from the backend process which handles user's SQL.  Once a columnar cache is built, any other backend process can reference them. PG-Strom never construct columnar cache on demand, unlike usual disk cache mechanism, even if it is access to the area where columnar cache is not built yet. In this case, PG-Strom loads row-data through the normal storage system of PostgreSQL.  The number of columnar cache builders are fixed on the startup, so you need to setup  pg_strom.ccache_num_builders  parameters then restart PostgreSQL to increase the number of workers.  The  pg_strom.ccache_databases  parameter configures the databases associated with columnar cache builders.\nIt requires superuser privilege to setup, and is updatable on PostgreSQL running. (Of course, it is possible to assign by  postgresql.conf  configuration on startup.)  Once a comma separated list of database names are assigned, columnar cache builders are associated to the specified databases in rotation. For example, if 5 columnar cache builders are running then 3 databases ( postgres,my_test,benchmark ) are assigned on the  pg_strom.ccache_databases , 2 columnar cache builders are assigned on the  postgres  and  my_test  database for each, and 1 columnar cache builder is assigned on the  benchmark  database.", 
            "title": "Columnar Cache Builder Configuration"
        }, 
        {
            "location": "/features/#source-table-configuration", 
            "text": "DBA needs to specify the target tables to build columnar cache.  A SQL function  pgstrom_ccache_enabled(regclass)  adds the supplied table as target to build columnar cache.\nOther way round, a SQL function  pgstrom_ccache_disabled(regclass)  drops the supplied table from the target to build.  Internally, it is implemented as a special trigger function which invalidate columnar cache on write to the target tables.\nIt means we don't build columnar cache on the tables which have no way to invalidate columnar cache.  postgres=# select pgstrom_ccache_enabled('t0');\n pgstrom_ccache_enabled\n------------------------\n enabled\n(1 row)", 
            "title": "Source Table Configuration"
        }, 
        {
            "location": "/features/#operations_1", 
            "text": "", 
            "title": "Operations"
        }, 
        {
            "location": "/features/#check-status-of-columnar-cache", 
            "text": "pgstrom.ccache_info  provides the status of the current columnar cache.  You can check the table, block number, cache creation time and last access time per chunk.  contrib_regression_pg_strom=# SELECT * FROM pgstrom.ccache_info ;\n database_id | table_id | block_nr | nitems  |  length   |             ctime             |             atime\n-------------+----------+----------+---------+-----------+-------------------------------+-------------------------------\n       13323 | 25887    |   622592 | 1966080 | 121897472 | 2018-02-18 14:31:30.898389+09 | 2018-02-18 14:38:43.711287+09\n       13323 | 25887    |   425984 | 1966080 | 121897472 | 2018-02-18 14:28:39.356952+09 | 2018-02-18 14:38:43.514788+09\n       13323 | 25887    |    98304 | 1966080 | 121897472 | 2018-02-18 14:28:01.542261+09 | 2018-02-18 14:38:42.930281+09\n         :       :             :         :          :                :                               :\n       13323 | 25887    |    16384 | 1963079 | 121711472 | 2018-02-18 14:28:00.647021+09 | 2018-02-18 14:38:42.909112+09\n       13323 | 25887    |   737280 | 1966080 | 121897472 | 2018-02-18 14:34:32.249899+09 | 2018-02-18 14:38:43.882029+09\n       13323 | 25887    |   770048 | 1966080 | 121897472 | 2018-02-18 14:28:57.321121+09 | 2018-02-18 14:38:43.90157+09\n(50 rows)", 
            "title": "Check status of columnar cache"
        }, 
        {
            "location": "/features/#check-usage-of-columnar-cache", 
            "text": "You can check whether a particular query may reference columnar cache, or not, using  EXPLAIN  command.  The query below joins the table  t0  and  t1 , and the  Custom Scan (GpuJoin)  which contains scan on the  t0  shows  CCache: enabled .\nIt means columnar cache may be referenced at the scan on  t0 , however, it is not certain whether it is actually referenced until query execution. Columnar cache may be invalidated by the concurrent updates.  postgres=# EXPLAIN SELECT id,ax FROM t0 NATURAL JOIN t1 WHERE aid   1000;\n\n                                  QUERY PLAN\n-------------------------------------------------------------------------------\n Custom Scan (GpuJoin) on t0  (cost=12398.65..858048.45 rows=1029348 width=12)\n   GPU Projection: t0.id, t1.ax\n   Outer Scan: t0  (cost=10277.55..864623.44 rows=1029348 width=8)\n   Outer Scan Filter: (aid   1000)\n   Depth 1: GpuHashJoin  (nrows 1029348...1029348)\n            HashKeys: t0.aid\n            JoinQuals: (t0.aid = t1.aid)\n            KDS-Hash (size: 10.78MB)\n   CCache: enabled\n   -   Seq Scan on t1  (cost=0.00..1935.00 rows=100000 width=12)\n(10 rows)  EXPLAIN ANALYZE  command tells how many times columnar cache is referenced during the query execution.  After the execution of this query,  Custom Scan (GpuJoin)  which contains scan on  t0  shows  CCache Hits: 50 .\nIt means that columnar cache is referenced 50 times. Because the chunk size of columnar cache is 128MB, storage access is replaced to the columnar cache by 6.4GB.  postgres=# EXPLAIN ANALYZE SELECT id,ax FROM t0 NATURAL JOIN t1 WHERE aid   1000;\n\n                                    QUERY PLAN\n\n-------------------------------------------------------------------------------------------\n Custom Scan (GpuJoin) on t0  (cost=12398.65..858048.45 rows=1029348 width=12)\n                              (actual time=91.766..723.549 rows=1000224 loops=1)\n   GPU Projection: t0.id, t1.ax\n   Outer Scan: t0  (cost=10277.55..864623.44 rows=1029348 width=8)\n                   (actual time=7.129..398.270 rows=100000000 loops=1)\n   Outer Scan Filter: (aid   1000)\n   Rows Removed by Outer Scan Filter: 98999776\n   Depth 1: GpuHashJoin  (plan nrows: 1029348...1029348, actual nrows: 1000224...1000224)\n            HashKeys: t0.aid\n            JoinQuals: (t0.aid = t1.aid)\n            KDS-Hash (size plan: 10.78MB, exec: 64.00MB)\n   CCache Hits: 50\n   -   Seq Scan on t1  (cost=0.00..1935.00 rows=100000 width=12)\n                       (actual time=0.011..13.542 rows=100000 loops=1)\n Planning time: 23.390 ms\n Execution time: 1409.073 ms\n(13 rows)", 
            "title": "Check usage of columnar cache"
        }, 
        {
            "location": "/features/#attension-for-drop-database-command", 
            "text": "When columnar cache builder constructs columnar cache asynchronously, background worker process has internally connected to the specified database.\nWhen  DROP DATABASE  command tries to drop a database, PostgreSQL checks whether any session connects to the database. At that time, even if no user session connects to the database,  DROP DATABASE  will fail by columnar cache builder which keeps connection to the database.  Please remove the database name from the  pg_strom.ccache_databases  parameter prior to execution of  DROP DATABASE  command.\nColumnar cache builder will restart soon, then tries to connect databases according to the new configuration.", 
            "title": "Attension for DROP DATABASE command"
        }, 
        {
            "location": "/features/#gpu-memory-storegstore_fdw", 
            "text": "", 
            "title": "GPU Memory Store(gstore_fdw)"
        }, 
        {
            "location": "/features/#overview_2", 
            "text": "Usually, PG-Strom uses GPU device memory for temporary purpose only. It allocates a certain amount of device memory needed for query execution, then transfers data blocks and launch GPU kernel to process SQL workloads. Once GPU kernel gets finished, these device memory regison shall be released soon, to re-allocate unused device memory for other workloads.  This design allows concurrent multiple session or scan workloads on the tables larger than GPU device memory. It may not be optimal depending on circumstances.  A typical example is, repeated calculation under various conditions for data with a scale large enough to fit in the GPU device memory, not so large. This applies to workloads such as machine-learning, pattern matching or similarity search.  For modern GPUs, it is not so difficult to process a few gigabytes data on memory at most, but it is a costly process to setup data to be loaded onto GPU device memory and transfer them.  In addition, since variable length data in PostgreSQL has size limitation up to 1GB, it restricts the data format when it is givrn as an argument of PL/CUDA function, even if the data size itself is sufficient in the GPU device memory.  GPU memory store (gstore_fdw) is a feature to preserve GPU device memory and to load data to the memory preliminary.\nIt makes unnecessary to setup arguments and load for each invocation of PL/CUDA function, and eliminates 1GB limitation of variable length data because it allows GPU device memory allocation up to the capacity.  As literal, gstore_fdw is implemented using foreign-data-wrapper of PostgreSQL.\nYou can modify the data structure on GPU device memory using  INSERT ,  UPDATE  or  DELETE  commands on the foreign table managed by gstore_fdw. In the similar way, you can also read the data using  SELECT  command.  PL/CUDA function can reference the data stored onto GPU device memory through the foreign table.\nRight now, GPU programs which is transparently generated from SQL statement cannot reference this device memory region, however, we plan to enhance the feature in the future release.", 
            "title": "Overview"
        }, 
        {
            "location": "/features/#setup", 
            "text": "Usually it takes the 3 steps below to create a foreign table.   Define a foreign-data-wrapper using  CREATE FOREIGN DATA WRAPPER  command  Define a foreign server using  CREATE SERVER  command  Define a foreign table using  CREATE FOREIGN TABLE  command   The first 2 steps above are included in the  CREATE EXTENSION pg_strom  command. All you need to run individually is  CREATE FOREIGN TABLE  command last.  CREATE FOREIGN TABLE ft (\n    id int,\n    signature smallint[] OPTIONS (compression 'pglz')\n)\nSERVER gstore_fdw OPTIONS(pinning '0', format 'pgstrom');  You can specify some options on creation of foreign table using  CREATE FOREIGN TABLE  command.  SERVER gstore_fdw  is a mandatory option. It indicates the new foreign table is managed by gstore_fdw.  The options below are supported in the  OPTIONS  clause.     name  target  description      pinning  table  Specifies device number of the GPU where device memory is preserved.    format  table  Specifies the internal data format on GPU device memory. Default is  pgstrom    compression  column  Specifies whether variable length data is compressed, or not. Default is uncompressed.     Right now, only  pgstrom  is supported for  format  option. It is identical data format with what PG-Strom uses for in-memory columnar cache.\nIn most cases, no need to pay attention to internal data format on writing / reading GPU data store using SQL. On the other hands, you need to consider when you program PL/CUDA function or share the GPU device memory with external applications using IPC handle.  Right now, only  pglz  is supported for  compression  option. This compression logic adopts an identical data format and algorithm used by PostgreSQL to compress variable length data larger than its threshold.\nIt can be decompressed by GPU internal function  pglz_decompress()  from PL/CUDA function. Due to the characteristics of the compression algorithm, it is valuable to represent sparse matrix that is mostly zero.", 
            "title": "Setup"
        }, 
        {
            "location": "/features/#operations_2", 
            "text": "", 
            "title": "Operations"
        }, 
        {
            "location": "/features/#loading-data", 
            "text": "Like normal tables, you can write GPU device memory on behalf of the foreign table using  INSERT ,  UPDATE  and  DELETE  command.  Note that gstore_fdw acquires  SHARE UPDATE EXCLUSIVE  lock on the beginning of these commands. It means only single transaction can update the gstore_fdw foreign table at a certain point.\nIt is a trade-off. We don't need to check visibility per record when PL/CUDA function references gstore_fdw foreign table.  Any contents written to the gstore_fdw foreign table is not visible to other sessions until transaction getting committed, like regular tables.\nThis is a significant feature to ensure atomicity of transaction, however, it also means the older revision of gstore_fdw foreign table contents must be kept on the GPU device memory until any concurrent transaction which may reference the older revision gets committed or aborted.  So, even though you can run  INSERT ,  UPDATE  or  DELETE  commands as if it is regular tables, you should avoidto update several rows then commit transaction many times. Basically,  INSERT  of massive rows at once (bulk loading) is recommended.  Unlike regular tables, contents of the gstore_fdw foreign table is vollatile. So, it is very easy to loose contents of the gstore_fdw foreign table by power-down or PostgreSQL restart. So, what we load onto gstore_fdw foreign table should be reconstructable by other data source.", 
            "title": "Loading data"
        }, 
        {
            "location": "/features/#checking-the-memory-consumption", 
            "text": "postgres=# select * from pgstrom.gstore_fdw_chunk_info ;\n database_oid | table_oid | revision | xmin | xmax | pinning | format  |  rawsize  |  nitems\n--------------+-----------+----------+------+------+---------+---------+-----------+----------\n        13806 |     26800 |        3 |    2 |    0 |       0 | pgstrom | 660000496 | 15000000\n        13806 |     26797 |        2 |    2 |    0 |       0 | pgstrom | 440000496 | 10000000\n(2 rows)  $ nvidia-smi\nWed Apr  4 15:11:50 2018\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 390.30                 Driver Version: 390.30                    |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|===============================+======================+======================|\n|   0  Tesla P40           Off  | 00000000:02:00.0 Off |                    0 |\n| N/A   39C    P0    52W / 250W |   1221MiB / 22919MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                       GPU Memory |\n|  GPU       PID   Type   Process name                             Usage      |\n|=============================================================================|\n|    0      6885      C   ...bgworker: PG-Strom GPU memory keeper     1211MiB |\n+-----------------------------------------------------------------------------+", 
            "title": "Checking the memory consumption"
        }, 
        {
            "location": "/features/#internal-data-format", 
            "text": "See the notes for details of the internal data format when gstore_fdw write on GPU device memory.   Detail of the  pgstrom  format  Here is a link to the note", 
            "title": "Internal Data Format"
        }, 
        {
            "location": "/features/#related-features", 
            "text": "CUDA provides special APIs  cuIpcGetMemHandle()  and  cuIpcOpenMemHandle() .\nThe first allows to get a unique identifier of GPU device memory allocated by applications. The other one allows to reference a shared GPU device memory region from other applications. In the other words, it supports something like a shared memory on the host system.  This unique identifier is  CUipcMemHandle  object; which is simple binary data in 64bytes.\nThis session introduces SQL functions which exchange GPU device memory with other applications using  CUipcMemHandle  identifier.", 
            "title": "Related Features"
        }, 
        {
            "location": "/features/#gstore_export_ipchandlereggstore", 
            "text": "This function gets  CUipcMemHandle  identifier of the GPU device memory which is preserved by gstore_fdw foreign table, then returns as a binary data in  bytea  type.\nIf foreign table is empty and has no GPU device memory, it returns NULL.   1st arg( ftable_oid ): OID of the foreign table. Because it is  reggstore  type, you can specify the foreign table by name string.  result:  CUipcMemHandle  identifier in the bytea type.   # select gstore_export_ipchandle('ft');\n                                                      gstore_export_ipchandle\n\n------------------------------------------------------------------------------------------------------------------------------------\n \\xe057880100000000de3a000000000000904e7909000000000000800900000000000000000000000000020000000000005c000000000000001200d0c10101005c\n(1 row)", 
            "title": "gstore_export_ipchandle(reggstore)"
        }, 
        {
            "location": "/features/#lo_import_gpuint-bytea-bigint-bigint-oid0", 
            "text": "This function temporary opens the GPU device memory region acquired by external applications, then read this region and writes out as a largeobject of PostgreSQL.\nIf largeobject already exists, its contents is replaced by the data read from the GPU device memory. It keeps owner and permission configuration. Elsewhere, it creates a new largeobject, then write out the data which is read from GPU device memory.   1st arg( device_nr ): GPU device number where device memory is acquired  2nd arg( ipc_mhandle ):  CUipcMemHandle  identifier in bytea type  3rd( offset ): offset of the head position to read, from the GPU device memory region.  4th( length ): size to read in bytes  5th( loid ): OID of the largeobject to be written. 0 is assumed, if no valid value is supplied.  result: OID of the written largeobject", 
            "title": "lo_import_gpu(int, bytea, bigint, bigint, oid=0)"
        }, 
        {
            "location": "/features/#lo_export_gpuoid-int-bytea-bigint-bigint", 
            "text": "1st arg( loid ): OID of the largeobject to be read  2nd arg( device_nr ): GPU device number where device memory is acquired  3rd arg( ipc_mhandle ):  CUipcMemHandle  identifier in bytea type  4th arg( offset ): offset of the head position to write, from the GPU device memory region.  5th arg( length ): size to write in bytes  result: Length of bytes actually written. If length of the largeobject is less then  length , it may return the value less than  length .", 
            "title": "lo_export_gpu(oid, int, bytea, bigint, bigint)"
        }, 
        {
            "location": "/plcuda/", 
            "text": "This chapter introduces the way to implement GPU executable native program as SQL functions, using PL/CUDA procedural language.\n\n\nPL/CUDA Overview\n\n\nPG-Strom internally constructs GPU programs by CUDA language, according to the supplied SQL, then generates GPU's native binary using just-in-time compile. CUDA is a programming environment provided by NVIDIA. It allows implementing parallel program which is executable on GPU device, using C-like statement. This transformation process from SQL statement to CUDA program is an internal process, thus, no need to pay attention what GPU programs are generated and executed from the standpoint of users.\n\n\nOn the other hands, PostgreSQL supports to add programming language to implement SQL functions by \nCREATE LANGUAGE\n statement. PL/CUDA is a language handler to supports \nCREATE LANGUAGE\n command. It also allows users to run arbitrary GPU programs manually implemented as SQL functions, but not only GPU programs automatically generated by PG-Strom based on SQL.\n\n\nIts argument can take the data types supported by PG-Strom, like numeric, text, or array-matrix data type. These arguments are implicitly loaded onto GPU device memory by the PL/CUDA infrastructure, so users don't need to pay attention for data loading between the database and GPU devices. In a similar fashion, the return value of PL/CUDA function (including the case of variable length data type) will be written back to CPU from GPU, then decode to the result of SQL function.\n\n\nYou can also use foreign tables defined with \ngstore_fdw\n as arguments of PL/CUDA function. In this case, no need to load the data onto GPU for each invocation because foreign table already keeps the data, and available to use larger data than 1GB which is a restriction of variable length data in PostgreSQL.\n\n\nTherefore, users can focus on productive tasks like implementation of statistical analysis, code optimization and so on, without routine process like data input/output between GPU and databases.\n\n\n\n\nOnce a PL/CUDA function is declared with CREATE FUNCTION statement, it generates a CUDA program that embeds the definition of this function on the GPU's kernel function at the execution time. This kernel function contains initialization code to reference this PL/CUDA functions and auxiliary code to return run-time error to CPU side. Also, it can include some run-time functions to support execution of PG-Strom.\n\n\nHere is no special memory protection mechanism on the native CUDA program made with PL/CUDA function, thus, execution of buggy PL/CUDA function can crash GPU execution environment or PostreSQL infrastructure in some cases. Thus, only database superuser can define PL/CUDA function.\n\n\nBelow is an example of simple PL/CUDA function. This function takes two int arguments, and then returns the sum of them with int data type.\n\n\npostgres=# CREATE FUNCTION gpu_add(int, int)\nRETURNS int\nAS $$\n#plcuda_include \ncuda_mathlib.h\n\n#plcuda_begin\n  if (get_global_id() == 0)\n    *retval = pgfn_int4pl(kcxt, arg1, arg2);\n#plcuda_end\n$$ LANGUAGE plcuda;\nCREATE FUNCTION\n\n\n\n\nThe code block enclosed by \n#plcuda_begin\n and \n#plcuda_end\n is main portion of PL/CUDA function. This kernel function can reference the \nint\n type argument as \narg1\n and \narg2\n which are \npg_int4_t\n variables, and can return the result values written on the region pointed by retval variable which is a pointer of \npg_int4_t *\n data type, as result of PL/CUDA function. \npgfn_int4pl()\n is a runtime function of PG-Strom, declared at \ncuda_mathlib.h\n, which adds two \npg_int4_t\n variables.\n\n\nBelow is an example of execution of this PL/CUDA function. Its two integer arguments (100 and 200) were sent to GPU device, then it wrote back the calculated result (300) from the GPU device. As like normal SQL functions, PL/CUDA function can be used as a part of SQL expression.\n\n\npostgres=# SELECT gpu_add(100,200);\n gpu_add\n---------\n     300\n(1 row)\n\n\n\n\nThe plcuda_function_source function allows showing the source of kernel function generated by the PL/CUDA function. The code block enclosed by the comment: \n/* ---- code by pl/cuda function ---- */\n is the portion injected from the declaration of PL/CUDA function\n\n\npostgres=# SELECT pgstrom.plcuda_function_source('gpu_add'::regproc);\n                     plcuda_function_source\n----------------------------------------------------------------\n #include \ncuda_device_runtime_api.h\n                          +\n                                                               +\n #define HOSTPTRLEN 8                                          +\n #define DEVICEPTRLEN 8                                        +\n #define BLCKSZ 8192                                           +\n #define MAXIMUM_ALIGNOF 8                                     +\n #define MAXIMUM_ALIGNOF_SHIFT 3                               +\n #define PGSTROM_KERNEL_DEBUG 1                                +\n #include \ncuda_common.h\n                                      +\n                                                               +\n #define PG_BOOLOID 16                                         +\n #define PG_INT2OID 21                                         +\n #define PG_INT4OID 23                                         +\n #define PG_INT8OID 20                                         +\n #define PG_FLOAT2OID 237809                                   +\n #define PG_FLOAT4OID 700                                      +\n #define PG_FLOAT8OID 701                                      +\n #define PG_CASHOID 790                                        +\n #define PG_UUIDOID 2950                                       +\n #define PG_MACADDROID 829                                     +\n #define PG_INETOID 869                                        +\n #define PG_CIDROID 650                                        +\n #define PG_DATEOID 1082                                       +\n #define PG_TIMEOID 1083                                       +\n #define PG_TIMETZOID 1266                                     +\n #define PG_TIMESTAMPOID 1114                                  +\n #define PG_TIMESTAMPTZOID 1184                                +\n #define PG_INTERVALOID 1186                                   +\n #define PG_BPCHAROID 1042                                     +\n #define PG_VARCHAROID 1043                                    +\n #define PG_NUMERICOID 1700                                    +\n #define PG_BYTEAOID 17                                        +\n #define PG_TEXTOID 25                                         +\n #define PG_INT4RANGEOID 3904                                  +\n #define PG_INT8RANGEOID 3926                                  +\n #define PG_TSRANGEOID 3908                                    +\n #define PG_TSTZRANGEOID 3910                                  +\n #define PG_DATERANGEOID 3912                                  +\n                                                               +\n #include \ncuda_mathlib.h\n                                     +\n typedef union {                                               +\n     pg_varlena_t     varlena_v;                               +\n     pg_bool_t        bool_v;                                  +\n     pg_int2_t        int2_v;                                  +\n     pg_int4_t        int4_v;                                  +\n     pg_int8_t        int8_v;                                  +\n     pg_float2_t      float2_v;                                +\n     pg_float4_t      float4_v;                                +\n     pg_float8_t      float8_v;                                +\n #ifdef CUDA_NUMERIC_H                                         +\n     pg_numeric_t     numeric_v;                               +\n #endif                                                        +\n #ifdef CUDA_MISC_H                                            +\n     pg_money_t       money_v;                                 +\n     pg_uuid_t        uuid_v;                                  +\n     pg_macaddr_t     macaddr_v;                               +\n     pg_inet_t        inet_v;                                  +\n     pg_cidr_t        cidr_t;                                  +\n #endif                                                        +\n #ifdef CUDA_TIMELIB_H                                         +\n     pg_date_t        date_v;                                  +\n     pg_time_t        time_v;                                  +\n     pg_timestamp_t   timestamp_v;                             +\n     pg_timestamptz_t timestamptz_v;                           +\n #endif                                                        +\n #ifdef CUDA_TEXTLIB_H                                         +\n     pg_bpchar_t      bpchar_v;                                +\n     pg_text_t        text_v;                                  +\n     pg_varchar_t     varchar_v;                               +\n #endif                                                        +\n #ifdef CUDA_RANGETYPE_H                                       +\n     pg_int4range_t   int4range_v;                             +\n     pg_int8range_t   int8range_v;                             +\n #ifdef CUDA_TIMELIB_H                                         +\n     pg_tsrange_t     tsrange_v;                               +\n     pg_tstzrange_t   tstzrange_v;                             +\n     pg_daterange_t   daterange_v;                             +\n #endif                                                        +\n #endif                                                        +\n   } pg_anytype_t;                                             +\n                                                               +\n                                                               +\n #include \ncuda_plcuda.h\n                                      +\n STATIC_INLINE(void)                                           +\n __plcuda_main_kernel(kern_plcuda *kplcuda,                    +\n                    void *workbuf,                             +\n                    void *results,                             +\n                    kern_context *kcxt)                        +\n {                                                             +\n   pg_int4_t *retval __attribute__ ((unused));                 +\n   pg_int4_t arg1 __attribute__((unused));                     +\n   pg_int4_t arg2 __attribute__((unused));                     +\n   assert(sizeof(*retval) \n= sizeof(kplcuda-\n__retval));       +\n   retval = (pg_int4_t *)kplcuda-\n__retval;                    +\n   arg1 = pg_int4_param(kcxt,0);                               +\n   arg2 = pg_int4_param(kcxt,1);                               +\n                                                               +\n   /* ---- code by pl/cuda function ---- */                    +\n   if (get_global_id() == 0)                                   +\n     *retval = pgfn_int4pl(kcxt, arg1, arg2);                  +\n   /* ---- code by pl/cuda function ---- */                    +\n }                                                             +\n                                                               +\n KERNEL_FUNCTION(void)                                         +\n plcuda_main_kernel_entrypoint(kern_plcuda *kplcuda,           +\n             void *workbuf,                                    +\n             void *results)                                    +\n {                                                             +\n   kern_parambuf *kparams = KERN_PLCUDA_PARAMBUF(kplcuda);     +\n   kern_context kcxt;                                          +\n                                                               +\n   assert(kplcuda-\nnargs \n= kparams-\nnparams);                 +\n   INIT_KERNEL_CONTEXT(\nkcxt,plcuda_main_kernel,kparams);      +\n   __plcuda_main_kernel(kplcuda, workbuf, results, \nkcxt);     +\n   kern_writeback_error_status(\nkplcuda-\nkerror_main, \nkcxt.e);+\n }                                                             +\n                                                               +\n                                                               +\n #include \ncuda_terminal.h\n                                    +\n\n(1 row)\n\n\n\n\nPL/CUDA Structure\n\n\nFunction declaration with PL/CUDA is consists of several code blocks split by directives that begin from \n#plcuda_...\n. Only the code block start with \n#plcuda_begin\n is the minimum requirement, and you can add some other code block on demand.\n\n\n#plcuda_decl\n  [...any declarations...]\n#plcuda_prep\n  [...function body of prep kernel...]\n#plcuda_begin\n  [...function body of main kernel...]\n#plcuda_post\n  [...function body of post kernel...]\n#plcuda_end\n\n\n\n\nThe declaration block, which begins with \n#plcuda_decl\n, can have declaration of static functions we can call from other code blocks. Unlike other code blocks, the contents of the code block won't be injected into a particular kernel function, and you need to declare complete static functions. When a kernel function is executed with parallel threads larger than block size on a GPU device, the only way to synchronize between multiple execution units is synchronization of kernel function exit. For example, in case when algorithm is implemented under the assumption of correct initialization of the result buffer, you have to initialize the results buffer first, then you cannot execute the core of algorithm until completion of the initialization. If a part of threads would be executed towards uninitialized buffer, it easily leads incorrect calculation results or crash of execution environment, you always need to avoid.\n\n\nEvery content of user defined code blocks, the preparation block begins from \n#plcuda_prep\n, the main block begins from \n#plcuda_begin\n, and the post-process block begins from \n#plcuda_post\n, shall be injected to the relevant kernel functions. Even though implementation of the preparation block and the post-process block are optional, we will ensure the order to launch the preparation kernel function, the main kernel function, then the post-process kernel function when these code blocks are defined. We intend to use these functions to initialize the results buffer or working buffer prior to execution of the main kernel function, or to summarize the final results next to execution of the main kernel.\n\n\nAn invocation of PL/CUDA function internall contains several SQL functions and launch GPU kernel functions. Prior to the GPU kernel functions, we have to determine the parameters when GPU kernel functions like number of threads, amount of results and working buffer. These parameters depend on the arguments, so PL/CUDA handler determines with other SQL functions that take identical argument signature.\n\n\nOnce we could determine the parameters to call GPU kernel function, PL/CUDA handler loads the arguments of PL/CUDA function onto the argument buffer on GPUs, by DMA copy, on demand.\n\n\nThen, it launches the preparation kernel function (if any), the main kernel function, and the post-process kernel function (if any). Please note that we cannot synchronize GPU threads across the block size boundary, except for the timing of GPU kernel function begin/end. It means, if you expect a particular state exists on the working buffer or results buffer, buffer initialization by preparation kernel then reference of this data structure by the main kernel are required.\n\n\nFinally, PL/CUDA handler writes back the contents of result buffer into the host side. In case when PL/CUDA function returns a fixed-length datum, the code block updates the area pointed by the \nretval\n variable which is initialized prior to execution of the user defined block. In case when PL/CUDA function returns a variable-length datum, \nretval\n points to the area of \npg_varlena_t\n, and its value has to be a reference to the results buffer (\nvoid *results\n), if it is not a \nNULL\n. Please note that it shall not be written back if \nretval\n points out of the results buffer.\n\n\ntypedef struct {\n    varlena    *value;      /* reference to the results buffer */\n    cl_bool     isnull;     /* true, if NULL */\n} pg_varlena_t;\n\n\n\n\n\n\n#plcuda_num_threads\n directive allows specifying the number of threads to execute GPU kernel function. This directive can be used inside of the code block, and takes either a constant value or a SQL function. This SQL function has to be declared to take identical argument types and return bigint type.\n\n\nIn a similar fashion, \n#plcuda_shmem_unitsz\n allows to specify the amount of shared memory per thread, to be acquired on GPU kernel function launch. For example, when a GPU kernel function that consumes 8bytes per thread is launched with 384 threads per streaming-multiprocessor, 3KB of shared memory shall be available. Please note that the number of threads per streaming-multiprocessor shall be automatically calculated during the code optimization, a different concept from what we specify with \n#plcuda_num_threads\n directive.\n\n\n#plcuda_kernel_maxthreads\n directive allows switching optimization policy of the kernel function for the current code block, from maximization of execution efficiency to maximization of number of threads per streaming-multiprocessor (usually 1024). Increase of number of threads per streaming-multiprocessor will improve the performance of workloads which heavily use inter-threads synchronization using shared memory, like reduction operation. On the other hands, it reduces number of registers per thread, needs a right policy in the right place.\n\n\n#plcuda_num_threads (\nvalue\n|\nfunction name\n)\n#plcuda_shmem_unitsz  (\nvalue\n|\nfunction name\n)\n#plcuda_kernel_maxthreads\n\n\n\n\nPL/CUDA References\n\n\nThis section is a reference for PL/CUDA function's directives and related SQL functions.\n\n\nPL/CUDA Directives\n\n\n#plcuda_begin\n\n\nIt marks beginning of the main kernel function code block. This directive is always required. Prior to execution of the code block on GPU, the arguments of PL/CUDA function are initialized for references by variable names like \narg1\n, \narg2\n, ... These variables have same representation with what PG-Strom represents SQL data types on GPU, for example, an argument of the \nreal\n data type (that is single precision floating point type) is shown as a \npg_float4_t\n type variable as declared below.\n\n\ntypedef struct {\n    cl_float    value;\n    cl_bool     isnull;\n} pg_float4_t;\n\n\n\n\nThese variables are kept in private area of each threads, thus, update of these variables are not reflected on execution of the kernel function on the next step. If you want to share the state between kernel functions, value shall be kept in either the working buffer referenced by the \nvoid *workbuf\n pointer or the results buffer referenced by the \nvoid *results\n pointer.\n\n\n#plcuda_end\n\n\nIt marks end of the kernel function code block. By the way, if a directive to start code block was put inside of the different code block, the current code block is implicitly closed by the \n#plcuda_end\n directive.\n\n\n#plcuda_decl\n\n\nUse of this directive is optional. It marks beginning of the declaration code block that contains the raw code to be declared prior to the definition of any kernel functions. Unlike other code blocks, the contents of this code block shall not be applied as a kernel function, thus, you have to put complete definition of functions.\n\n\n#plcuda_prep\n\n\nUse of this directive is optional. It marks beginning of the preparation code block that shall be executed on GPU prior to the main kernel function; begins from \n#plcuda_begin\n directive. We expect the preparation kernel initializes the results and working buffer. The main kernel shall not be kicked until completion of the preparation kernel. Arguments of PL/CUDA functions can be referenced like as the main kernel function doing.\n\n\n#plcuda_post\n\n\nYou can optionally use this directive. It marks beginning of the post-process code block that shall be executed on GPU next to the main kernel function; begins from \n#plcuda_begin\n directive. We expect the post-process kernel set up the final results to be returned to the CPU side. The post-process kernel shall not be kicked until completion of the preparation kernel. Arguments of PL/CUDA functions can be referenced like as the main kernel function doing.\n\n\n#plcuda_num_threads (\nvalue\n|\nfunction\n)\n\n\nUse of this directive is optional. If not specified, the default is a constant value \n1\n.\nThis directive allows specifying the number of threads to execute the GPU kernel function if it is used in the code block of \n#plcuda_prep\n, \n#plcuda_begin\n, or \n#plcuda_post\n.\nIf a constant value is specified, PL/CUDA runtime kicks the specified number of GPU threads to run the GPU kernel function. If a SQL function name is specified, PL/CUDA runtime call the specified SQL function, and then result of the function shall be applied as the number of GPU threads to run the GPU kernel function. This SQL function takes identical arguments with PL/CUDA function, and returns bigint data type.\n\n\n#plcuda_shmem_unitsz (\nvalue\n|\nfunction\n)\n\n\nUse of this directive is optional. If not specified, the default is a constant value \n0\n.\n\n\nThis directive allows specifying amount of the shared memory per thread to be dinamically allocated on GPU kernel execution, if it is used in the code block of \n#plcuda_prep\n, \n#plcuda_begin\n, or \n#plcuda_post\n.\n\n\nIf a constant value is specified, PL/CUDA runtime kicks GPU kernel function with the specified amount of the shared memory per thread.\n\n\nIf a SQL function name is specified, PL/CUDA runtime call the specified SQL function, and then result of the function shall be applied as the amount of the shared memory per thread to run the GPU kernel function. This SQL function takes identical arguments with PL/CUDA function, and returns bigint data type.\n\n\nPlease note that amount of the shared memory actually acquired on execution of GPU kernel function depends on the number of threads per streaming-multiprocessor, not only the amount of shared memory per thread specified by this directive. (Also note that the number of threads per streaming-multiprocessor is a different concept what we specified using #plcuda_num_threads.) For example, if amount of shared memory per thread is 8 bytes and the number of streaming-multiprocessor is 384, 3KB of shared memory shall be allocated per streaming-multiprocessor. At that time, if the number of total threads specified by #plcuda_num_threads is 32768, this GPU kernel shall be executed with 86 streaming-multiprocessor. However, it is the role of scheduler to determine the timing to put kernels into, so it does not mean that 86 x 3KB = 256KB of the shared memory is consumed at once.\n\n\n#plcuda_shmem_blocksz (\nvalue\n|\nfunction\n)\n\n\nUse of this directive is optional. If not specified, the default is a constant value \n0\n.\n\n\nThis directive allows specifying amount of the shared memory per block to be dinamically allocated on GPU kernel execution, if it is used in the code block of \n#plcuda_prep\n, \n#plcuda_begin\n, or \n#plcuda_post\n.\n\n\nIf a constant value is specified, PL/CUDA runtime kicks GPU kernel function with the specified amount of the shared memory per block.\n\n\nIf a SQL function name is specified, PL/CUDA runtime call the specified SQL function, and then result of the function shall be applied as the amount of the shared memory per block to run the GPU kernel function. This SQL function takes identical arguments with PL/CUDA function, and returns bigint data type.\n\n\n#plcuda_kernel_blocksz (\nvalue\n|\nfunction\n)\n\n\nUse of this directive is optional.\n\n\nThis directive allows specifying the number of threads per streaming-multiprocessor, if it is used in the code block of \n#plcuda_prep\n, \n#plcuda_begin\n, or \n#plcuda_post\n. It is usually a multiple number of the warp value of the device, and equal to or less than \n1024\n. In the default, an optimal value is applied according to the resource consumption of the GPU kernel function, therefore, this directive shall not be used unless you have no special reason; a larger block size is preferable due to characteristics of the algorithm for example.\n\n\nIf a constant value is specified, PL/CUDA runtime kicks GPU kernel function with the specified amount of the shared memory per block.\nIf a SQL function name is specified, PL/CUDA runtime calls the specified SQL function, and then result of the function shall be applied as the amount of the shared memory per block to run the GPU kernel function. This SQL function takes identical arguments with PL/CUDA function, and returns \nbigint\n data type.\n\n\nIncrease the number of threads per streaming-multiprocessor allows more threads to synchronize other threads using the shared memory, on the other hands, it leads decrease of the amount of registers a thread can use, thus, it may have performance degradation by private variables allocation on the (slow) global memory for example.\n\n\n#plcuda_include (\"library name\"|\nfunction name\n)\n\n\nThis directive includes the static GPU library of PG-Strom, or a user defined code block, for use in PL/CUDA functions.\nPlease note that it is NOT a feature to include arbitrary header files on the server system.\n\n\nIf any of the static library name below is specified, PL/CUDA runtime injects the library on the head of the generated CUDA C program. Honestlly, it is a legacy manner, so we expect limited use cases.\n\n\nIf a SQL function name is specified, PL/CUDA runtime calls the specified SQL function, and then result of the function shall be injected to the CUDA C code where \n#plcuda_include\n directive exists. This SQL function takes identical arguments with PL/CUDA function, and returns \ntext\n data type.\n\n\n\n\n\n\n\n\nLibrary name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\"cuda_dynpara.h\"\n\n\nA collection of GPU runtime functions related to dynamic parallelism; that launch kernel functions on GPU. Include of this file also links the device runtime library of CUDA.\n\n\n\n\n\n\n\"cuda_matrix.h\"\n\n\nA collection of GPU runtime functions to process the array type of SQL as if vector/matrix.\n\n\n\n\n\n\n\"cuda_timelib.h\"\n\n\nA collection of GPU runtime functions to process the date and time data type of SQL.\n\n\n\n\n\n\n\"cuda_textlib.h\"\n\n\nA collection of GPU runtime functions to process the text data type and LIKE operator.\n\n\n\n\n\n\n\"cuda_numeric.h\"\n\n\nA a collection of GPU runtime functions to process the \nnumeric\n data type of SQL.\n\n\n\n\n\n\n\"cuda_mathlib.h\"\n\n\nA collection of GPU runtime functions to process the arithmetic operators and mathematic functions of SQL.\n\n\n\n\n\n\n\"cuda_money.h\"\n\n\nA collection of GPU runtime functions to process the currency data type of SQL.\n\n\n\n\n\n\n\"cuda_curand.h\"\n\n\nA collection of GPU runtime functions to use \ncurand\n library which supports random number generation, provided by CUDA.\n\n\n\n\n\n\n\n\n#plcuda_results_bufsz (\nvalue\n|\nfunction\n)\n\n\nUse of this directive is optional. If not specified, the default is a constant value \n0\n.\n\n\nThis directive allows specifying amount of the results buffer in bytes, to be acquired on execution of PL/CUDA function. If PL/CUDA function is declared to return variable length datum, allocation of the results buffer is needed.\n\n\nIf a constant value is specified, PL/CUDA language handler acquires the specified amount of GPU RAM as the results buffer, then launch the GPU kernel functions. If a SQL function name is specified, PL/CUDA language handler call the specified SQL function, then result of the function shall be applied as the amount of GPU RAM for the results buffer and launch the GPU kernel functions. This SQL function takes identical arguments with PL/CUDA function, and returns bigint data type.\n\n\nGPU kernel functions can access the results buffer as the region pointed by the \nvoid *results\n argument. If \n0\n bytes were specified, \nNULL\n shall be set on the \nvoid *results\n.\n\n\n#plcuda_working_bufsz (\nvalue\n|\nfunction\n)\n\n\nUse of this directive is optional. If not specified, the default is a constant value \n0\n.\n\n\nThis directive allows specifying amount of the working buffer in bytes, to be acquired on execution of PL/CUDA function.\n\n\nIf a constant value is specified, PL/CUDA language handler acquires the specified amount of GPU RAM as the working buffer, and then launch the GPU kernel functions. If a SQL function name is specified, PL/CUDA language handler call the specified SQL function, then result of the function shall be applied as the amount of GPU RAM for the working buffer and launch the GPU kernel functions. This SQL function takes identical arguments with PL/CUDA function, and returns bigint data type.\n\n\nGPU kernel functions can access the working buffer as the region pointed by the void \nresults argument. If 0 bytes were specified, NULL shall be set on the void \nresults.\n\n\n#plcuda_sanity_check \nfunction\n\n\nIt allows to specify the sanity check function that preliminary checks adequacy of the supplied arguments, prior to GPU kernel launch.\nNo sanity check function is configured on the default.\nUsually, launch of GPU kernel function is heavier task than call of another function on CPU, because it also involves initialization of GPU devices. If supplied arguments have unacceptable values from the specification of the PL/CUDA function, a few thousands or millions (or more in some cases) of GPU kernel threads shall be launched just to check the arguments and return an error status. If sanity check can be applied prior to the launch of GPU kernel function with enough small cost, it is a valuable idea to raise an error using sanity check function prior to the GPU kernel function. The sanity check function takes identical arguments with PL/CUDA function, and returns \nbool\n data type.\n\n\n#plcuda_cpu_fallback \nfunction\n\n\nIt allows to specify the CPU fallback function that performs as like GPU kernel function. No CPU fallback function is configured on the default.\n\n\nIf GPU kernel function returns StromError_CpuReCheck error and the CPU fallback function is configured, the PL/CUDA language handler discards the results of processing on GPU side, then call the CPU fallback function. It is valuable to implement an alternative remedy, in case when GPU kernel function is not always executable for all possible input; for example, data size may be too large to load onto GPU RAM. Also note that we must have a trade-off of the performance because CPU fallback function shall be executed in CPU single thread.\n\n\nPL/CUDA Related Functions\n\n\n\n\n\n\n\n\nDefinition\n\n\nResult\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nplcuda_function_source(regproc)\n\n\ntext\n\n\nIt returns source code of the GPU kernel generated from the PL/CUDA function, towards the OID input of PL/CUDA function as argument.\n\n\n\n\n\n\n\n\nArray-Matrix Functions\n\n\nThis section introduces the SQL functions that supports array-based matrix types provided by PG-Strom.\n\n\n\n\n2-dimensional Array\n\n\nElement of array begins from 1 for each dimension\n\n\nNo NULL value is contained\n\n\nLength of the array is less than 1GB, due to the restriction of variable length datum in PostgreSQL\n\n\nArray with \nsmallint\n, \nint\n, \nbigint\n, \nreal\n or \nfloat\n data type\n\n\n\n\nIf and when the array satisfies the above terms, we can determine the location of (i,j) element of the array by the index uniquely, and it enables GPU thread to fetch the datum to be processed very efficiently. Also, array-based matrix packs only the data to be used for calculation, unlike usual row-based format, so it has advantaged on memory consumption and data transfer.\n\n\n\n\n\n\n\n\nDefinition\n\n\nResult\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narray_matrix(variadic arg, ...)\n\n\narray\n\n\nIt is an aggregate function that combines all the rows supplied. For example, when 3 \nfloat\n arguments were supplied by 1000 rows, it returns an array-based matrix of 3 columns X 1000 rows, with \nfloat\n data type.\nThis function is declared to take variable length arguments. The \narg\n takes one or more scalar values of either \nsmallint\n, \nint\n, \nbigint\n, \nreal\n or \nfloat\n. All the arg must have same data types.\n\n\n\n\n\n\nmatrix_unnest(array)\n\n\nrecord\n\n\nIt is a set function that extracts the array-based matrix to set of records. \narray\n is an array of \nsmallint\n, \nint\n, \nbigint\n, \nreal\n or \nfloat\n data. It returns \nrecord\n type which consists of more than one columns according to the width of matrix. For example, in case of a matrix of 10 columns X 500 rows, each records contains 10 columns with element type of the matrix, then it generates 500 of the records. \nIt is similar to the standard \nunnest\n function, but generates \nrecord\n type, thus, it requires to specify the record type to be returned using \nAS (colname1 type[, ...])\n clause.\n\n\n\n\n\n\nrbind(array, array)\n\n\narray\n\n\narray\n is an array of \nsmallint\n, \nint\n, \nbigint\n, \nreal\n or \nfloat\n data. This function combines the supplied two matrices vertically. Both matrices needs to have same element data type. If width of matrices are not equivalent, it fills up the padding area by zero.\n\n\n\n\n\n\nrbind(array)\n\n\narray\n\n\narray\n is an array of \nsmallint\n, \nint\n, \nbigint\n, \nreal\n or \nfloat\n data. This function is similar to \nrbind(array, array)\n, but performs as an aggregate function, then combines all the input matrices into one result vertically.\n\n\n\n\n\n\ncbind(array, array)\n\n\narray\n\n\narray\n is an array of \nsmallint\n, \nint\n, \nbigint\n, \nreal\n or \nfloat\n data. This function combines the supplied two matrices horizontally. Both matrices needs to have same element data type. If height of matrices are not equivalent, it fills up the padding area by zero.\n\n\n\n\n\n\ncbind(array)\n\n\narray\n\n\narray\n is an array of \nsmallint\n, \nint\n, \nbigint\n, \nreal\n or \nfloat\n data. This function is similar to cbind(array, array), but performs as an aggregate function, then combines all the input matrices into one result horizontally.\n\n\n\n\n\n\ntranspose(array)\n\n\narray\n\n\narray\n is an array of \nsmallint\n, \nint\n, \nbigint\n, \nreal\n or \nfloat\n data. This function makes a transposed matrix that swaps height and width of the supplied matrix.\n\n\n\n\n\n\narray_matrix_validation(anyarray)\n\n\nbool\n\n\nIt validates whether the supplied array (\nanyarray\n) is adequate for the array-based matrix. It is intended to use for sanity check prior to invocation of PL/CUDA function, or check constraint on domain type definition.\n\n\n\n\n\n\narray_matrix_height(array)\n\n\nint\n\n\narray\n is an array of either \nsmallint\n, \nint\n, \nbigint\n, \nreal\n or \nfloat\n data. This function returns the height of the supplied matrix.\n\n\n\n\n\n\narray_matrix_width(array)\n\n\nint\n\n\narray\n is an array of either \nsmallint\n, \nint\n, \nbigint\n, \nreal\n or \nfloat\n data. This function returns the width of the supplied matrix.\n\n\n\n\n\n\narray_vector_rawsize(regtype,int)\n\n\nbigint\n\n\nIt returns required bytesize to store an array-based vector (1-dimensional array) with data type specified by the 1st argument and height by the 2nd argument. It is intended to use for \n#plcuda_results_bufsz\n and \n#plcuda_working_bufsz\n.\n\n\n\n\n\n\narray_matrix_rawsize(regtype,int,int)\n\n\nbigint\n\n\nIt returns required bytesize to store an array-based matrix with data type specified by the 1st argument, height by the 2nd argument and width by the 3rd argument. It is intended to use for \n#plcuda_results_bufsz\n and \n#plcuda_working_bufsz\n.\n\n\n\n\n\n\narray_cube_rawsize(regtype,int,int,int)\n\n\nbigint\n\n\nIt returns required bytesize to store an array-based cube (3-dimensional array) with data type specified by the 1st argument, height by the 2nd argument, width by the 3rd argument, and depth by the 4th argument. It is intended to use for \n#plcuda_results_bufsz\n and \n#plcuda_working_bufsz\n.", 
            "title": "PL/CUDA"
        }, 
        {
            "location": "/plcuda/#plcuda-overview", 
            "text": "PG-Strom internally constructs GPU programs by CUDA language, according to the supplied SQL, then generates GPU's native binary using just-in-time compile. CUDA is a programming environment provided by NVIDIA. It allows implementing parallel program which is executable on GPU device, using C-like statement. This transformation process from SQL statement to CUDA program is an internal process, thus, no need to pay attention what GPU programs are generated and executed from the standpoint of users.  On the other hands, PostgreSQL supports to add programming language to implement SQL functions by  CREATE LANGUAGE  statement. PL/CUDA is a language handler to supports  CREATE LANGUAGE  command. It also allows users to run arbitrary GPU programs manually implemented as SQL functions, but not only GPU programs automatically generated by PG-Strom based on SQL.  Its argument can take the data types supported by PG-Strom, like numeric, text, or array-matrix data type. These arguments are implicitly loaded onto GPU device memory by the PL/CUDA infrastructure, so users don't need to pay attention for data loading between the database and GPU devices. In a similar fashion, the return value of PL/CUDA function (including the case of variable length data type) will be written back to CPU from GPU, then decode to the result of SQL function.  You can also use foreign tables defined with  gstore_fdw  as arguments of PL/CUDA function. In this case, no need to load the data onto GPU for each invocation because foreign table already keeps the data, and available to use larger data than 1GB which is a restriction of variable length data in PostgreSQL.  Therefore, users can focus on productive tasks like implementation of statistical analysis, code optimization and so on, without routine process like data input/output between GPU and databases.   Once a PL/CUDA function is declared with CREATE FUNCTION statement, it generates a CUDA program that embeds the definition of this function on the GPU's kernel function at the execution time. This kernel function contains initialization code to reference this PL/CUDA functions and auxiliary code to return run-time error to CPU side. Also, it can include some run-time functions to support execution of PG-Strom.  Here is no special memory protection mechanism on the native CUDA program made with PL/CUDA function, thus, execution of buggy PL/CUDA function can crash GPU execution environment or PostreSQL infrastructure in some cases. Thus, only database superuser can define PL/CUDA function.  Below is an example of simple PL/CUDA function. This function takes two int arguments, and then returns the sum of them with int data type.  postgres=# CREATE FUNCTION gpu_add(int, int)\nRETURNS int\nAS $$\n#plcuda_include  cuda_mathlib.h \n#plcuda_begin\n  if (get_global_id() == 0)\n    *retval = pgfn_int4pl(kcxt, arg1, arg2);\n#plcuda_end\n$$ LANGUAGE plcuda;\nCREATE FUNCTION  The code block enclosed by  #plcuda_begin  and  #plcuda_end  is main portion of PL/CUDA function. This kernel function can reference the  int  type argument as  arg1  and  arg2  which are  pg_int4_t  variables, and can return the result values written on the region pointed by retval variable which is a pointer of  pg_int4_t *  data type, as result of PL/CUDA function.  pgfn_int4pl()  is a runtime function of PG-Strom, declared at  cuda_mathlib.h , which adds two  pg_int4_t  variables.  Below is an example of execution of this PL/CUDA function. Its two integer arguments (100 and 200) were sent to GPU device, then it wrote back the calculated result (300) from the GPU device. As like normal SQL functions, PL/CUDA function can be used as a part of SQL expression.  postgres=# SELECT gpu_add(100,200);\n gpu_add\n---------\n     300\n(1 row)  The plcuda_function_source function allows showing the source of kernel function generated by the PL/CUDA function. The code block enclosed by the comment:  /* ---- code by pl/cuda function ---- */  is the portion injected from the declaration of PL/CUDA function  postgres=# SELECT pgstrom.plcuda_function_source('gpu_add'::regproc);\n                     plcuda_function_source\n----------------------------------------------------------------\n #include  cuda_device_runtime_api.h                           +\n                                                               +\n #define HOSTPTRLEN 8                                          +\n #define DEVICEPTRLEN 8                                        +\n #define BLCKSZ 8192                                           +\n #define MAXIMUM_ALIGNOF 8                                     +\n #define MAXIMUM_ALIGNOF_SHIFT 3                               +\n #define PGSTROM_KERNEL_DEBUG 1                                +\n #include  cuda_common.h                                       +\n                                                               +\n #define PG_BOOLOID 16                                         +\n #define PG_INT2OID 21                                         +\n #define PG_INT4OID 23                                         +\n #define PG_INT8OID 20                                         +\n #define PG_FLOAT2OID 237809                                   +\n #define PG_FLOAT4OID 700                                      +\n #define PG_FLOAT8OID 701                                      +\n #define PG_CASHOID 790                                        +\n #define PG_UUIDOID 2950                                       +\n #define PG_MACADDROID 829                                     +\n #define PG_INETOID 869                                        +\n #define PG_CIDROID 650                                        +\n #define PG_DATEOID 1082                                       +\n #define PG_TIMEOID 1083                                       +\n #define PG_TIMETZOID 1266                                     +\n #define PG_TIMESTAMPOID 1114                                  +\n #define PG_TIMESTAMPTZOID 1184                                +\n #define PG_INTERVALOID 1186                                   +\n #define PG_BPCHAROID 1042                                     +\n #define PG_VARCHAROID 1043                                    +\n #define PG_NUMERICOID 1700                                    +\n #define PG_BYTEAOID 17                                        +\n #define PG_TEXTOID 25                                         +\n #define PG_INT4RANGEOID 3904                                  +\n #define PG_INT8RANGEOID 3926                                  +\n #define PG_TSRANGEOID 3908                                    +\n #define PG_TSTZRANGEOID 3910                                  +\n #define PG_DATERANGEOID 3912                                  +\n                                                               +\n #include  cuda_mathlib.h                                      +\n typedef union {                                               +\n     pg_varlena_t     varlena_v;                               +\n     pg_bool_t        bool_v;                                  +\n     pg_int2_t        int2_v;                                  +\n     pg_int4_t        int4_v;                                  +\n     pg_int8_t        int8_v;                                  +\n     pg_float2_t      float2_v;                                +\n     pg_float4_t      float4_v;                                +\n     pg_float8_t      float8_v;                                +\n #ifdef CUDA_NUMERIC_H                                         +\n     pg_numeric_t     numeric_v;                               +\n #endif                                                        +\n #ifdef CUDA_MISC_H                                            +\n     pg_money_t       money_v;                                 +\n     pg_uuid_t        uuid_v;                                  +\n     pg_macaddr_t     macaddr_v;                               +\n     pg_inet_t        inet_v;                                  +\n     pg_cidr_t        cidr_t;                                  +\n #endif                                                        +\n #ifdef CUDA_TIMELIB_H                                         +\n     pg_date_t        date_v;                                  +\n     pg_time_t        time_v;                                  +\n     pg_timestamp_t   timestamp_v;                             +\n     pg_timestamptz_t timestamptz_v;                           +\n #endif                                                        +\n #ifdef CUDA_TEXTLIB_H                                         +\n     pg_bpchar_t      bpchar_v;                                +\n     pg_text_t        text_v;                                  +\n     pg_varchar_t     varchar_v;                               +\n #endif                                                        +\n #ifdef CUDA_RANGETYPE_H                                       +\n     pg_int4range_t   int4range_v;                             +\n     pg_int8range_t   int8range_v;                             +\n #ifdef CUDA_TIMELIB_H                                         +\n     pg_tsrange_t     tsrange_v;                               +\n     pg_tstzrange_t   tstzrange_v;                             +\n     pg_daterange_t   daterange_v;                             +\n #endif                                                        +\n #endif                                                        +\n   } pg_anytype_t;                                             +\n                                                               +\n                                                               +\n #include  cuda_plcuda.h                                       +\n STATIC_INLINE(void)                                           +\n __plcuda_main_kernel(kern_plcuda *kplcuda,                    +\n                    void *workbuf,                             +\n                    void *results,                             +\n                    kern_context *kcxt)                        +\n {                                                             +\n   pg_int4_t *retval __attribute__ ((unused));                 +\n   pg_int4_t arg1 __attribute__((unused));                     +\n   pg_int4_t arg2 __attribute__((unused));                     +\n   assert(sizeof(*retval)  = sizeof(kplcuda- __retval));       +\n   retval = (pg_int4_t *)kplcuda- __retval;                    +\n   arg1 = pg_int4_param(kcxt,0);                               +\n   arg2 = pg_int4_param(kcxt,1);                               +\n                                                               +\n   /* ---- code by pl/cuda function ---- */                    +\n   if (get_global_id() == 0)                                   +\n     *retval = pgfn_int4pl(kcxt, arg1, arg2);                  +\n   /* ---- code by pl/cuda function ---- */                    +\n }                                                             +\n                                                               +\n KERNEL_FUNCTION(void)                                         +\n plcuda_main_kernel_entrypoint(kern_plcuda *kplcuda,           +\n             void *workbuf,                                    +\n             void *results)                                    +\n {                                                             +\n   kern_parambuf *kparams = KERN_PLCUDA_PARAMBUF(kplcuda);     +\n   kern_context kcxt;                                          +\n                                                               +\n   assert(kplcuda- nargs  = kparams- nparams);                 +\n   INIT_KERNEL_CONTEXT( kcxt,plcuda_main_kernel,kparams);      +\n   __plcuda_main_kernel(kplcuda, workbuf, results,  kcxt);     +\n   kern_writeback_error_status( kplcuda- kerror_main,  kcxt.e);+\n }                                                             +\n                                                               +\n                                                               +\n #include  cuda_terminal.h                                     +\n\n(1 row)", 
            "title": "PL/CUDA Overview"
        }, 
        {
            "location": "/plcuda/#plcuda-structure", 
            "text": "Function declaration with PL/CUDA is consists of several code blocks split by directives that begin from  #plcuda_... . Only the code block start with  #plcuda_begin  is the minimum requirement, and you can add some other code block on demand.  #plcuda_decl\n  [...any declarations...]\n#plcuda_prep\n  [...function body of prep kernel...]\n#plcuda_begin\n  [...function body of main kernel...]\n#plcuda_post\n  [...function body of post kernel...]\n#plcuda_end  The declaration block, which begins with  #plcuda_decl , can have declaration of static functions we can call from other code blocks. Unlike other code blocks, the contents of the code block won't be injected into a particular kernel function, and you need to declare complete static functions. When a kernel function is executed with parallel threads larger than block size on a GPU device, the only way to synchronize between multiple execution units is synchronization of kernel function exit. For example, in case when algorithm is implemented under the assumption of correct initialization of the result buffer, you have to initialize the results buffer first, then you cannot execute the core of algorithm until completion of the initialization. If a part of threads would be executed towards uninitialized buffer, it easily leads incorrect calculation results or crash of execution environment, you always need to avoid.  Every content of user defined code blocks, the preparation block begins from  #plcuda_prep , the main block begins from  #plcuda_begin , and the post-process block begins from  #plcuda_post , shall be injected to the relevant kernel functions. Even though implementation of the preparation block and the post-process block are optional, we will ensure the order to launch the preparation kernel function, the main kernel function, then the post-process kernel function when these code blocks are defined. We intend to use these functions to initialize the results buffer or working buffer prior to execution of the main kernel function, or to summarize the final results next to execution of the main kernel.  An invocation of PL/CUDA function internall contains several SQL functions and launch GPU kernel functions. Prior to the GPU kernel functions, we have to determine the parameters when GPU kernel functions like number of threads, amount of results and working buffer. These parameters depend on the arguments, so PL/CUDA handler determines with other SQL functions that take identical argument signature.  Once we could determine the parameters to call GPU kernel function, PL/CUDA handler loads the arguments of PL/CUDA function onto the argument buffer on GPUs, by DMA copy, on demand.  Then, it launches the preparation kernel function (if any), the main kernel function, and the post-process kernel function (if any). Please note that we cannot synchronize GPU threads across the block size boundary, except for the timing of GPU kernel function begin/end. It means, if you expect a particular state exists on the working buffer or results buffer, buffer initialization by preparation kernel then reference of this data structure by the main kernel are required.  Finally, PL/CUDA handler writes back the contents of result buffer into the host side. In case when PL/CUDA function returns a fixed-length datum, the code block updates the area pointed by the  retval  variable which is initialized prior to execution of the user defined block. In case when PL/CUDA function returns a variable-length datum,  retval  points to the area of  pg_varlena_t , and its value has to be a reference to the results buffer ( void *results ), if it is not a  NULL . Please note that it shall not be written back if  retval  points out of the results buffer.  typedef struct {\n    varlena    *value;      /* reference to the results buffer */\n    cl_bool     isnull;     /* true, if NULL */\n} pg_varlena_t;   #plcuda_num_threads  directive allows specifying the number of threads to execute GPU kernel function. This directive can be used inside of the code block, and takes either a constant value or a SQL function. This SQL function has to be declared to take identical argument types and return bigint type.  In a similar fashion,  #plcuda_shmem_unitsz  allows to specify the amount of shared memory per thread, to be acquired on GPU kernel function launch. For example, when a GPU kernel function that consumes 8bytes per thread is launched with 384 threads per streaming-multiprocessor, 3KB of shared memory shall be available. Please note that the number of threads per streaming-multiprocessor shall be automatically calculated during the code optimization, a different concept from what we specify with  #plcuda_num_threads  directive.  #plcuda_kernel_maxthreads  directive allows switching optimization policy of the kernel function for the current code block, from maximization of execution efficiency to maximization of number of threads per streaming-multiprocessor (usually 1024). Increase of number of threads per streaming-multiprocessor will improve the performance of workloads which heavily use inter-threads synchronization using shared memory, like reduction operation. On the other hands, it reduces number of registers per thread, needs a right policy in the right place.  #plcuda_num_threads ( value | function name )\n#plcuda_shmem_unitsz  ( value | function name )\n#plcuda_kernel_maxthreads", 
            "title": "PL/CUDA Structure"
        }, 
        {
            "location": "/plcuda/#plcuda-references", 
            "text": "This section is a reference for PL/CUDA function's directives and related SQL functions.", 
            "title": "PL/CUDA References"
        }, 
        {
            "location": "/plcuda/#plcuda-directives", 
            "text": "", 
            "title": "PL/CUDA Directives"
        }, 
        {
            "location": "/plcuda/#plcuda_begin", 
            "text": "It marks beginning of the main kernel function code block. This directive is always required. Prior to execution of the code block on GPU, the arguments of PL/CUDA function are initialized for references by variable names like  arg1 ,  arg2 , ... These variables have same representation with what PG-Strom represents SQL data types on GPU, for example, an argument of the  real  data type (that is single precision floating point type) is shown as a  pg_float4_t  type variable as declared below.  typedef struct {\n    cl_float    value;\n    cl_bool     isnull;\n} pg_float4_t;  These variables are kept in private area of each threads, thus, update of these variables are not reflected on execution of the kernel function on the next step. If you want to share the state between kernel functions, value shall be kept in either the working buffer referenced by the  void *workbuf  pointer or the results buffer referenced by the  void *results  pointer.", 
            "title": "#plcuda_begin"
        }, 
        {
            "location": "/plcuda/#plcuda_end", 
            "text": "It marks end of the kernel function code block. By the way, if a directive to start code block was put inside of the different code block, the current code block is implicitly closed by the  #plcuda_end  directive.", 
            "title": "#plcuda_end"
        }, 
        {
            "location": "/plcuda/#plcuda_decl", 
            "text": "Use of this directive is optional. It marks beginning of the declaration code block that contains the raw code to be declared prior to the definition of any kernel functions. Unlike other code blocks, the contents of this code block shall not be applied as a kernel function, thus, you have to put complete definition of functions.", 
            "title": "#plcuda_decl"
        }, 
        {
            "location": "/plcuda/#plcuda_prep", 
            "text": "Use of this directive is optional. It marks beginning of the preparation code block that shall be executed on GPU prior to the main kernel function; begins from  #plcuda_begin  directive. We expect the preparation kernel initializes the results and working buffer. The main kernel shall not be kicked until completion of the preparation kernel. Arguments of PL/CUDA functions can be referenced like as the main kernel function doing.", 
            "title": "#plcuda_prep"
        }, 
        {
            "location": "/plcuda/#plcuda_post", 
            "text": "You can optionally use this directive. It marks beginning of the post-process code block that shall be executed on GPU next to the main kernel function; begins from  #plcuda_begin  directive. We expect the post-process kernel set up the final results to be returned to the CPU side. The post-process kernel shall not be kicked until completion of the preparation kernel. Arguments of PL/CUDA functions can be referenced like as the main kernel function doing.", 
            "title": "#plcuda_post"
        }, 
        {
            "location": "/plcuda/#plcuda_num_threads-valuefunction", 
            "text": "Use of this directive is optional. If not specified, the default is a constant value  1 .\nThis directive allows specifying the number of threads to execute the GPU kernel function if it is used in the code block of  #plcuda_prep ,  #plcuda_begin , or  #plcuda_post .\nIf a constant value is specified, PL/CUDA runtime kicks the specified number of GPU threads to run the GPU kernel function. If a SQL function name is specified, PL/CUDA runtime call the specified SQL function, and then result of the function shall be applied as the number of GPU threads to run the GPU kernel function. This SQL function takes identical arguments with PL/CUDA function, and returns bigint data type.", 
            "title": "#plcuda_num_threads (&lt;value&gt;|&lt;function&gt;)"
        }, 
        {
            "location": "/plcuda/#plcuda_shmem_unitsz-valuefunction", 
            "text": "Use of this directive is optional. If not specified, the default is a constant value  0 .  This directive allows specifying amount of the shared memory per thread to be dinamically allocated on GPU kernel execution, if it is used in the code block of  #plcuda_prep ,  #plcuda_begin , or  #plcuda_post .  If a constant value is specified, PL/CUDA runtime kicks GPU kernel function with the specified amount of the shared memory per thread.  If a SQL function name is specified, PL/CUDA runtime call the specified SQL function, and then result of the function shall be applied as the amount of the shared memory per thread to run the GPU kernel function. This SQL function takes identical arguments with PL/CUDA function, and returns bigint data type.  Please note that amount of the shared memory actually acquired on execution of GPU kernel function depends on the number of threads per streaming-multiprocessor, not only the amount of shared memory per thread specified by this directive. (Also note that the number of threads per streaming-multiprocessor is a different concept what we specified using #plcuda_num_threads.) For example, if amount of shared memory per thread is 8 bytes and the number of streaming-multiprocessor is 384, 3KB of shared memory shall be allocated per streaming-multiprocessor. At that time, if the number of total threads specified by #plcuda_num_threads is 32768, this GPU kernel shall be executed with 86 streaming-multiprocessor. However, it is the role of scheduler to determine the timing to put kernels into, so it does not mean that 86 x 3KB = 256KB of the shared memory is consumed at once.", 
            "title": "#plcuda_shmem_unitsz (&lt;value&gt;|&lt;function&gt;)"
        }, 
        {
            "location": "/plcuda/#plcuda_shmem_blocksz-valuefunction", 
            "text": "Use of this directive is optional. If not specified, the default is a constant value  0 .  This directive allows specifying amount of the shared memory per block to be dinamically allocated on GPU kernel execution, if it is used in the code block of  #plcuda_prep ,  #plcuda_begin , or  #plcuda_post .  If a constant value is specified, PL/CUDA runtime kicks GPU kernel function with the specified amount of the shared memory per block.  If a SQL function name is specified, PL/CUDA runtime call the specified SQL function, and then result of the function shall be applied as the amount of the shared memory per block to run the GPU kernel function. This SQL function takes identical arguments with PL/CUDA function, and returns bigint data type.", 
            "title": "#plcuda_shmem_blocksz (&lt;value&gt;|&lt;function&gt;)"
        }, 
        {
            "location": "/plcuda/#plcuda_kernel_blocksz-valuefunction", 
            "text": "Use of this directive is optional.  This directive allows specifying the number of threads per streaming-multiprocessor, if it is used in the code block of  #plcuda_prep ,  #plcuda_begin , or  #plcuda_post . It is usually a multiple number of the warp value of the device, and equal to or less than  1024 . In the default, an optimal value is applied according to the resource consumption of the GPU kernel function, therefore, this directive shall not be used unless you have no special reason; a larger block size is preferable due to characteristics of the algorithm for example.  If a constant value is specified, PL/CUDA runtime kicks GPU kernel function with the specified amount of the shared memory per block.\nIf a SQL function name is specified, PL/CUDA runtime calls the specified SQL function, and then result of the function shall be applied as the amount of the shared memory per block to run the GPU kernel function. This SQL function takes identical arguments with PL/CUDA function, and returns  bigint  data type.  Increase the number of threads per streaming-multiprocessor allows more threads to synchronize other threads using the shared memory, on the other hands, it leads decrease of the amount of registers a thread can use, thus, it may have performance degradation by private variables allocation on the (slow) global memory for example.", 
            "title": "#plcuda_kernel_blocksz (&lt;value&gt;|&lt;function&gt;)"
        }, 
        {
            "location": "/plcuda/#plcuda_include-library-namefunction-name", 
            "text": "This directive includes the static GPU library of PG-Strom, or a user defined code block, for use in PL/CUDA functions.\nPlease note that it is NOT a feature to include arbitrary header files on the server system.  If any of the static library name below is specified, PL/CUDA runtime injects the library on the head of the generated CUDA C program. Honestlly, it is a legacy manner, so we expect limited use cases.  If a SQL function name is specified, PL/CUDA runtime calls the specified SQL function, and then result of the function shall be injected to the CUDA C code where  #plcuda_include  directive exists. This SQL function takes identical arguments with PL/CUDA function, and returns  text  data type.     Library name  Description      \"cuda_dynpara.h\"  A collection of GPU runtime functions related to dynamic parallelism; that launch kernel functions on GPU. Include of this file also links the device runtime library of CUDA.    \"cuda_matrix.h\"  A collection of GPU runtime functions to process the array type of SQL as if vector/matrix.    \"cuda_timelib.h\"  A collection of GPU runtime functions to process the date and time data type of SQL.    \"cuda_textlib.h\"  A collection of GPU runtime functions to process the text data type and LIKE operator.    \"cuda_numeric.h\"  A a collection of GPU runtime functions to process the  numeric  data type of SQL.    \"cuda_mathlib.h\"  A collection of GPU runtime functions to process the arithmetic operators and mathematic functions of SQL.    \"cuda_money.h\"  A collection of GPU runtime functions to process the currency data type of SQL.    \"cuda_curand.h\"  A collection of GPU runtime functions to use  curand  library which supports random number generation, provided by CUDA.", 
            "title": "#plcuda_include (\"library name\"|&lt;function name&gt;)"
        }, 
        {
            "location": "/plcuda/#plcuda_results_bufsz-valuefunction", 
            "text": "Use of this directive is optional. If not specified, the default is a constant value  0 .  This directive allows specifying amount of the results buffer in bytes, to be acquired on execution of PL/CUDA function. If PL/CUDA function is declared to return variable length datum, allocation of the results buffer is needed.  If a constant value is specified, PL/CUDA language handler acquires the specified amount of GPU RAM as the results buffer, then launch the GPU kernel functions. If a SQL function name is specified, PL/CUDA language handler call the specified SQL function, then result of the function shall be applied as the amount of GPU RAM for the results buffer and launch the GPU kernel functions. This SQL function takes identical arguments with PL/CUDA function, and returns bigint data type.  GPU kernel functions can access the results buffer as the region pointed by the  void *results  argument. If  0  bytes were specified,  NULL  shall be set on the  void *results .", 
            "title": "#plcuda_results_bufsz (&lt;value&gt;|&lt;function&gt;)"
        }, 
        {
            "location": "/plcuda/#plcuda_working_bufsz-valuefunction", 
            "text": "Use of this directive is optional. If not specified, the default is a constant value  0 .  This directive allows specifying amount of the working buffer in bytes, to be acquired on execution of PL/CUDA function.  If a constant value is specified, PL/CUDA language handler acquires the specified amount of GPU RAM as the working buffer, and then launch the GPU kernel functions. If a SQL function name is specified, PL/CUDA language handler call the specified SQL function, then result of the function shall be applied as the amount of GPU RAM for the working buffer and launch the GPU kernel functions. This SQL function takes identical arguments with PL/CUDA function, and returns bigint data type.  GPU kernel functions can access the working buffer as the region pointed by the void  results argument. If 0 bytes were specified, NULL shall be set on the void  results.", 
            "title": "#plcuda_working_bufsz (&lt;value&gt;|&lt;function&gt;)"
        }, 
        {
            "location": "/plcuda/#plcuda_sanity_check-function", 
            "text": "It allows to specify the sanity check function that preliminary checks adequacy of the supplied arguments, prior to GPU kernel launch.\nNo sanity check function is configured on the default.\nUsually, launch of GPU kernel function is heavier task than call of another function on CPU, because it also involves initialization of GPU devices. If supplied arguments have unacceptable values from the specification of the PL/CUDA function, a few thousands or millions (or more in some cases) of GPU kernel threads shall be launched just to check the arguments and return an error status. If sanity check can be applied prior to the launch of GPU kernel function with enough small cost, it is a valuable idea to raise an error using sanity check function prior to the GPU kernel function. The sanity check function takes identical arguments with PL/CUDA function, and returns  bool  data type.", 
            "title": "#plcuda_sanity_check &lt;function&gt;"
        }, 
        {
            "location": "/plcuda/#plcuda_cpu_fallback-function", 
            "text": "It allows to specify the CPU fallback function that performs as like GPU kernel function. No CPU fallback function is configured on the default.  If GPU kernel function returns StromError_CpuReCheck error and the CPU fallback function is configured, the PL/CUDA language handler discards the results of processing on GPU side, then call the CPU fallback function. It is valuable to implement an alternative remedy, in case when GPU kernel function is not always executable for all possible input; for example, data size may be too large to load onto GPU RAM. Also note that we must have a trade-off of the performance because CPU fallback function shall be executed in CPU single thread.", 
            "title": "#plcuda_cpu_fallback &lt;function&gt;"
        }, 
        {
            "location": "/plcuda/#plcuda-related-functions", 
            "text": "Definition  Result  Description      plcuda_function_source(regproc)  text  It returns source code of the GPU kernel generated from the PL/CUDA function, towards the OID input of PL/CUDA function as argument.", 
            "title": "PL/CUDA Related Functions"
        }, 
        {
            "location": "/plcuda/#array-matrix-functions", 
            "text": "This section introduces the SQL functions that supports array-based matrix types provided by PG-Strom.   2-dimensional Array  Element of array begins from 1 for each dimension  No NULL value is contained  Length of the array is less than 1GB, due to the restriction of variable length datum in PostgreSQL  Array with  smallint ,  int ,  bigint ,  real  or  float  data type   If and when the array satisfies the above terms, we can determine the location of (i,j) element of the array by the index uniquely, and it enables GPU thread to fetch the datum to be processed very efficiently. Also, array-based matrix packs only the data to be used for calculation, unlike usual row-based format, so it has advantaged on memory consumption and data transfer.     Definition  Result  Description      array_matrix(variadic arg, ...)  array  It is an aggregate function that combines all the rows supplied. For example, when 3  float  arguments were supplied by 1000 rows, it returns an array-based matrix of 3 columns X 1000 rows, with  float  data type. This function is declared to take variable length arguments. The  arg  takes one or more scalar values of either  smallint ,  int ,  bigint ,  real  or  float . All the arg must have same data types.    matrix_unnest(array)  record  It is a set function that extracts the array-based matrix to set of records.  array  is an array of  smallint ,  int ,  bigint ,  real  or  float  data. It returns  record  type which consists of more than one columns according to the width of matrix. For example, in case of a matrix of 10 columns X 500 rows, each records contains 10 columns with element type of the matrix, then it generates 500 of the records.  It is similar to the standard  unnest  function, but generates  record  type, thus, it requires to specify the record type to be returned using  AS (colname1 type[, ...])  clause.    rbind(array, array)  array  array  is an array of  smallint ,  int ,  bigint ,  real  or  float  data. This function combines the supplied two matrices vertically. Both matrices needs to have same element data type. If width of matrices are not equivalent, it fills up the padding area by zero.    rbind(array)  array  array  is an array of  smallint ,  int ,  bigint ,  real  or  float  data. This function is similar to  rbind(array, array) , but performs as an aggregate function, then combines all the input matrices into one result vertically.    cbind(array, array)  array  array  is an array of  smallint ,  int ,  bigint ,  real  or  float  data. This function combines the supplied two matrices horizontally. Both matrices needs to have same element data type. If height of matrices are not equivalent, it fills up the padding area by zero.    cbind(array)  array  array  is an array of  smallint ,  int ,  bigint ,  real  or  float  data. This function is similar to cbind(array, array), but performs as an aggregate function, then combines all the input matrices into one result horizontally.    transpose(array)  array  array  is an array of  smallint ,  int ,  bigint ,  real  or  float  data. This function makes a transposed matrix that swaps height and width of the supplied matrix.    array_matrix_validation(anyarray)  bool  It validates whether the supplied array ( anyarray ) is adequate for the array-based matrix. It is intended to use for sanity check prior to invocation of PL/CUDA function, or check constraint on domain type definition.    array_matrix_height(array)  int  array  is an array of either  smallint ,  int ,  bigint ,  real  or  float  data. This function returns the height of the supplied matrix.    array_matrix_width(array)  int  array  is an array of either  smallint ,  int ,  bigint ,  real  or  float  data. This function returns the width of the supplied matrix.    array_vector_rawsize(regtype,int)  bigint  It returns required bytesize to store an array-based vector (1-dimensional array) with data type specified by the 1st argument and height by the 2nd argument. It is intended to use for  #plcuda_results_bufsz  and  #plcuda_working_bufsz .    array_matrix_rawsize(regtype,int,int)  bigint  It returns required bytesize to store an array-based matrix with data type specified by the 1st argument, height by the 2nd argument and width by the 3rd argument. It is intended to use for  #plcuda_results_bufsz  and  #plcuda_working_bufsz .    array_cube_rawsize(regtype,int,int,int)  bigint  It returns required bytesize to store an array-based cube (3-dimensional array) with data type specified by the 1st argument, height by the 2nd argument, width by the 3rd argument, and depth by the 4th argument. It is intended to use for  #plcuda_results_bufsz  and  #plcuda_working_bufsz .", 
            "title": "Array-Matrix Functions"
        }, 
        {
            "location": "/references/", 
            "text": "Supported Data Types\n\n\nPG-Strom support the following data types for use on GPU device.\n\n\nBuilt-in numeric types\n\n\n\n\n\n\n\n\nSQL data types\n\n\nInternal format\n\n\nLength\n\n\nMemo\n\n\n\n\n\n\n\n\n\n\nsmallint\n\n\ncl_short\n\n\n2 bytes\n\n\n\n\n\n\n\n\ninteger\n\n\ncl_int\n\n\n4 bytes\n\n\n\n\n\n\n\n\nbigint\n\n\ncl_long\n\n\n8 bytes\n\n\n\n\n\n\n\n\nreal\n\n\ncl_float\n\n\n4 bytes\n\n\n\n\n\n\n\n\nfloat\n\n\ncl_double\n\n\n8 bytes\n\n\n\n\n\n\n\n\nnumeric\n\n\ncl_ulong\n\n\nvariable length\n\n\nmapped to 64bit internal format\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nWhen GPU processes values in \nnumeric\n data type, it is converted to an internal 64bit format because of implementation reason.\nIt is transparently converted to/from the internal format, on the other hands, PG-Strom cannot convert \nnumaric\n datum with large number of digits, so tries to fallback operations by CPU. Therefore, it may lead slowdown if \nnumeric\n data with large number of digits are supplied to GPU device.\nTo avoid the problem, turn off the GUC option \npg_strom.enable_numeric_type\n not to run operational expression including \nnumeric\n data types on GPU devices.\n\n\n\n\nBuilt-in date and time types\n\n\n\n\n\n\n\n\nSQL data types\n\n\nInternal format\n\n\nLength\n\n\nMemo\n\n\n\n\n\n\n\n\n\n\ndate\n\n\nDateADT\n\n\n4 bytes\n\n\n\n\n\n\n\n\ntime\n\n\nTimeADT\n\n\n8 bytes\n\n\n\n\n\n\n\n\ntimetz\n\n\nTimeTzADT\n\n\n12 bytes\n\n\n\n\n\n\n\n\ntimestamp\n\n\nTimestamp\n\n\n8 bytes\n\n\n\n\n\n\n\n\ntimestamptz\n\n\nTimestampTz\n\n\n8 bytes\n\n\n\n\n\n\n\n\ninterval\n\n\nInterval\n\n\n16 bytes\n\n\n\n\n\n\n\n\n\n\nBuilt-in variable length types\n\n\n\n\n\n\n\n\nSQL data types\n\n\nInternal format\n\n\nLength\n\n\nMemo\n\n\n\n\n\n\n\n\n\n\nbpchar\n\n\nvarlena *\n\n\nvariable length\n\n\n\n\n\n\n\n\nvarchar\n\n\nvarlena *\n\n\nvariable length\n\n\n\n\n\n\n\n\nbytea\n\n\nvarlena *\n\n\nvariable length\n\n\n\n\n\n\n\n\ntext\n\n\nvarlena *\n\n\nvariable length\n\n\n\n\n\n\n\n\n\n\nBuilt-in miscellaneous types\n\n\n\n\n\n\n\n\nSQL data types\n\n\nInternal format\n\n\nLength\n\n\nMemo\n\n\n\n\n\n\n\n\n\n\nboolean\n\n\ncl_bool\n\n\n1 byte\n\n\n\n\n\n\n\n\nmoney\n\n\ncl_long\n\n\n8 bytes\n\n\n\n\n\n\n\n\nuuid\n\n\npg_uuid\n\n\n16 bytes\n\n\n\n\n\n\n\n\nmacaddr\n\n\nmacaddr\n\n\n6 bytes\n\n\n\n\n\n\n\n\ninet\n\n\ninet_struct\n\n\n7 bytes or 19 bytes\n\n\n\n\n\n\n\n\ncidr\n\n\ninet_struct\n\n\n7 bytes or 19 bytes\n\n\n\n\n\n\n\n\n\n\nBuilt-in range data types\n\n\n\n\n\n\n\n\nSQL data types\n\n\nInternal format\n\n\nLength\n\n\nMemo\n\n\n\n\n\n\n\n\n\n\nint4range\n\n\n__int4range\n\n\n14 bytes\n\n\n\n\n\n\n\n\nint8range\n\n\n__int8range\n\n\n22 bytes\n\n\n\n\n\n\n\n\ntsrange\n\n\n__tsrange\n\n\n22 bytes\n\n\n\n\n\n\n\n\ntstzrange\n\n\n__tstzrange\n\n\n22 bytes\n\n\n\n\n\n\n\n\ndaterange\n\n\n__daterange\n\n\n14 bytes\n\n\n\n\n\n\n\n\n\n\nExtra Types\n\n\n\n\n\n\n\n\nSQL data types\n\n\nInternal format\n\n\nLength\n\n\nMemo\n\n\n\n\n\n\n\n\n\n\nfloat2\n\n\nhalf_t\n\n\n2 bytes\n\n\nHalf precision data type\n\n\n\n\n\n\nreggstore\n\n\ncl_uint\n\n\n4 bytes\n\n\nSpecific version of regclass for gstore_fdw. Special handling at PL/CUDA function invocation.\n\n\n\n\n\n\n\n\nDevice functions and operators\n\n\nType cast\n\n\n\n\n\n\n\n\ndestination type\n\n\nsource type\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nbool\n\n\nint4\n\n\n\n\n\n\n\n\nint2\n\n\nint4,int8,float2,float4,float8,numeric\n\n\n\n\n\n\n\n\nint4\n\n\nint2,int8,float2,float4,float8,numeric\n\n\n\n\n\n\n\n\nint8\n\n\nint2,int4,float2,float4,float8,numeric\n\n\n\n\n\n\n\n\nfloat2\n\n\nint2,int4,int8,float4,float8,numeric\n\n\n\n\n\n\n\n\nfloat4\n\n\nint2,int4,int8,float2,float8,numeric\n\n\n\n\n\n\n\n\nfloat8\n\n\nint2,int4,int8,float2,float4,numeric\n\n\n\n\n\n\n\n\nnumeric\n\n\nint2,int4,int8,float2,float4,float8\n\n\n\n\n\n\n\n\nmoney\n\n\nint4,int8,numeric\n\n\n\n\n\n\n\n\ninet\n\n\ncidr\n\n\n\n\n\n\n\n\ndate\n\n\ntimestamp,timestamptz\n\n\n\n\n\n\n\n\ntime\n\n\ntimetz,timestamp,timestamptz\n\n\n\n\n\n\n\n\ntimetz\n\n\ntime,timestamptz\n\n\n\n\n\n\n\n\ntimestamp\n\n\ndate,timestamptz\n\n\n\n\n\n\n\n\ntimestamptz\n\n\ndate,timestamp\n\n\n\n\n\n\n\n\n\n\nFunctions and operators\n\n\nNumeric functions/operators\n\n\n\n\n\n\n\n\nfunction/operator\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nTYPE = TYPE\n\n\nComparison of two values\nTYPE\n is any of \nint2,int4,int8\nCOMP\n is any of \n=,\n,\n,\n=,\n=,\n\n\n\n\n\n\nTYPE = TYPE\n\n\nComparison of two values\nTYPE\n is any of \nfloat2,float4,float8\nCOMP\n is any of \n=,\n,\n,\n=,\n=,\n\n\n\n\n\n\nnumeric COMP numeric\n\n\nComparison of two values\nCOMP\n is any of \n=,\n,\n,\n=,\n=,\n\n\n\n\n\n\nTYPE + TYPE\n\n\nArithemetic addition\nTYPE\n is any of \nint2,int4,int8,float2,float4,float8,numeric\n\n\n\n\n\n\nTYPE - TYPE\n\n\nArithemetic substract\nTYPE\n is any of \nint2,int4,int8,float2,float4,float8,numeric\n\n\n\n\n\n\nTYPE * TYPE\n\n\nArithemetic multiplication\nTYPE\n is any of \nint2,int4,int8,float2,float4,float8,numeric\n\n\n\n\n\n\nTYPE / TYPE\n\n\nArithemetic division\nTYPE\n is any of \nint2,int4,int8,float2,float4,float8,numeric\n\n\n\n\n\n\nTYPE % TYPE\n\n\nReminer operator\nTYPE\n is any of \nint2,int4,int8\n\n\n\n\n\n\nTYPE \n TYPE\n\n\nBitwise AND\nTYPE\n is any of \nint2,int4,int8\n\n\n\n\n\n\nTYPE \n TYPE\n\n\nBitwise OR\nTYPE\n is any of \nint2,int4,int8\n\n\n\n\n\n\nTYPE # TYPE\n\n\nBitwise XOR\nTYPE\n is any of \nint2,int4,int8\n\n\n\n\n\n\n~ TYPE\n\n\nBitwise NOT\nTYPE\n is any if \nint2,int4,int8\n\n\n\n\n\n\nTYPE \n int4\n\n\nRight shift\nTYPE\n is any of \nint2,int4,int8\n\n\n\n\n\n\nTYPE \n int4\n\n\nLeft shift\nTYPE\n is any of \nint2,int4,int8\n\n\n\n\n\n\n+ TYPE\n\n\nUnary plus\nTYPE\n is any of \nint2,int4,int8,float2,float4,float8,numeric\n\n\n\n\n\n\n- TYPE\n\n\nUnary minus\nTYPE\n is any of \nint2,int4,int8,float2,float4,float8,numeric\n\n\n\n\n\n\n@TYPE\n\n\nAbsolute value\nTYPE\n is any of \nint2,int4,int8,float2,float4,float8,numeric\n\n\n\n\n\n\n\n\nMathematical functions\n\n\n\n\n\n\n\n\nfunctions/operators\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncbrt(float8)\n\n\ncube root\n\n\n\n\n\n\ndcbrt(float8)\n\n\ncube root\n\n\n\n\n\n\nceil(float8)\n\n\nnearest integer greater than or equal to argument\n\n\n\n\n\n\nceiling(float8)\n\n\nnearest integer greater than or equal to argument\n\n\n\n\n\n\nexp(float8)\n\n\nexponential\n\n\n\n\n\n\ndexp(float8)\n\n\nexponential\n\n\n\n\n\n\nfloor(float8)\n\n\nnearest integer less than or equal to argument\n\n\n\n\n\n\nln(float8)\n\n\nnatural logarithm\n\n\n\n\n\n\ndlog1(float8)\n\n\nnatural logarithm\n\n\n\n\n\n\nlog(float8)\n\n\nbase 10 logarithm\n\n\n\n\n\n\ndlog10(float8)\n\n\nbase 10 logarithm\n\n\n\n\n\n\npi()\n\n\ncircumference ratio\n\n\n\n\n\n\npower(float8,float8)\n\n\npower\n\n\n\n\n\n\npow(float8,float8)\n\n\npower\n\n\n\n\n\n\ndpow(float8,float8)\n\n\npower\n\n\n\n\n\n\nround(float8)\n\n\nround to the nearest integer\n\n\n\n\n\n\ndround(float8)\n\n\nround to the nearest integer\n\n\n\n\n\n\nsign(float8)\n\n\nsign of the argument\n\n\n\n\n\n\nsqrt(float8)\n\n\nsquare root\n\n\n\n\n\n\ndsqrt(float8)\n\n\nsquare root\n\n\n\n\n\n\ntrunc(float8)\n\n\ntruncate toward zero\n\n\n\n\n\n\ndtrunc(float8)\n\n\ntruncate toward zero\n\n\n\n\n\n\n\n\nTrigonometric functions\n\n\n\n\n\n\n\n\nfunctions/operators\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ndegrees(float8)\n\n\nradians to degrees\n\n\n\n\n\n\nradians(float8)\n\n\ndegrees to radians\n\n\n\n\n\n\nacos(float8)\n\n\ninverse cosine\n\n\n\n\n\n\nasin(float8)\n\n\ninverse sine\n\n\n\n\n\n\natan(float8)\n\n\ninverse tangent\n\n\n\n\n\n\natan2(float8,float8)\n\n\ninverse tangent of \narg1 / arg2\n\n\n\n\n\n\ncos(float8)\n\n\ncosine\n\n\n\n\n\n\ncot(float8)\n\n\ncotangent\n\n\n\n\n\n\nsin(float8)\n\n\nsine\n\n\n\n\n\n\ntan(float8)\n\n\ntangent\n\n\n\n\n\n\n\n\nDate and time operators\n\n\n\n\n\n\n\n\nfunctions/operators\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ndate COMP date\n\n\nCOMP\n is any of \n=,\n,\n,\n=,\n=,\n\n\n\n\n\n\ndate COMP timestamp\n\n\nCOMP\n is any of \n=,\n,\n,\n=,\n=,\n\n\n\n\n\n\ndate COMP timestamptz\n\n\nCOMP\n is any of \n=,\n,\n,\n=,\n=,\n\n\n\n\n\n\ntime COMP time\n\n\nCOMP\n is any of \n=,\n,\n,\n=,\n=,\n\n\n\n\n\n\ntimetz COMP timetz\n\n\nCOMP\n is any of \n=,\n,\n,\n=,\n=,\n\n\n\n\n\n\ntimestamp COMP timestamp\n\n\nCOMP\n is any of \n=,\n,\n,\n=,\n=,\n\n\n\n\n\n\ntimestamp COMP date\n\n\nCOMP\n is any of \n=,\n,\n,\n=,\n=,\n\n\n\n\n\n\ntimestamptz COMP timestamptz\n\n\nCOMP\n is any of \n=,\n,\n,\n=,\n=,\n\n\n\n\n\n\ntimestamptz COMP date\n\n\nCOMP\n is any of \n=,\n,\n,\n=,\n=,\n\n\n\n\n\n\ntimestamp COMP timestamptz\n\n\nCOMP\n is any of \n=,\n,\n,\n=,\n=,\n\n\n\n\n\n\ntimestamptz COMP timestamp\n\n\nCOMP\n is any of \n=,\n,\n,\n=,\n=,\n\n\n\n\n\n\ninterval COMP interval\n\n\nCOMP\n is any of \n=,\n,\n,\n=,\n=,\n\n\n\n\n\n\ndate OP int4\n\n\nOP\n is either of \n+,-\n\n\n\n\n\n\nint4 + date\n\n\n\n\n\n\n\n\ndate - date\n\n\n\n\n\n\n\n\ndate + time\n\n\n\n\n\n\n\n\ndate + timetz\n\n\n\n\n\n\n\n\ntime + date\n\n\n\n\n\n\n\n\ntime - time\n\n\n\n\n\n\n\n\ntimestamp - timestamp\n\n\n\n\n\n\n\n\ntimetz OP interval\n\n\nOP\n is either of \n+,-\n\n\n\n\n\n\ntimestamptz OP interval\n\n\nOP\n is either of \n+,-\n\n\n\n\n\n\noverlaps(TYPE,TYPE,TYPE,TYPE)\n\n\nTYPE\n is any of \ntime,timetz,timestamp,timestamptz\n\n\n\n\n\n\nextract(text FROM TYPE)\n\n\nTYPE\n is any of \ntime,timetz,timestamp,timestamptz,interval\n\n\n\n\n\n\nnow()\n\n\n\n\n\n\n\n\n- interval\n\n\nunary minus operator\n\n\n\n\n\n\ninterval OP interval\n\n\nOP\n is either of \n+,-\n\n\n\n\n\n\n\n\nText functions/operators\n\n\n\n\n\n\n\n\nfunctions/operators\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\n{text,bpchar} COMP {text,bpchar}\n\n\nCOMP\n is either of \n=,\n\n\n\n\n\n\n{text,bpchar} COMP {text,bpchar}\n\n\nCOMP\n is either of \n,\n=,\n=,\nOnly available on no-locale or UTF-8\n\n\n\n\n\n\nlength(TYPE)\n\n\nlength of the string\nTYPE\n is either of \ntext,bpchar\n\n\n\n\n\n\nTYPE LIKE text\n\n\nTYPE\n is either of \ntext,bpchar\n\n\n\n\n\n\nTYPE NOT LIKE text\n\n\nTYPE\n is either of \ntext,bpchar\n\n\n\n\n\n\nTYPE ILIKE text\n\n\nTYPE\n is either of \ntext,bpchar\nOnly available on no-locale or UTF-8\n\n\n\n\n\n\nTYPE NOT ILIKE text\n\n\nTYPE\n is either of \ntext,bpchar\nOnly available on no-locale or UTF-8\n\n\n\n\n\n\n\n\nNetwork functions/operators\n\n\n\n\n\n\n\n\nfunctions/operators\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nmacaddr COMP macaddr\n\n\nCOMP\n is any of \n=,\n,\n,\n=,\n=,\n\n\n\n\n\n\nmacaddr \n macaddr\n\n\nBitwise AND operator\n\n\n\n\n\n\nmacaddr \n macaddr\n\n\nBitwise OR operator\n\n\n\n\n\n\n~ macaddr\n\n\nBitwise NOT operator\n\n\n\n\n\n\ntrunc(macaddr)\n\n\nSet last 3 bytes to zero\n\n\n\n\n\n\ninet COMP inet\n\n\nCOMP\n is any of \n=,\n,\n,\n=,\n=,\n\n\n\n\n\n\ninet INCL inet\n\n\nINCL\n is any of \n,\n=,\n,\n=,\n\n\n\n\n\n\n~ inet\n\n\n\n\n\n\n\n\ninet \n inet\n\n\n\n\n\n\n\n\ninet \n inet\n\n\n\n\n\n\n\n\ninet + int8\n\n\n\n\n\n\n\n\ninet - int8\n\n\n\n\n\n\n\n\ninet - inet\n\n\n\n\n\n\n\n\nbroadcast(inet)\n\n\n\n\n\n\n\n\nfamily(inet)\n\n\n\n\n\n\n\n\nhostmask(inet)\n\n\n\n\n\n\n\n\nmasklen(inet)\n\n\n\n\n\n\n\n\nnetmask(inet)\n\n\n\n\n\n\n\n\nnetwork(inet)\n\n\n\n\n\n\n\n\nset_masklen(cidr,int)\n\n\n\n\n\n\n\n\nset_masklen(inet,int)\n\n\n\n\n\n\n\n\ninet_same_family(inet, inet)\n\n\n\n\n\n\n\n\ninet_merge(inet,inet)\n\n\n\n\n\n\n\n\n\n\nCurrency operators\n\n\n\n\n\n\n\n\nfunctions/operators\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nmoney COMP money\n\n\nCOMP\n is any of \n=,\n,\n,\n=,\n=,\n\n\n\n\n\n\nmoney OP money\n\n\nOP\n is any of \n+,-,/\n\n\n\n\n\n\nmoney * TYPE\n\n\nTYPE\n is any of \nint2,int4,float2,float4,float8\n\n\n\n\n\n\nTYPE * money\n\n\nTYPE\n is any of \nint2,int4,float2,float4,float8\n\n\n\n\n\n\nmoney / TYPE\n\n\nTYPE\n is any of \nint2,int4,float2,float4,float8\n\n\n\n\n\n\n\n\nUUID operators\n\n\n\n\n\n\n\n\nfunctions/operators\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nuuid COMP uuid\n\n\nCOMP\n is any of \n=,\n,\n,\n=,\n=,\n\n\n\n\n\n\n\n\nRange type functions/operators\n\n\n\n\n\n\n\n\nfunctions/operators\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nRANGE = RANGE\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nRANGE \n RANGE\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nRANGE \n RANGE\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nRANGE \n= RANGE\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nRANGE \n RANGE\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nRANGE \n= RANGE\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nRANGE @ RANGE\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nRANGE @ TYPE\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\nTYPE\n is element type of \nRANGE\n.\n\n\n\n\n\n\nRANGE \n@RANGE\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nTYPE \n@RANGE\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\nTYPE\n is element type of \nRANGE\n.\n\n\n\n\n\n\nRANGE \n RANGE\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nRANGE \n RANGE\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nRANGE \n RANGE\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nRANGE \n RANGE\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nRANGE \n RANGE\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nRANGE -\n- RANGE\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nRANGE + RANGE\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nRANGE * RANGE\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nRANGE - RANGE\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nlower(RANGE)\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nupper(RANGE)\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nisempty(RANGE)\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nlower_inc(RANGE)\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nupper_inc(RANGE)\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nlower_inf(RANGE)\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nupper_inf(RANGE)\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\nrange_merge(RANGE,RANGE)\n\n\nRANGE\n is any of \nint4range,int8range,tsrange,tstzrange,daterange\n\n\n\n\n\n\n\n\nMiscellaneous device functions\n\n\n\n\n\n\n\n\nfunctions/operators\n\n\nresult\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nas_int8(float8)\n\n\nint8\n\n\nRe-interpret double-precision floating point bit-pattern as 64bit integer value\n\n\n\n\n\n\nas_int4(float4)\n\n\nint4\n\n\nRe-interpret single-precision floating point bit-pattern as 32bit integer value\n\n\n\n\n\n\nas_int2(float2)\n\n\nint2\n\n\nRe-interpret half-precision floating point bit-pattern as 16bit integer value\n\n\n\n\n\n\nas_float8(int8)\n\n\nfloat8\n\n\nRe-interpret 64bit integer bit-pattern as double-precision floating point value\n\n\n\n\n\n\nas_float4(int4)\n\n\nfloat4\n\n\nRe-interpret 32bit integer bit-pattern as single-precision floating point value\n\n\n\n\n\n\nas_float2(int2)\n\n\nfloat2\n\n\nRe-interpret 16bit integer bit-pattern as half-precision floating point value\n\n\n\n\n\n\n\n\nPG-Strom Specific SQL functions\n\n\nThis section introduces SQL functions which are additionally provided by PG-Strom.\n\n\nDevice Information\n\n\n\n\n\n\n\n\nFunction\n\n\nResult\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngpu_device_name(int = 0)\n\n\ntext\n\n\nIt tells name of the specified GPU device.\n\n\n\n\n\n\ngpu_global_memsize(int = 0)\n\n\nbigint\n\n\nIt tells amount of the specified GPU device in bytes.\n\n\n\n\n\n\ngpu_max_blocksize(int = 0)\n\n\nint\n\n\nIt tells maximum block-size on the specified GPU device. 1024, in the currently supported GPU models.\n\n\n\n\n\n\ngpu_warp_size(int = 0)\n\n\nint\n\n\nIt tells warp-size on the specified GPU device. 32, in the currently supported GPU models.\n\n\n\n\n\n\ngpu_max_shared_memory_perblock(int = 0)\n\n\nint\n\n\nIt tells maximum shared memory size per block on the specified GPU device.\n\n\n\n\n\n\ngpu_num_registers_perblock(int = 0)\n\n\nint\n\n\nIt tells total number of registers per block on the specified GPU device.\n\n\n\n\n\n\ngpu_num_multiptocessors(int = 0)\n\n\nint\n\n\nIt tells number of SM(Streaming Multiprocessor) units on the specified GPU device.\n\n\n\n\n\n\ngpu_num_cuda_cores(int = 0)\n\n\nint\n\n\nIt tells number of CUDA cores on the specified GPU device.\n\n\n\n\n\n\ngpu_cc_major(int = 0)\n\n\nint\n\n\nIt tells major CC(Compute Capability) version of the specified GPU device.\n\n\n\n\n\n\ngpu_cc_minor(int = 0)\n\n\nint\n\n\nIt tells minor CC(Compute Capability) version of the specified GPU device.\n\n\n\n\n\n\ngpu_pci_id(int = 0)\n\n\nint\n\n\nIt tells PCI bus-id of the specified GPU device.\n\n\n\n\n\n\n\n\nArray-based matrix support\n\n\nYou can use array data type of PostgreSQL to deliver matrix-data for PL/CUDA functions.\nA two-dimensional array of fixed-length boolean/numeric values without NULL has flat data structure (expect for the array header). It allows to identify the address of elements by indexes of the matrix uniquely.\nPG-Strom provides several SQL functions to handle array-based matrix.\n\n\nType cast\n\n\n\n\n\n\n\n\ndestination type\n\n\nsource type\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nint[]\n\n\nbit\n\n\nconvert bit-string to 32bit integer array. Unaligned bits are filled up by 0.\n\n\n\n\n\n\nbit\n\n\nint[]\n\n\nconvert 32bit integer to bit-string\n\n\n\n\n\n\n\n\nArray-based matrix functions\n\n\n\n\n\n\n\n\nfunctions/operators\n\n\nresult\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\narray_matrix_validation(anyarray)\n\n\nbool\n\n\nIt checks whether the supplied array satisfies the requirement of array-based matrix.\n\n\n\n\n\n\narray_matrix_height(anyarray)\n\n\nint\n\n\nIt tells height of the array-based matrix.\n\n\n\n\n\n\narray_matrix_width(anyarray)\n\n\nint\n\n\nIt tells width of the array-based matrix.\n\n\n\n\n\n\narray_vector_rawsize(regtype,int)\n\n\nbigint\n\n\nIt tells expected size if N-items vector is created with the specified type.\n\n\n\n\n\n\narray_matrix_rawsize(regtype,int,int)\n\n\nbigint\n\n\nIt tells expected size if HxW matrix is created with the specified type.\n\n\n\n\n\n\narray_cube_rawsize(regtype,int,int,int)\n\n\nbigint\n\n\nIt tells expected size if HxWxD cube is created with the specified type.\n\n\n\n\n\n\ntype_len(regtype)\n\n\nbigint\n\n\nIt tells unit length of the specified type.\n\n\n\n\n\n\ncomposite_type_rawsize(LEN,...)\n\n\nbigint\n\n\nIt tells expected size of the composite type if constructed with the specified data-length order. We expect to use the function with \ntype_len()\nLEN\n is either of \nint,bigint\n\n\n\n\n\n\nmatrix_unnest(anyarray)\n\n\nrecord\n\n\nIt is a function to return set, to fetch rows from top of the supplied array-based matrix. PostgreSQL has no type information of the record, so needs to give type information using \nROW()\n clause.\n\n\n\n\n\n\nrbind(MATRIX,MATRIX)\n\n\nMATRIX\n\n\nIt combines two array-based matrix vertically.\nMATRIX\n is array type of any of \nbool,int2,int4,int8,float4,float8\n\n\n\n\n\n\nrbind(TYPE,MATRIX)\n\n\nMATRIX\n\n\nIt adds a scalar value on head of the array-based matrix. If multiple columns exist, the scalar value shall be set on all the column of the head row.\nMATRIX\n is array type of any of \nbool,int2,int4,int8,float4,float8\n.\nTYPE\n is element of \nMATRIX\n\n\n\n\n\n\nrbind(MATRIX,TYPE)\n\n\nMATRIX\n\n\nIt adds a scalar value on bottom of the array-based matrix. If multiple columns exist, the scalar value shall be set on all the column of the bottom row.\nMATRIX\n is array type of any of \nbool,int2,int4,int8,float4,float8\nTYPE\n is element type of \nMATRIX\n\n\n\n\n\n\ncbind(MATRIX,MATRIX)\n\n\nMATRIX\n\n\nIt combines two array-based matrix horizontally.\nMATRIX\n is array type of any of \nbool,int2,int4,int8,float4,float8\n\n\n\n\n\n\ncbind(TYPE,MATRIX)\n\n\nMATRIX\n\n\nIt adds a scalar value on left of the array-based matrix. If multiple rows exist, the scalar value shall be set on all the rows of the left column.\nMATRIX\n is array type of any of \nbool,int2,int4,int8,float4,float8\nTYPE\n is element type of \nMATRIX\n\n\n\n\n\n\ncbind(MATRIX,TYPE)\n\n\nMATRIX\n\n\nIt adds a scalar value on right of the array-based matrix. If multiple rows exist, the scalar value shall be set on all the rows of the right column.\nMATRIX\n is array type of any of \nbool,int2,int4,int8,float4,float8\n.\nTYPE\n is element type of \nMATRIX\n\n\n\n\n\n\ntranspose(MATRIX)\n\n\nMATRIX\n\n\nIt transposes the array-based matrix.\nMATRIX\n is array type of any of \nbool,int2,int4,int8,float4,float8\n\n\n\n\n\n\n\n\nAggregate functions\n\n\n\n\n\n\n\n\nfunctions/operators\n\n\nresult\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\narray_matrix(TYPE,...)\n\n\nTYPE[]\n\n\nAn aggregate function with varidic arguments. It produces M-cols x N-rows array-based matrix if N-rows were supplied with M-columns.\nTYPE\n is any of \nbool,int2,int4,int8,float4,float8\n\n\n\n\n\n\narray_matrix(bit)\n\n\nbit[]\n\n\nAn aggregate function to produce \nint4[]\n array-based matrix. It considers bit-string as a set of 32bits integer values.\n\n\n\n\n\n\nrbind(MATRIX)\n\n\nMATRIX\n\n\nAn aggregate function to combine the supplied array-based matrix vertically.\nMATRIX\n is array type of any of \nbool,int2,int4,int8,float4,float8\n\n\n\n\n\n\ncbind(MATRIX)\n\n\nMATRIX\n\n\nAn aggregate function to combine the supplied array-based matrix horizontally.\nMATRIX\n is array type of any of \nbool,int2,int4,int8,float4,float8\n\n\n\n\n\n\n\n\nMiscellaneous functions\n\n\n\n\n\n\n\n\nFunction\n\n\nResult\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npgstrom_ccache_enabled(regclass)\n\n\ntext\n\n\nEnables in-memory columnar cache on the specified table.\n\n\n\n\n\n\npgstrom_ccache_disabled(regclass)\n\n\ntext\n\n\nDisables in-memory columnar cache on the specified table.\n\n\n\n\n\n\npgstrom_ccache_prewarm(regclass)\n\n\nint\n\n\nBuild in-memory columnar cache on the specified table synchronously, until cache usage is less than the threshold.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunction\n\n\nResult\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngstore_fdw_format(reggstore)\n\n\ntext\n\n\nIt tells internal format of the specified gstore_fdw foreign table.\n\n\n\n\n\n\ngstore_fdw_nitems(reggstore)\n\n\nbigint\n\n\nIt tells number of rows of the specified gstore_fdw foreign table.\n\n\n\n\n\n\ngstore_fdw_nattrs(reggstore)\n\n\nbigint\n\n\nIt tells number of columns of the specified gstore_fdw foreign table.\n\n\n\n\n\n\ngstore_fdw_rawsize(reggstore)\n\n\nbigint\n\n\nIt tells raw size of the specified gstore_fdw foreign table in bytes.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunction\n\n\nResult\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngstore_export_ipchandle(reggstore)\n\n\nbytea\n\n\nIt tells IPC-handle of the GPU device memory region of the specified gstore_fdw foreign table.\n\n\n\n\n\n\nlo_import_gpu(int, bytea, bigint, bigint, oid=0)\n\n\noid\n\n\nIt maps GPU device memory region acquired by external application, then import its contents into a largeobject.\n\n\n\n\n\n\nlo_export_gpu(oid, int, bytea, bigint, bigint)\n\n\nbigint\n\n\nIt maps GPU device memory region acquired by external application, then export contents of the specified largeobject into the region.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunction\n\n\nResult\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nplcuda_kernel_max_blocksz\n\n\nint\n\n\nIt tells maximum block size of the GPU kernel of PL/CUDA function when it is called as its helper.\n\n\n\n\n\n\nplcuda_kernel_static_shmsz()\n\n\nint\n\n\nIt tells size of the statically acquired shared memory per block by the GPU kernel of PL/CUDA function when it is called as its helper.\n\n\n\n\n\n\nplcuda_kernel_dynamic_shmsz()\n\n\nint\n\n\nIt tells size of the dynamic shared memory per block, which GPU kernel of the PL/CUDA function can allocate, when it is called as its helper.\n\n\n\n\n\n\nplcuda_kernel_const_memsz()\n\n\nint\n\n\nIt tells size of the constant memory acquired by the GPU kernel of PL/CUDA function, when it is called as its helper.\n\n\n\n\n\n\nplcuda_kernel_local_memsz()\n\n\nint\n\n\nIt tells size of the local memory per thread acquired by the GPU kernel of PL/CUDA function, when it is called as its helper.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunction\n\n\nResult\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npgstrom.license_validation()\n\n\ntext\n\n\nIt validates commercial subscription.\n\n\n\n\n\n\npgstrom.license_query()\n\n\ntext\n\n\nIt shows the active commercial subscription.\n\n\n\n\n\n\n\n\nSystem View\n\n\nPG-Strom provides several system view to export its internal state for users or applications.\nThe future version may add extra fields here. So, it is not recommended to reference these information schemas using \nSELECT * FROM ...\n.\n\n\npgstrom.device_info\n\n\npgstrom.device_into\n system view exports device attributes of the GPUs recognized by PG-Strom.\nGPU has different specification for each model, like number of cores, capacity of global memory, maximum number of threads and etc, user's software should be optimized according to the information if you try raw GPU programming with PL/CUDA functions.\n\n\n\n\n\n\n\n\nName\n\n\nData Type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndevice_nr\n\n\nint\n\n\nGPU device number\n\n\n\n\n\n\naindex\n\n\nint\n\n\nAttribute index\n\n\n\n\n\n\nattribute\n\n\ntext\n\n\nAttribute name\n\n\n\n\n\n\nvalue\n\n\ntext\n\n\nValue of the attribute\n\n\n\n\n\n\n\n\npgstrom.device_preserved_meminfo\n\n\npgstrom.device_preserved_meminfo\n system view exports information of the preserved device memory; which can be shared multiple PostgreSQL backend.\nRight now, only gstore_fdw uses this feature.\n\n\n\n\n\n\n\n\nName\n\n\nData Type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndevice_nr\n\n\nint\n\n\nGPU device number\n\n\n\n\n\n\nhandle\n\n\nbytea\n\n\nIPC handle of the preserved device memory\n\n\n\n\n\n\nowner\n\n\nregrole\n\n\nOwner of the preserved device memory\n\n\n\n\n\n\nlength\n\n\nbigint\n\n\nLength of the preserved device memory in bytes\n\n\n\n\n\n\nctime\n\n\ntimestamp with time zone\n\n\nTimestamp when the preserved device memory is created\n\n\n\n\n\n\n\n\npgstrom.ccache_info\n\n\npgstrom.ccache_info\n system view exports attribute of the columnar-cache chunks (128MB unit for each).\n\n\n\n\n\n\n\n\nName\n\n\nData Type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndatabase_id\n\n\noid\n\n\nDatabase Id\n\n\n\n\n\n\ntable_id\n\n\nregclass\n\n\nTable Id\n\n\n\n\n\n\nblock_nr\n\n\nint\n\n\nHead block-number of the chunk\n\n\n\n\n\n\nnitems\n\n\nbigint\n\n\nNumber of rows in the chunk\n\n\n\n\n\n\nlength\n\n\nbigint\n\n\nRaw size of the cached chunk\n\n\n\n\n\n\nctime\n\n\ntimestamp with time zone\n\n\nTimestamp of the chunk creation\n\n\n\n\n\n\natime\n\n\ntimestamp with time zone\n\n\nTimestamp of the least access to the chunk\n\n\n\n\n\n\n\n\npgstrom.ccache_builder_info\n\n\npgstrom.ccache_builder_info\n system view exports information of asynchronous builder process of columnar cache.\n\n\n\n\n\n\n\n\nName\n\n\nData Type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuilder_id\n\n\nint\n\n\nAsynchronous builder Id of columnar cache\n\n\n\n\n\n\nstate\n\n\ntext\n\n\nState of the builder process (\nshutdown\n, \nstartup\n, \nloading\n or \nsleep\n)\n\n\n\n\n\n\ndatabase_id\n\n\noid\n\n\nDatabase Id where builder process is assigned on\n\n\n\n\n\n\ntable_id\n\n\nregclass\n\n\nTable Id where the builder process is scanning on, if \nstate\n is \nloading\n.\n\n\n\n\n\n\nblock_nr\n\n\nint\n\n\nBlock number where the builder process is scanning on, if \nstate\n is \nloading\n.\n\n\n\n\n\n\n\n\nGUC Parameters\n\n\nThis session introduces PG-Strom's configuration parameters.\n\n\nEnables/disables a particular feature\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npg_strom.enabled\n\n\nbool\n\n\non\n\n\nEnables/disables entire PG-Strom features at once\n\n\n\n\n\n\npg_strom.enable_gpuscan\n\n\nbool\n\n\non\n\n\nEnables/disables GpuScan\n\n\n\n\n\n\npg_strom.enable_gpuhashjoin\n\n\nbool\n\n\non\n\n\nEnables/disables GpuJoin by HashJoin\n\n\n\n\n\n\npg_strom.enable_gpunestloop\n\n\nbool\n\n\non\n\n\nEnables/disables GpuJoin by NestLoop\n\n\n\n\n\n\npg_strom.enable_gpupreagg\n\n\nbool\n\n\non\n\n\nEnables/disables GpuPreAgg\n\n\n\n\n\n\npg_strom.pullup_outer_scan\n\n\nbool\n\n\non\n\n\nEnables/disables to pull up full-table scan if it is just below GpuPreAgg/GpuJoin, to reduce data transfer between CPU/RAM and GPU.\n\n\n\n\n\n\npg_strom.pullup_outer_join\n\n\nbool\n\n\non\n\n\nEnables/disables to pull up tables-join if GpuJoin is just below GpuPreAgg, to reduce data transfer between CPU/RAM and GPU.\n\n\n\n\n\n\npg_strom.enable_numeric_type\n\n\nbool\n\n\non\n\n\nEnables/disables support of \nnumeric\n data type in arithmetic expression on GPU device\n\n\n\n\n\n\npg_strom.cpu_fallback\n\n\nbool\n\n\noff\n\n\nControls whether it actually run CPU fallback operations, if GPU program returned \"CPU ReCheck Error\"\n\n\n\n\n\n\npg_strom.nvme_strom_enabled\n\n\nbool\n\n\non\n\n\nEnables/disables the feature of SSD-to-GPU Direct SQL Execution\n\n\n\n\n\n\npg_strom.nvme_strom_threshold\n\n\nint\n\n\n\u81ea\u52d5\n\n\nControls the table-size threshold to invoke the feature of SSD-to-GPU Direct SQL Execution\n\n\n\n\n\n\n\n\nOptimizer Configuration\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npg_strom.chunk_size\n\n\nint\n\n\n65534kB\n\n\nSize of the data blocks processed by a single GPU kernel invocation. It was configurable, but makes less sense, so fixed to about 64MB in the current version.\n\n\n\n\n\n\npg_strom.gpu_setup_cost\n\n\nreal\n\n\n4000\n\n\nCost value for initialization of GPU device\n\n\n\n\n\n\npg_strom.gpu_dma_cost\n\n\nreal\n\n\n10\n\n\nCost value for DMA transfer over PCIe bus per data-chunk (64MB)\n\n\n\n\n\n\npg_strom.gpu_operator_cost\n\n\nreal\n\n\n0.00015\n\n\nCost value to process an expression formula on GPU. If larger value than \ncpu_operator_cost\n is configured, no chance to choose PG-Strom towards any size of tables\n\n\n\n\n\n\n\n\nExecutor Configuration\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npg_strom.global_max_async_tasks\n\n\nint\n\n\n160\n\n\nNumber of asynchronous taks PG-Strom can throw into GPU's execution queue in the whole system.\n\n\n\n\n\n\npg_strom.local_max_async_tasks\n\n\nint\n\n\n8\n\n\nNumber of asynchronous taks PG-Strom can throw into GPU's execution queue per process. If CPU parallel is used in combination, this limitation shall be applied for each background worker. So, more than \npg_strom.local_max_async_tasks\n asynchronous tasks are executed in parallel on the entire batch job.\n\n\n\n\n\n\npg_strom.max_number_of_gpucontext\n\n\nint\n\n\nauto\n\n\nSpecifies the number of internal data structure \nGpuContext\n to abstract GPU device. Usually, no need to expand the initial value.\n\n\n\n\n\n\n\n\nColumnar Cache Configuration\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npg_strom.ccache_base_dir\n\n\nstring\n\n\n'/dev/shm'\n\n\nSpecifies the directory path to store columnar cache data files. Usually, no need to change from \n/dev/shm\n where \ntmpfs\n is mounted at.\n\n\n\n\n\n\npg_strom.ccache_databases\n\n\nstring\n\n\n''\n\n\nSpecified the target databases for asynchronous columnar cache build, in comma separated list. It does not affect to the manual cache build by \npgstrom_ccache_prewarm()\n.\n\n\n\n\n\n\npg_strom.ccache_num_builders\n\n\nint\n\n\n2\n\n\nSpecified the number of worker processes for asynchronous columnar cache build. It needs to be larger than or equeal to the number of databases in \npg_strom.ccache_databases\n.\n\n\n\n\n\n\npg_strom.ccache_log_output\n\n\nbool\n\n\nfalse\n\n\nControls whether columnar cache builder prints log messages, or not\n\n\n\n\n\n\npg_strom.ccache_total_size\n\n\nint\n\n\nauto\n\n\nUpper limit of the columnar cache in kB. Default is the smaller in 75% of volume size or 66% of system physical memory.\n\n\n\n\n\n\n\n\ngstore_fdw Configuration\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npg_strom.gstore_max_relations\n\n\nint\n\n\n100\n\n\nUpper limit of the number of foreign tables with gstore_fdw. It needs restart to update the parameter.\n\n\n\n\n\n\n\n\nConfiguration of GPU code generation and build\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npg_strom.program_cache_size\n\n\nint\n\n\n256MB\n\n\nAmount of the shared memory size to cache GPU programs already built. It needs restart to update the parameter.\n\n\n\n\n\n\npg_strom.debug_jit_compile_options\n\n\nbool\n\n\noff\n\n\nControls to include debug option (line-numbers and symbol information) on JIT compile of GPU programs. It is valuable for complicated bug analysis using GPU core dump, however, should not be enabled on daily use because of performance degradation.\n\n\n\n\n\n\npg_strom.debug_kernel_source\n\n\nbool\n\n\noff\n\n\nIf enables, \nEXPLAIN VERBOSE\n command also prints out file paths of GPU programs written out.\n\n\n\n\n\n\n\n\nGPU Device Configuration\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npg_strom.cuda_visible_devices\n\n\nstring\n\n\n''\n\n\nList of GPU device numbers in comma separated, if you want to recognize particular GPUs on PostgreSQL startup. It is equivalent to the environment variable \nCUDAVISIBLE_DEVICES\n\n\n\n\n\n\npg_strom.gpu_memory_segment_size\n\n\nint\n\n\n512MB\n\n\nSpecifies the amount of device memory to be allocated per CUDA API call. Larger configuration will reduce the overhead of API calls, but not efficient usage of device memory.\n\n\n\n\n\n\npg_strom.max_num_preserved_gpu_memory\n\n\nint\n\n\n2048\n\n\nUpper limit of the number of preserved GPU device memory segment. Usually, don't need to change from the default value.", 
            "title": "References"
        }, 
        {
            "location": "/references/#supported-data-types", 
            "text": "PG-Strom support the following data types for use on GPU device.  Built-in numeric types     SQL data types  Internal format  Length  Memo      smallint  cl_short  2 bytes     integer  cl_int  4 bytes     bigint  cl_long  8 bytes     real  cl_float  4 bytes     float  cl_double  8 bytes     numeric  cl_ulong  variable length  mapped to 64bit internal format      Note  When GPU processes values in  numeric  data type, it is converted to an internal 64bit format because of implementation reason.\nIt is transparently converted to/from the internal format, on the other hands, PG-Strom cannot convert  numaric  datum with large number of digits, so tries to fallback operations by CPU. Therefore, it may lead slowdown if  numeric  data with large number of digits are supplied to GPU device.\nTo avoid the problem, turn off the GUC option  pg_strom.enable_numeric_type  not to run operational expression including  numeric  data types on GPU devices.   Built-in date and time types     SQL data types  Internal format  Length  Memo      date  DateADT  4 bytes     time  TimeADT  8 bytes     timetz  TimeTzADT  12 bytes     timestamp  Timestamp  8 bytes     timestamptz  TimestampTz  8 bytes     interval  Interval  16 bytes      Built-in variable length types     SQL data types  Internal format  Length  Memo      bpchar  varlena *  variable length     varchar  varlena *  variable length     bytea  varlena *  variable length     text  varlena *  variable length      Built-in miscellaneous types     SQL data types  Internal format  Length  Memo      boolean  cl_bool  1 byte     money  cl_long  8 bytes     uuid  pg_uuid  16 bytes     macaddr  macaddr  6 bytes     inet  inet_struct  7 bytes or 19 bytes     cidr  inet_struct  7 bytes or 19 bytes      Built-in range data types     SQL data types  Internal format  Length  Memo      int4range  __int4range  14 bytes     int8range  __int8range  22 bytes     tsrange  __tsrange  22 bytes     tstzrange  __tstzrange  22 bytes     daterange  __daterange  14 bytes      Extra Types     SQL data types  Internal format  Length  Memo      float2  half_t  2 bytes  Half precision data type    reggstore  cl_uint  4 bytes  Specific version of regclass for gstore_fdw. Special handling at PL/CUDA function invocation.", 
            "title": "Supported Data Types"
        }, 
        {
            "location": "/references/#device-functions-and-operators", 
            "text": "", 
            "title": "Device functions and operators"
        }, 
        {
            "location": "/references/#type-cast", 
            "text": "destination type  source type  description      bool  int4     int2  int4,int8,float2,float4,float8,numeric     int4  int2,int8,float2,float4,float8,numeric     int8  int2,int4,float2,float4,float8,numeric     float2  int2,int4,int8,float4,float8,numeric     float4  int2,int4,int8,float2,float8,numeric     float8  int2,int4,int8,float2,float4,numeric     numeric  int2,int4,int8,float2,float4,float8     money  int4,int8,numeric     inet  cidr     date  timestamp,timestamptz     time  timetz,timestamp,timestamptz     timetz  time,timestamptz     timestamp  date,timestamptz     timestamptz  date,timestamp", 
            "title": "Type cast"
        }, 
        {
            "location": "/references/#functions-and-operators", 
            "text": "Numeric functions/operators     function/operator  description      TYPE = TYPE  Comparison of two values TYPE  is any of  int2,int4,int8 COMP  is any of  =, , , =, =,    TYPE = TYPE  Comparison of two values TYPE  is any of  float2,float4,float8 COMP  is any of  =, , , =, =,    numeric COMP numeric  Comparison of two values COMP  is any of  =, , , =, =,    TYPE + TYPE  Arithemetic addition TYPE  is any of  int2,int4,int8,float2,float4,float8,numeric    TYPE - TYPE  Arithemetic substract TYPE  is any of  int2,int4,int8,float2,float4,float8,numeric    TYPE * TYPE  Arithemetic multiplication TYPE  is any of  int2,int4,int8,float2,float4,float8,numeric    TYPE / TYPE  Arithemetic division TYPE  is any of  int2,int4,int8,float2,float4,float8,numeric    TYPE % TYPE  Reminer operator TYPE  is any of  int2,int4,int8    TYPE   TYPE  Bitwise AND TYPE  is any of  int2,int4,int8    TYPE   TYPE  Bitwise OR TYPE  is any of  int2,int4,int8    TYPE # TYPE  Bitwise XOR TYPE  is any of  int2,int4,int8    ~ TYPE  Bitwise NOT TYPE  is any if  int2,int4,int8    TYPE   int4  Right shift TYPE  is any of  int2,int4,int8    TYPE   int4  Left shift TYPE  is any of  int2,int4,int8    + TYPE  Unary plus TYPE  is any of  int2,int4,int8,float2,float4,float8,numeric    - TYPE  Unary minus TYPE  is any of  int2,int4,int8,float2,float4,float8,numeric    @TYPE  Absolute value TYPE  is any of  int2,int4,int8,float2,float4,float8,numeric     Mathematical functions     functions/operators  description      cbrt(float8)  cube root    dcbrt(float8)  cube root    ceil(float8)  nearest integer greater than or equal to argument    ceiling(float8)  nearest integer greater than or equal to argument    exp(float8)  exponential    dexp(float8)  exponential    floor(float8)  nearest integer less than or equal to argument    ln(float8)  natural logarithm    dlog1(float8)  natural logarithm    log(float8)  base 10 logarithm    dlog10(float8)  base 10 logarithm    pi()  circumference ratio    power(float8,float8)  power    pow(float8,float8)  power    dpow(float8,float8)  power    round(float8)  round to the nearest integer    dround(float8)  round to the nearest integer    sign(float8)  sign of the argument    sqrt(float8)  square root    dsqrt(float8)  square root    trunc(float8)  truncate toward zero    dtrunc(float8)  truncate toward zero     Trigonometric functions     functions/operators  description      degrees(float8)  radians to degrees    radians(float8)  degrees to radians    acos(float8)  inverse cosine    asin(float8)  inverse sine    atan(float8)  inverse tangent    atan2(float8,float8)  inverse tangent of  arg1 / arg2    cos(float8)  cosine    cot(float8)  cotangent    sin(float8)  sine    tan(float8)  tangent     Date and time operators     functions/operators  description      date COMP date  COMP  is any of  =, , , =, =,    date COMP timestamp  COMP  is any of  =, , , =, =,    date COMP timestamptz  COMP  is any of  =, , , =, =,    time COMP time  COMP  is any of  =, , , =, =,    timetz COMP timetz  COMP  is any of  =, , , =, =,    timestamp COMP timestamp  COMP  is any of  =, , , =, =,    timestamp COMP date  COMP  is any of  =, , , =, =,    timestamptz COMP timestamptz  COMP  is any of  =, , , =, =,    timestamptz COMP date  COMP  is any of  =, , , =, =,    timestamp COMP timestamptz  COMP  is any of  =, , , =, =,    timestamptz COMP timestamp  COMP  is any of  =, , , =, =,    interval COMP interval  COMP  is any of  =, , , =, =,    date OP int4  OP  is either of  +,-    int4 + date     date - date     date + time     date + timetz     time + date     time - time     timestamp - timestamp     timetz OP interval  OP  is either of  +,-    timestamptz OP interval  OP  is either of  +,-    overlaps(TYPE,TYPE,TYPE,TYPE)  TYPE  is any of  time,timetz,timestamp,timestamptz    extract(text FROM TYPE)  TYPE  is any of  time,timetz,timestamp,timestamptz,interval    now()     - interval  unary minus operator    interval OP interval  OP  is either of  +,-     Text functions/operators     functions/operators  description      {text,bpchar} COMP {text,bpchar}  COMP  is either of  =,    {text,bpchar} COMP {text,bpchar}  COMP  is either of  , =, =, Only available on no-locale or UTF-8    length(TYPE)  length of the string TYPE  is either of  text,bpchar    TYPE LIKE text  TYPE  is either of  text,bpchar    TYPE NOT LIKE text  TYPE  is either of  text,bpchar    TYPE ILIKE text  TYPE  is either of  text,bpchar Only available on no-locale or UTF-8    TYPE NOT ILIKE text  TYPE  is either of  text,bpchar Only available on no-locale or UTF-8     Network functions/operators     functions/operators  description      macaddr COMP macaddr  COMP  is any of  =, , , =, =,    macaddr   macaddr  Bitwise AND operator    macaddr   macaddr  Bitwise OR operator    ~ macaddr  Bitwise NOT operator    trunc(macaddr)  Set last 3 bytes to zero    inet COMP inet  COMP  is any of  =, , , =, =,    inet INCL inet  INCL  is any of  , =, , =,    ~ inet     inet   inet     inet   inet     inet + int8     inet - int8     inet - inet     broadcast(inet)     family(inet)     hostmask(inet)     masklen(inet)     netmask(inet)     network(inet)     set_masklen(cidr,int)     set_masklen(inet,int)     inet_same_family(inet, inet)     inet_merge(inet,inet)      Currency operators     functions/operators  description      money COMP money  COMP  is any of  =, , , =, =,    money OP money  OP  is any of  +,-,/    money * TYPE  TYPE  is any of  int2,int4,float2,float4,float8    TYPE * money  TYPE  is any of  int2,int4,float2,float4,float8    money / TYPE  TYPE  is any of  int2,int4,float2,float4,float8     UUID operators     functions/operators  description      uuid COMP uuid  COMP  is any of  =, , , =, =,     Range type functions/operators     functions/operators  description      RANGE = RANGE  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    RANGE   RANGE  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    RANGE   RANGE  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    RANGE  = RANGE  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    RANGE   RANGE  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    RANGE  = RANGE  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    RANGE @ RANGE  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    RANGE @ TYPE  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange TYPE  is element type of  RANGE .    RANGE  @RANGE  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    TYPE  @RANGE  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange TYPE  is element type of  RANGE .    RANGE   RANGE  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    RANGE   RANGE  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    RANGE   RANGE  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    RANGE   RANGE  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    RANGE   RANGE  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    RANGE - - RANGE  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    RANGE + RANGE  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    RANGE * RANGE  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    RANGE - RANGE  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    lower(RANGE)  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    upper(RANGE)  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    isempty(RANGE)  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    lower_inc(RANGE)  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    upper_inc(RANGE)  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    lower_inf(RANGE)  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    upper_inf(RANGE)  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange    range_merge(RANGE,RANGE)  RANGE  is any of  int4range,int8range,tsrange,tstzrange,daterange", 
            "title": "Functions and operators"
        }, 
        {
            "location": "/references/#miscellaneous-device-functions", 
            "text": "functions/operators  result  description      as_int8(float8)  int8  Re-interpret double-precision floating point bit-pattern as 64bit integer value    as_int4(float4)  int4  Re-interpret single-precision floating point bit-pattern as 32bit integer value    as_int2(float2)  int2  Re-interpret half-precision floating point bit-pattern as 16bit integer value    as_float8(int8)  float8  Re-interpret 64bit integer bit-pattern as double-precision floating point value    as_float4(int4)  float4  Re-interpret 32bit integer bit-pattern as single-precision floating point value    as_float2(int2)  float2  Re-interpret 16bit integer bit-pattern as half-precision floating point value", 
            "title": "Miscellaneous device functions"
        }, 
        {
            "location": "/references/#pg-strom-specific-sql-functions", 
            "text": "This section introduces SQL functions which are additionally provided by PG-Strom.", 
            "title": "PG-Strom Specific SQL functions"
        }, 
        {
            "location": "/references/#device-information", 
            "text": "Function  Result  Description      gpu_device_name(int = 0)  text  It tells name of the specified GPU device.    gpu_global_memsize(int = 0)  bigint  It tells amount of the specified GPU device in bytes.    gpu_max_blocksize(int = 0)  int  It tells maximum block-size on the specified GPU device. 1024, in the currently supported GPU models.    gpu_warp_size(int = 0)  int  It tells warp-size on the specified GPU device. 32, in the currently supported GPU models.    gpu_max_shared_memory_perblock(int = 0)  int  It tells maximum shared memory size per block on the specified GPU device.    gpu_num_registers_perblock(int = 0)  int  It tells total number of registers per block on the specified GPU device.    gpu_num_multiptocessors(int = 0)  int  It tells number of SM(Streaming Multiprocessor) units on the specified GPU device.    gpu_num_cuda_cores(int = 0)  int  It tells number of CUDA cores on the specified GPU device.    gpu_cc_major(int = 0)  int  It tells major CC(Compute Capability) version of the specified GPU device.    gpu_cc_minor(int = 0)  int  It tells minor CC(Compute Capability) version of the specified GPU device.    gpu_pci_id(int = 0)  int  It tells PCI bus-id of the specified GPU device.", 
            "title": "Device Information"
        }, 
        {
            "location": "/references/#array-based-matrix-support", 
            "text": "You can use array data type of PostgreSQL to deliver matrix-data for PL/CUDA functions.\nA two-dimensional array of fixed-length boolean/numeric values without NULL has flat data structure (expect for the array header). It allows to identify the address of elements by indexes of the matrix uniquely.\nPG-Strom provides several SQL functions to handle array-based matrix.  Type cast     destination type  source type  description      int[]  bit  convert bit-string to 32bit integer array. Unaligned bits are filled up by 0.    bit  int[]  convert 32bit integer to bit-string     Array-based matrix functions     functions/operators  result  description      array_matrix_validation(anyarray)  bool  It checks whether the supplied array satisfies the requirement of array-based matrix.    array_matrix_height(anyarray)  int  It tells height of the array-based matrix.    array_matrix_width(anyarray)  int  It tells width of the array-based matrix.    array_vector_rawsize(regtype,int)  bigint  It tells expected size if N-items vector is created with the specified type.    array_matrix_rawsize(regtype,int,int)  bigint  It tells expected size if HxW matrix is created with the specified type.    array_cube_rawsize(regtype,int,int,int)  bigint  It tells expected size if HxWxD cube is created with the specified type.    type_len(regtype)  bigint  It tells unit length of the specified type.    composite_type_rawsize(LEN,...)  bigint  It tells expected size of the composite type if constructed with the specified data-length order. We expect to use the function with  type_len() LEN  is either of  int,bigint    matrix_unnest(anyarray)  record  It is a function to return set, to fetch rows from top of the supplied array-based matrix. PostgreSQL has no type information of the record, so needs to give type information using  ROW()  clause.    rbind(MATRIX,MATRIX)  MATRIX  It combines two array-based matrix vertically. MATRIX  is array type of any of  bool,int2,int4,int8,float4,float8    rbind(TYPE,MATRIX)  MATRIX  It adds a scalar value on head of the array-based matrix. If multiple columns exist, the scalar value shall be set on all the column of the head row. MATRIX  is array type of any of  bool,int2,int4,int8,float4,float8 . TYPE  is element of  MATRIX    rbind(MATRIX,TYPE)  MATRIX  It adds a scalar value on bottom of the array-based matrix. If multiple columns exist, the scalar value shall be set on all the column of the bottom row. MATRIX  is array type of any of  bool,int2,int4,int8,float4,float8 TYPE  is element type of  MATRIX    cbind(MATRIX,MATRIX)  MATRIX  It combines two array-based matrix horizontally. MATRIX  is array type of any of  bool,int2,int4,int8,float4,float8    cbind(TYPE,MATRIX)  MATRIX  It adds a scalar value on left of the array-based matrix. If multiple rows exist, the scalar value shall be set on all the rows of the left column. MATRIX  is array type of any of  bool,int2,int4,int8,float4,float8 TYPE  is element type of  MATRIX    cbind(MATRIX,TYPE)  MATRIX  It adds a scalar value on right of the array-based matrix. If multiple rows exist, the scalar value shall be set on all the rows of the right column. MATRIX  is array type of any of  bool,int2,int4,int8,float4,float8 . TYPE  is element type of  MATRIX    transpose(MATRIX)  MATRIX  It transposes the array-based matrix. MATRIX  is array type of any of  bool,int2,int4,int8,float4,float8     Aggregate functions     functions/operators  result  description      array_matrix(TYPE,...)  TYPE[]  An aggregate function with varidic arguments. It produces M-cols x N-rows array-based matrix if N-rows were supplied with M-columns. TYPE  is any of  bool,int2,int4,int8,float4,float8    array_matrix(bit)  bit[]  An aggregate function to produce  int4[]  array-based matrix. It considers bit-string as a set of 32bits integer values.    rbind(MATRIX)  MATRIX  An aggregate function to combine the supplied array-based matrix vertically. MATRIX  is array type of any of  bool,int2,int4,int8,float4,float8    cbind(MATRIX)  MATRIX  An aggregate function to combine the supplied array-based matrix horizontally. MATRIX  is array type of any of  bool,int2,int4,int8,float4,float8", 
            "title": "Array-based matrix support"
        }, 
        {
            "location": "/references/#miscellaneous-functions", 
            "text": "Function  Result  Description      pgstrom_ccache_enabled(regclass)  text  Enables in-memory columnar cache on the specified table.    pgstrom_ccache_disabled(regclass)  text  Disables in-memory columnar cache on the specified table.    pgstrom_ccache_prewarm(regclass)  int  Build in-memory columnar cache on the specified table synchronously, until cache usage is less than the threshold.        Function  Result  Description      gstore_fdw_format(reggstore)  text  It tells internal format of the specified gstore_fdw foreign table.    gstore_fdw_nitems(reggstore)  bigint  It tells number of rows of the specified gstore_fdw foreign table.    gstore_fdw_nattrs(reggstore)  bigint  It tells number of columns of the specified gstore_fdw foreign table.    gstore_fdw_rawsize(reggstore)  bigint  It tells raw size of the specified gstore_fdw foreign table in bytes.        Function  Result  Description      gstore_export_ipchandle(reggstore)  bytea  It tells IPC-handle of the GPU device memory region of the specified gstore_fdw foreign table.    lo_import_gpu(int, bytea, bigint, bigint, oid=0)  oid  It maps GPU device memory region acquired by external application, then import its contents into a largeobject.    lo_export_gpu(oid, int, bytea, bigint, bigint)  bigint  It maps GPU device memory region acquired by external application, then export contents of the specified largeobject into the region.        Function  Result  Description      plcuda_kernel_max_blocksz  int  It tells maximum block size of the GPU kernel of PL/CUDA function when it is called as its helper.    plcuda_kernel_static_shmsz()  int  It tells size of the statically acquired shared memory per block by the GPU kernel of PL/CUDA function when it is called as its helper.    plcuda_kernel_dynamic_shmsz()  int  It tells size of the dynamic shared memory per block, which GPU kernel of the PL/CUDA function can allocate, when it is called as its helper.    plcuda_kernel_const_memsz()  int  It tells size of the constant memory acquired by the GPU kernel of PL/CUDA function, when it is called as its helper.    plcuda_kernel_local_memsz()  int  It tells size of the local memory per thread acquired by the GPU kernel of PL/CUDA function, when it is called as its helper.        Function  Result  Description      pgstrom.license_validation()  text  It validates commercial subscription.    pgstrom.license_query()  text  It shows the active commercial subscription.", 
            "title": "Miscellaneous functions"
        }, 
        {
            "location": "/references/#system-view", 
            "text": "PG-Strom provides several system view to export its internal state for users or applications.\nThe future version may add extra fields here. So, it is not recommended to reference these information schemas using  SELECT * FROM ... .  pgstrom.device_info  pgstrom.device_into  system view exports device attributes of the GPUs recognized by PG-Strom.\nGPU has different specification for each model, like number of cores, capacity of global memory, maximum number of threads and etc, user's software should be optimized according to the information if you try raw GPU programming with PL/CUDA functions.     Name  Data Type  Description      device_nr  int  GPU device number    aindex  int  Attribute index    attribute  text  Attribute name    value  text  Value of the attribute     pgstrom.device_preserved_meminfo  pgstrom.device_preserved_meminfo  system view exports information of the preserved device memory; which can be shared multiple PostgreSQL backend.\nRight now, only gstore_fdw uses this feature.     Name  Data Type  Description      device_nr  int  GPU device number    handle  bytea  IPC handle of the preserved device memory    owner  regrole  Owner of the preserved device memory    length  bigint  Length of the preserved device memory in bytes    ctime  timestamp with time zone  Timestamp when the preserved device memory is created     pgstrom.ccache_info  pgstrom.ccache_info  system view exports attribute of the columnar-cache chunks (128MB unit for each).     Name  Data Type  Description      database_id  oid  Database Id    table_id  regclass  Table Id    block_nr  int  Head block-number of the chunk    nitems  bigint  Number of rows in the chunk    length  bigint  Raw size of the cached chunk    ctime  timestamp with time zone  Timestamp of the chunk creation    atime  timestamp with time zone  Timestamp of the least access to the chunk     pgstrom.ccache_builder_info  pgstrom.ccache_builder_info  system view exports information of asynchronous builder process of columnar cache.     Name  Data Type  Description      builder_id  int  Asynchronous builder Id of columnar cache    state  text  State of the builder process ( shutdown ,  startup ,  loading  or  sleep )    database_id  oid  Database Id where builder process is assigned on    table_id  regclass  Table Id where the builder process is scanning on, if  state  is  loading .    block_nr  int  Block number where the builder process is scanning on, if  state  is  loading .", 
            "title": "System View"
        }, 
        {
            "location": "/references/#guc-parameters", 
            "text": "This session introduces PG-Strom's configuration parameters.  Enables/disables a particular feature     Parameter  Type  Default  Description      pg_strom.enabled  bool  on  Enables/disables entire PG-Strom features at once    pg_strom.enable_gpuscan  bool  on  Enables/disables GpuScan    pg_strom.enable_gpuhashjoin  bool  on  Enables/disables GpuJoin by HashJoin    pg_strom.enable_gpunestloop  bool  on  Enables/disables GpuJoin by NestLoop    pg_strom.enable_gpupreagg  bool  on  Enables/disables GpuPreAgg    pg_strom.pullup_outer_scan  bool  on  Enables/disables to pull up full-table scan if it is just below GpuPreAgg/GpuJoin, to reduce data transfer between CPU/RAM and GPU.    pg_strom.pullup_outer_join  bool  on  Enables/disables to pull up tables-join if GpuJoin is just below GpuPreAgg, to reduce data transfer between CPU/RAM and GPU.    pg_strom.enable_numeric_type  bool  on  Enables/disables support of  numeric  data type in arithmetic expression on GPU device    pg_strom.cpu_fallback  bool  off  Controls whether it actually run CPU fallback operations, if GPU program returned \"CPU ReCheck Error\"    pg_strom.nvme_strom_enabled  bool  on  Enables/disables the feature of SSD-to-GPU Direct SQL Execution    pg_strom.nvme_strom_threshold  int  \u81ea\u52d5  Controls the table-size threshold to invoke the feature of SSD-to-GPU Direct SQL Execution     Optimizer Configuration     Parameter  Type  Default  Description      pg_strom.chunk_size  int  65534kB  Size of the data blocks processed by a single GPU kernel invocation. It was configurable, but makes less sense, so fixed to about 64MB in the current version.    pg_strom.gpu_setup_cost  real  4000  Cost value for initialization of GPU device    pg_strom.gpu_dma_cost  real  10  Cost value for DMA transfer over PCIe bus per data-chunk (64MB)    pg_strom.gpu_operator_cost  real  0.00015  Cost value to process an expression formula on GPU. If larger value than  cpu_operator_cost  is configured, no chance to choose PG-Strom towards any size of tables     Executor Configuration     Parameter  Type  Default  Description      pg_strom.global_max_async_tasks  int  160  Number of asynchronous taks PG-Strom can throw into GPU's execution queue in the whole system.    pg_strom.local_max_async_tasks  int  8  Number of asynchronous taks PG-Strom can throw into GPU's execution queue per process. If CPU parallel is used in combination, this limitation shall be applied for each background worker. So, more than  pg_strom.local_max_async_tasks  asynchronous tasks are executed in parallel on the entire batch job.    pg_strom.max_number_of_gpucontext  int  auto  Specifies the number of internal data structure  GpuContext  to abstract GPU device. Usually, no need to expand the initial value.     Columnar Cache Configuration     Parameter  Type  Default  Description      pg_strom.ccache_base_dir  string  '/dev/shm'  Specifies the directory path to store columnar cache data files. Usually, no need to change from  /dev/shm  where  tmpfs  is mounted at.    pg_strom.ccache_databases  string  ''  Specified the target databases for asynchronous columnar cache build, in comma separated list. It does not affect to the manual cache build by  pgstrom_ccache_prewarm() .    pg_strom.ccache_num_builders  int  2  Specified the number of worker processes for asynchronous columnar cache build. It needs to be larger than or equeal to the number of databases in  pg_strom.ccache_databases .    pg_strom.ccache_log_output  bool  false  Controls whether columnar cache builder prints log messages, or not    pg_strom.ccache_total_size  int  auto  Upper limit of the columnar cache in kB. Default is the smaller in 75% of volume size or 66% of system physical memory.     gstore_fdw Configuration     Parameter  Type  Default  Description      pg_strom.gstore_max_relations  int  100  Upper limit of the number of foreign tables with gstore_fdw. It needs restart to update the parameter.     Configuration of GPU code generation and build     Parameter  Type  Default  Description      pg_strom.program_cache_size  int  256MB  Amount of the shared memory size to cache GPU programs already built. It needs restart to update the parameter.    pg_strom.debug_jit_compile_options  bool  off  Controls to include debug option (line-numbers and symbol information) on JIT compile of GPU programs. It is valuable for complicated bug analysis using GPU core dump, however, should not be enabled on daily use because of performance degradation.    pg_strom.debug_kernel_source  bool  off  If enables,  EXPLAIN VERBOSE  command also prints out file paths of GPU programs written out.     GPU Device Configuration     Parameter  Type  Default  Description      pg_strom.cuda_visible_devices  string  ''  List of GPU device numbers in comma separated, if you want to recognize particular GPUs on PostgreSQL startup. It is equivalent to the environment variable  CUDAVISIBLE_DEVICES    pg_strom.gpu_memory_segment_size  int  512MB  Specifies the amount of device memory to be allocated per CUDA API call. Larger configuration will reduce the overhead of API calls, but not efficient usage of device memory.    pg_strom.max_num_preserved_gpu_memory  int  2048  Upper limit of the number of preserved GPU device memory segment. Usually, don't need to change from the default value.", 
            "title": "GUC Parameters"
        }, 
        {
            "location": "/release_note/", 
            "text": "PG-Strom v2.0 Release\n\n\nPG-Strom Development Team (17-Apr-2018)\n\n\n\nOverview\n\n\nMajor enhancement in PG-Strom v2.0 includes:\n\n\n\n\nOverall redesign of the internal infrastructure to manage GPU and stabilization\n\n\nCPU+GPU hybrid parallel execution\n\n\nSSD-to-GPU Direct SQL Execution\n\n\nIn-memory columnar cache\n\n\nGPU memory store (gstore_fdw)\n\n\nRedesign of GpuJoin and GpuPreAgg and speed-up\n\n\nGpuPreAgg + GpuJoin + GpuScan combined GPU kernel\n\n\n\n\nYou can download the summary of new features from: \nPG-Strom v2.0 Technical Brief\n.\n\n\nPrerequisites\n\n\n\n\nPostgreSQL v9.6, v10\n\n\nCUDA Toolkit 9.1\n\n\nLinux distributions supported by CUDA Toolkit\n\n\nIntel x86 64bit architecture (x86_64)\n\n\nNVIDIA GPU CC 6.0 or later (Pascal or Volta)\n\n\n\n\nNew Features\n\n\n\n\n\n\nEntire re-design and stabilization of the internal infrastructure to manage GPU device.\n\n\n\n\nPostgreSQL backend process simultaneously uses only one GPU at most. In case of multi-GPUs installation, it assumes combination use with CPU parallel execution of PostgreSQL. Usually, it is not a matter because throughput of CPU to provide data to GPU is much narrower than capability of GPU processors. We prioritized simpleness of the software architecture.\n\n\nWe began to utilize the demand paging feature of GPU device memory supported at the GPU models since Pascal generation. In most of SQL workloads, we cannot know exact size of the required result buffer prior to its execution, therefore, we had allocated more buffer than estimated buffer length, and retried piece of the workloads if estimated buffer size is not sufficient actually. This design restricts available resources of GPU which can be potentially used for other concurrent processes, and complicated error-retry logic was a nightmare for software quality. The demand paging feature allows to eliminate and simplify these stuffs.\n\n\nWe stop to use CUDA asynchronous interface. Use of the demand paging feature on GPU device memory makes asynchronous APIs for DMA (like \ncuMemCpyHtoD\n) perform synchronously, then it reduces concurrency and usage ratio of GPU kernels. Instead of the CUDA asynchronous APIs, PG-Strom manages its own worker threads which call synchronous APIs for each. As a by-product, we also could eliminate asynchronous callbacks (\ncuStreamAddCallback\n), it allows to use MPS daemon which has a restriction at this API.\n\n\n\n\n\n\n\n\nCPU+GPU Hybrid Parallel Execution\n\n\n\n\nCPU parallel execution at PostgreSQL v9.6 is newly supported.\n\n\nCustomScan logic of GpuScan, GpuJoin and GpuPreAgg provided by PG-Strom are executable on multiple background worker processes of PostgreSQL in parallel.\n\n\nLimitation: PG-Strom's own statistics displayed at \nEXPLAIN ANALYZE\n if CPU parallel execution. Because PostgreSQL v9.6 does not provide \nShutdownCustomScan\n callback of the CustomScan interface, coordinator process has no way to reclaim information of worker processes prior to the release of DSM (Dynamic Shared Memory) segment.\n\n\n\n\n\n\n\n\nSSD-to-GPU Direct SQL Execution\n\n\n\n\nBy cooperation with the \nnvme_strom\n Linux kernel module, it enables to load PostgreSQL's data blocks on NVMe-SSD to GPU device memory directly, bypassing the CPU and host buffer. This feature enables to apply PG-Strom on the area which have to process large data set more than system RAM size.\n\n\nIt allows to pull out pretty high throughput close to the hardware limitation because its data stream skips block-device or filesystem layer. Then, GPU runs SQL workloads that usually reduce the amount of data to be processed by CPU. The chemical reaction of these characteristics enables to redefine GPU's role as accelerator of I/O workloads also, not only computing intensive workloads.\n\n\n\n\n\n\n\n\nIn-memory Columnar Cache\n\n\n\n\nFor middle size data-set loadable onto the system RAM, it allows to cache data-blocks in column format which is more suitable for GPU computing. If cached data-blocks are found during table scan, PG-Strom prefers to reference the columnar cache more than shared buffer of PostgreSQL.\n\n\nIn-memory columnar cache can be built synchronously, or asynchronously by the background workers.\n\n\nYou may remember very early revision of PG-Strom had similar feature. In case when a cached tuple gets updated, the latest in-memory columnar cache which we newly implemented in v2.0 invalidates the cache block which includes the updated tuples. It never updates the columnar cache according to the updates of row-store, so performance degradation is quite limited.\n\n\n\n\n\n\n\n\nGPU Memory Store (gstore_fdw)\n\n\n\n\nIt enables to write to / read from preserved GPU device memory region by SELECT/INSERT/UPDATE/DELETE in SQL-level, using foreign table interface.\n\n\nIn v2.0, only \npgstrom\n internal data format is supported. It saves written data using PG-Strom's buffer format of \nKDS_FORMAT_COLUMN\n. It can compress variable length data using LZ algorithm.\n\n\nIn v2.0, GPU memory store can be used as data source of PL/CUDA user defined function.\n\n\n\n\n\n\n\n\nRedesign and performance improvement of GpuJoin and GpuPreAgg\n\n\n\n\nStop using Dynamic Parallelism which we internally used in GpuJoin and GpuPreAgg, and revised entire logic of these operations. Old design had a problem of less GPU usage ratio because a GPU kernel which launches GPU sub-kernel and just waits for its completion occupied GPU's execution slot.\n\n\nA coproduct of this redesign is suspend/resume of GpuJoin. In principle, JOIN operation of SQL may generate larger number of rows than number of input rows, but preliminary not predictive. The new design allows to suspend GPU kernel once buffer available space gets lacked, then resume with new result buffer. It simplifies size estimation logic of the result buffer, and eliminates GPU kernel retry by lack of buffer on run-time.\n\n\n\n\n\n\n\n\nGpuPreAgg+GpuJoin+GpuScan combined GPU kernel\n\n\n\n\nIn case when GPU executable SCAN, JOIN and GROUP BY are serially cascaded, a single GPU kernel invocation runs a series of tasks equivalent to the GpuScan, GpuJoin and GpuPreAgg. This is an approach to minimize data exchange between CPU and GPU. For example, result buffer of GpuJoin is used as input buffer of GpuPreAgg.\n\n\nThis feature is especially valuable if combined with SSD-to-GPU Direct SQL Execution.\n\n\n\n\n\n\n\n\nPL/CUDA Enhancement\n\n\n\n\n#plcuda_include\n is enhanced to specify SQL function which returns \ntext\n type. It can change the code block to inject according to the argument, so it also allows to generate multiple GPU kernel variations, not only inclusion of externally defined functions.\n\n\nIf PL/CUDA takes \nreggstore\n type argument, GPU kernel function receives pointer of the GPU memory store. Note that it does not pass the OID value.\n\n\n\n\n\n\n\n\nOther Enhancement\n\n\n\n\nlo_import_gpu\n and \nlo_export_gpu\n functions allows to import contents of the GPU device memory acquired by external applications directly, or export contents of the largeobject to the GPU device memory.\n\n\n\n\n\n\n\n\nPackaging\n\n\n\n\nAdd RPM packages to follow the PostgreSQL packages distributed by PostgreSQL Global Development Group.\n\n\nAll the software packages are available at HeteroDB SWDC(Software Distribution Center) and downloadable.\n\n\n\n\n\n\n\n\nDocument\n\n\n\n\nPG-Strom documentation was entirely rewritten using markdown and mkdocs. It makes documentation maintenance easier than the previous HTML based approach, so expects timely updates according to the development of new features.\n\n\n\n\n\n\n\n\nTest\n\n\n\n\nRegression test for PG-Strom was built on top of the regression test framework of PostgreSQL.\n\n\n\n\n\n\n\n\nDropped features\n\n\n\n\n\n\nPostgreSQL v9.5 Support\n\n\n\n\nPostgreSQL v9.6 had big changes in both of the optimizer and executor to support CPU parallel query execution. The biggest change for extension modules that interact them is an enhancement of the interface called \"upper planner path-ification\". It allows to choose an optimal execution-plan from the multiple candidates based on the estimated cost, even if it is aggregation or sorting.\n\n\nIt is fundamentally different from the older way where we rewrote query execution plan to inject GpuPreAgg using the hooks. It allows to inject GpuPreAgg node in more reasonable and reliable way, and we could drop complicated (and buggy) logic to rewrite query execution plan once constructed.\n\n\nCustomScan interface is also enhanced to support CPU parallel execution. Due to the reason, we dropped PostgreSQL v9.5 support to follow these new enhancement.\n\n\n\n\n\n\n\n\nGpuSort feature\n\n\n\n\nWe dropped GpuSort because we have little advantages in the performance.\n\n\nSorting is one of the GPU suitable workloads. However, in case when we try to sort data blocks larger than GPU device memory, we have to split the data blocks into multiple chunks, then partially sort them and merge them by CPU to generate final results.\n\n\nLarger chunk size is better to reduce the load to merge multiple chunks by CPU, on the other hands, larger chunk size takes larger lead time to launch GPU kernel to sort. It means here is a trade-off; which disallows asynchronous processing by PG-Strom to make data transfer latency invisible.\n\n\nIt is hard to solve the problem, or too early to solve the problem, we dropped GpuSort feature once.", 
            "title": "Release Note"
        }, 
        {
            "location": "/release_note/#pg-strom-v20-release", 
            "text": "PG-Strom Development Team (17-Apr-2018)", 
            "title": "PG-Strom v2.0 Release"
        }, 
        {
            "location": "/release_note/#overview", 
            "text": "Major enhancement in PG-Strom v2.0 includes:   Overall redesign of the internal infrastructure to manage GPU and stabilization  CPU+GPU hybrid parallel execution  SSD-to-GPU Direct SQL Execution  In-memory columnar cache  GPU memory store (gstore_fdw)  Redesign of GpuJoin and GpuPreAgg and speed-up  GpuPreAgg + GpuJoin + GpuScan combined GPU kernel   You can download the summary of new features from:  PG-Strom v2.0 Technical Brief .", 
            "title": "Overview"
        }, 
        {
            "location": "/release_note/#prerequisites", 
            "text": "PostgreSQL v9.6, v10  CUDA Toolkit 9.1  Linux distributions supported by CUDA Toolkit  Intel x86 64bit architecture (x86_64)  NVIDIA GPU CC 6.0 or later (Pascal or Volta)", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/release_note/#new-features", 
            "text": "Entire re-design and stabilization of the internal infrastructure to manage GPU device.   PostgreSQL backend process simultaneously uses only one GPU at most. In case of multi-GPUs installation, it assumes combination use with CPU parallel execution of PostgreSQL. Usually, it is not a matter because throughput of CPU to provide data to GPU is much narrower than capability of GPU processors. We prioritized simpleness of the software architecture.  We began to utilize the demand paging feature of GPU device memory supported at the GPU models since Pascal generation. In most of SQL workloads, we cannot know exact size of the required result buffer prior to its execution, therefore, we had allocated more buffer than estimated buffer length, and retried piece of the workloads if estimated buffer size is not sufficient actually. This design restricts available resources of GPU which can be potentially used for other concurrent processes, and complicated error-retry logic was a nightmare for software quality. The demand paging feature allows to eliminate and simplify these stuffs.  We stop to use CUDA asynchronous interface. Use of the demand paging feature on GPU device memory makes asynchronous APIs for DMA (like  cuMemCpyHtoD ) perform synchronously, then it reduces concurrency and usage ratio of GPU kernels. Instead of the CUDA asynchronous APIs, PG-Strom manages its own worker threads which call synchronous APIs for each. As a by-product, we also could eliminate asynchronous callbacks ( cuStreamAddCallback ), it allows to use MPS daemon which has a restriction at this API.     CPU+GPU Hybrid Parallel Execution   CPU parallel execution at PostgreSQL v9.6 is newly supported.  CustomScan logic of GpuScan, GpuJoin and GpuPreAgg provided by PG-Strom are executable on multiple background worker processes of PostgreSQL in parallel.  Limitation: PG-Strom's own statistics displayed at  EXPLAIN ANALYZE  if CPU parallel execution. Because PostgreSQL v9.6 does not provide  ShutdownCustomScan  callback of the CustomScan interface, coordinator process has no way to reclaim information of worker processes prior to the release of DSM (Dynamic Shared Memory) segment.     SSD-to-GPU Direct SQL Execution   By cooperation with the  nvme_strom  Linux kernel module, it enables to load PostgreSQL's data blocks on NVMe-SSD to GPU device memory directly, bypassing the CPU and host buffer. This feature enables to apply PG-Strom on the area which have to process large data set more than system RAM size.  It allows to pull out pretty high throughput close to the hardware limitation because its data stream skips block-device or filesystem layer. Then, GPU runs SQL workloads that usually reduce the amount of data to be processed by CPU. The chemical reaction of these characteristics enables to redefine GPU's role as accelerator of I/O workloads also, not only computing intensive workloads.     In-memory Columnar Cache   For middle size data-set loadable onto the system RAM, it allows to cache data-blocks in column format which is more suitable for GPU computing. If cached data-blocks are found during table scan, PG-Strom prefers to reference the columnar cache more than shared buffer of PostgreSQL.  In-memory columnar cache can be built synchronously, or asynchronously by the background workers.  You may remember very early revision of PG-Strom had similar feature. In case when a cached tuple gets updated, the latest in-memory columnar cache which we newly implemented in v2.0 invalidates the cache block which includes the updated tuples. It never updates the columnar cache according to the updates of row-store, so performance degradation is quite limited.     GPU Memory Store (gstore_fdw)   It enables to write to / read from preserved GPU device memory region by SELECT/INSERT/UPDATE/DELETE in SQL-level, using foreign table interface.  In v2.0, only  pgstrom  internal data format is supported. It saves written data using PG-Strom's buffer format of  KDS_FORMAT_COLUMN . It can compress variable length data using LZ algorithm.  In v2.0, GPU memory store can be used as data source of PL/CUDA user defined function.     Redesign and performance improvement of GpuJoin and GpuPreAgg   Stop using Dynamic Parallelism which we internally used in GpuJoin and GpuPreAgg, and revised entire logic of these operations. Old design had a problem of less GPU usage ratio because a GPU kernel which launches GPU sub-kernel and just waits for its completion occupied GPU's execution slot.  A coproduct of this redesign is suspend/resume of GpuJoin. In principle, JOIN operation of SQL may generate larger number of rows than number of input rows, but preliminary not predictive. The new design allows to suspend GPU kernel once buffer available space gets lacked, then resume with new result buffer. It simplifies size estimation logic of the result buffer, and eliminates GPU kernel retry by lack of buffer on run-time.     GpuPreAgg+GpuJoin+GpuScan combined GPU kernel   In case when GPU executable SCAN, JOIN and GROUP BY are serially cascaded, a single GPU kernel invocation runs a series of tasks equivalent to the GpuScan, GpuJoin and GpuPreAgg. This is an approach to minimize data exchange between CPU and GPU. For example, result buffer of GpuJoin is used as input buffer of GpuPreAgg.  This feature is especially valuable if combined with SSD-to-GPU Direct SQL Execution.     PL/CUDA Enhancement   #plcuda_include  is enhanced to specify SQL function which returns  text  type. It can change the code block to inject according to the argument, so it also allows to generate multiple GPU kernel variations, not only inclusion of externally defined functions.  If PL/CUDA takes  reggstore  type argument, GPU kernel function receives pointer of the GPU memory store. Note that it does not pass the OID value.     Other Enhancement   lo_import_gpu  and  lo_export_gpu  functions allows to import contents of the GPU device memory acquired by external applications directly, or export contents of the largeobject to the GPU device memory.     Packaging   Add RPM packages to follow the PostgreSQL packages distributed by PostgreSQL Global Development Group.  All the software packages are available at HeteroDB SWDC(Software Distribution Center) and downloadable.     Document   PG-Strom documentation was entirely rewritten using markdown and mkdocs. It makes documentation maintenance easier than the previous HTML based approach, so expects timely updates according to the development of new features.     Test   Regression test for PG-Strom was built on top of the regression test framework of PostgreSQL.", 
            "title": "New Features"
        }, 
        {
            "location": "/release_note/#dropped-features", 
            "text": "PostgreSQL v9.5 Support   PostgreSQL v9.6 had big changes in both of the optimizer and executor to support CPU parallel query execution. The biggest change for extension modules that interact them is an enhancement of the interface called \"upper planner path-ification\". It allows to choose an optimal execution-plan from the multiple candidates based on the estimated cost, even if it is aggregation or sorting.  It is fundamentally different from the older way where we rewrote query execution plan to inject GpuPreAgg using the hooks. It allows to inject GpuPreAgg node in more reasonable and reliable way, and we could drop complicated (and buggy) logic to rewrite query execution plan once constructed.  CustomScan interface is also enhanced to support CPU parallel execution. Due to the reason, we dropped PostgreSQL v9.5 support to follow these new enhancement.     GpuSort feature   We dropped GpuSort because we have little advantages in the performance.  Sorting is one of the GPU suitable workloads. However, in case when we try to sort data blocks larger than GPU device memory, we have to split the data blocks into multiple chunks, then partially sort them and merge them by CPU to generate final results.  Larger chunk size is better to reduce the load to merge multiple chunks by CPU, on the other hands, larger chunk size takes larger lead time to launch GPU kernel to sort. It means here is a trade-off; which disallows asynchronous processing by PG-Strom to make data transfer latency invisible.  It is hard to solve the problem, or too early to solve the problem, we dropped GpuSort feature once.", 
            "title": "Dropped features"
        }
    ]
}